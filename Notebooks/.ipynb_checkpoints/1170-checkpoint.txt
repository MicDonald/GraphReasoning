/home/mkychsu/pool/TSMC/dataset/- Circuit Cellar (February 2003) (2003).pdf
7925274 7534902>/g67/g73/g82/g67/g85/g73/g84 /g67/g69/g76/g76/g65/g82® /g119/g119/g119/g46/g99/g105/g114/g99/g117/g105/g116/g99/g101/g108/g108/g97/g114/g46/g99/g111/g109 the magazine for computer applications /g36/g52/g46/g57/g53/g32/g85/g46/g83/g46/g32/g40/g36/g53/g46/g57/g53/g32/g67/g97/g110/g97/g100/g97/g41/g67/g79/g77/g77/g85/g78/g73/g67/g65/g84/g73/g79/g78/g83 gps-gsm navigator diy parallel port solutionnetwork enablingwireless humidity meter/g35/g49/g53/g49/g32/g70/g101/g98/g114/g117/g97/g114/g121 /g50/g48/g48/g51sk-78st  is a new 7.8", color, touch lcd. each kit includes pci controller, touch controller,inverter and adaptor cable. the sk-78st is agreat low-cost alternative to interface with sbccomputers, in just about any embeddedapplication. over  95,000 in stock!! the picl is a pic 16f877 microcontroller based development board with a 240x480 graphical that comes programmed to be used as a serial rs-232 lcd. it features- multiprotocol and complete reprogrammability. the eg9013 is a 6.3" monochrome lcd. with an inventory of over 25,000 pieces,these lcds are priced to sell! the marmalade is a low-cost 720t arm, single board computer module forlcd devices utilizing from qvga mono-chrome to svga color tft. thelh79520 combines a 32-bit arm7tdmirisc, 8kb cache, mmu, color lcdcontroller, and local sram.touch screens high bright lcd monitors lcd televisions controllers backlight assemblies sbc kits microcontroller boards panel mount lcds character displays replacement lcds for laptops serial displays video compatible lcds customization portable monitorswww.earthlcd.comphone 949.248.2333 ext 233 fax 949.248.2392 32701 calle perfecto san juan capistrano, ca 92675sales@earthlcd.com/g47/g4f/g54/g20 /g45/g4d/g42/g45/g44/g44/g45/g44/g3f made in the usathe world wide lcd sourcedigital oscilloscopes • 2 channel digital oscilloscope  100 msa/s  max single shot rate  32k samples per channel  advanced triggering  only 9 oz and 6.3 ” x 3.75” x 1.25”  small, lightweight, and portable  parallel port  interface to pc  advanced math options  fft spectrum analyzer optionsdso-2102s $525 dso-2102m $650each includes oscilloscope , probes, interface cable, poweradapter, and software forwin95/98, winnt, win2000and dos.  40 to 160 channels  up to 500 msa/s  variable threshold  8 external clocks  16 level triggering  up to 512k samples/ch  optional parallel interface  optional 100 msa/s pattern generator la4240-32k (200mhz, 40ch)         $1350 la4280-32k (200mhz, 80ch)         $2000 la4540-128k (500mhz, 40ch)       $1900 la4580-128k (500mhz, 80ch)       $2800 la45160-128k (500mhz, 160ch)   $7000 www .linkins4.com link instr uments • 369 p assaic a ve • suite 100 • fairfield, nj 07004 • (973) 808-8990 • fax (973) 808-8786logic analyz ers  24 channel logic analyz er  100msa/s max sample r ate  variable threshold v oltage  large 128k buff er  small, lightw eight and p ortable  only 4 oz and 4.75” x 2.75” x 1”  parallel p ort interface to pc  trigger out  windo ws 95/98 softw are la2124-128k (100msa/s, 24ch)clips,  wires,  interface cable , ac adapter and software$800 all pr ices include p ods and softwaree’re one month into the new year. for all the hard-working, disciplined engineers who read this magazine, i hope that means a renewed dedication to designing that next must-have device. i, on the other hand, never aspire to accomplish anything so productive with my newyear’s resolution, and i count that as a success. february used to be when i accepted defeat over fulfilling a new year’s resolution. after years of traumatic failures (e.g., not becoming the firstteenage astronaut), i no longer bother drumming up anything special to bedisappointed about after i lose interest in bettering myself. who needs thestress? in recent years, i’ve stuck to ineffectual promises to do things likestop eating cheese. then, i’d bargain with myself to simply eat less cheese.my doctor told me that i’m lactose-intolerant about a decade ago, so really,this is just a reaffirmation of my typical diet. nevertheless, i usually breakthe resolution immediately because there’s always a brie tray out on newyear’s eve. but, you see, the vitamin d and calcium in the cheese mitigatemy inhaling of a quarter-pound of lactose. so, in the end, i default on myresolution; but have i actually failed? i think not. with the rest of the dairyproducts i’m missing out on, i need that brie to fend off osteoporosis. thesame goes for feta. i make resolutions i can handle by setting the bar low. cheese depriva- tion doesn’t exactly qualify as a life-altering feat, so failing causes minimalguilt. for a successful triumph over the dreaded new year’s resolution, youhave to put a positive spin on things. choose words like “less” instead of“no,” and stress the good (e.g., vital nutrients) in that decision. a simple stress-free resolution to start off the new year works for me. maybe you would like to set the bar slightly higher than doing something likeavoiding dairy products. if you haven’t already come up with a resolution foryourself, i have a suggestion. become an author. you probably have plentyof ideas for dynamic projects and compelling articles, so sending in a pro-posal shouldn’t be too difficult. as you’re heading back to your workbench,you might want to keep our upcoming themes in mind. issues fill up quickly,so it’s a good idea to send in your proposals about a month before thedeadlines. for more information, please read the author’s guide on our website at www.circuitcellar.com/authors. theme article deadline analog techniques feb. 3, 2003measurement & sensors mar. 3, 2003embedded programming apr. 1, 2003wireless communication may 1, 2003internet & connectivity june 2, 2003data acquisition july 1, 2003embedded development aug. 1, 2003graphics & video sept. 1, 2003 4 issue 151    february 2003 www.circuitcellar.com circuit cellar®editorial director/founder steve ciarcia managing editor jennifer huber technical editor c.j. abate west coast editor tom cantrell contributing editors ingo cyliax fred eady george martin george novacekjeff bachiochi  new products editor john gorsky project editors steve bedfordken davidson david tweed advertising publisher dan rodrigues e-mail: dan@circuitcellar.com advertising sales manager sean donnelly fax: (860) 871-0411 (860) 872-3064 e-mail: sean@circuitcellar.comcell phone: (860) 930-4326 advertising coordinator valerie luster fax: (860) 871-0411 (860) 875-2199 e-mail: val.luster@circuitcellar.com advertising assistant deborah lavoie fax: (860) 871-0411(860) 875-2199 e-mail: debbie.lavoie@circuitcellar.com contacting circuit cellar subscriptions: information: www.circuitcellar.com or subscribe@circuitcellar.comto subscribe: (800) 269-6301, www.circuitcellar.com/subscribe.htm, orsubscribe@circuitcellar.comproblems: subscribe@circuitcellar.com general information:general information: telephone: (860) 875-2199       fax: (860) 871-0411internet: info@circuitcellar.com, editor@circuitcellar.com, or www.circuitcellar.comeditorial offices: editor, circuit cellar, 4 park st., vernon, ct 06066 new products: new products, circuit cellar, 4 park st., vernon, ct 06066newproducts@circuitcellar.com author contact: e-mail: author addresses (when available) are included at the end of each article. circuit cellar®, the magazine for computer applications (issn 1528-0608) and circuit cellar online are pub- lished monthly by circuit cellar incorporated, 4 park street, suite 20, vernon, ct 06066 (860) 875-2751. periodical rates paid at vernon, ct and additional offices. one-year (12 issues) subscription rate usa and possessions $21.95, canada/mexico $31.95, all other countries $49.95. two-year (24 issues) subscription rate usa and possessions $39.95, canada/mexico$55, all other countries $85. all subscription orders payable in u.s. funds only via visa, mastercard, international postal money order, or check drawn on u.s. bank.  direct subscription orders and subscription-related questions to circuit cellar subscriptions, p.o. box 5650, hanover, nh03755-5650 or call (800) 269-6301. postmaster: send address changes to circuit cellar, circulation dept., p.o. box 5650, hanover, nh 03755-5650.for information on authorized reprints of articles,  contact jeannette ciarcia (860) 875-2199 or e-mail jciarcia@circuitcellar.com. circuit cellar® makes no warranties and assumes no responsibility or liability of any kind for errors in these programs or sche matics or for the consequences of any such errors. furthermore, because of possible variation in the quality and condition of materials and workm anship of read- er-assembled projects, circuit cellar® disclaims any responsibility for the safe and proper function of reader-assembled projec ts based upon or from plans, descriptions, or information published by circuit cellar®. the information provided by circuit cellar® is for educational purposes. circuit cellar® makes no claims or warrants that reade rs have a right to build things based upon these ideas under patent or other relevant intellectual property law in their jurisdiction, or that rea ders have a right to construct or operate any of the devices described herein under the relevant patent or other intellectual property law of the re ader’s jurisdiction. the reader assumes any risk of infringement liability for constructing or operating such devices. entire contents copyright © 2001 by circuit cellar incorporated. all rights reserved. circuit cellar and circuit cellar ink are  registered trademarks of circuit cellar inc. reproduction of this publication in whole or in part without written consent from circuit cellar inc. is  prohibited.chief financial officer jeannette ciarcia customer service elaine johnston accountant jeff yanco art director kc prescott graphic designer mary turek staff engineer  john gorsky quiz coordinator david tweed  task manager cover photograph ron meadows—meadows marketing printed in the united stateswtriumph over new year’s resolution jennifer.huber@circuitcellar.com/g67/g65/g78/g98/g117/g115 /g83/g116/g97/g114/g116/g101/g114/g32/g80/g97/g99/g107/g115 pci/isa/pcmcia/pc104/ vme/cpci format boards. software drivers for most os’s. can/ethernet bridges, etc. saelig company brings you unique, easy-to-use control and instrumentation products to usa, mostly from europe, but now from worldwide. (need usa sales help - overseas companies?) our customers comment on our unrivalled free after-sales support. “hi - i’m alan  - you can email me at saelig@aol.com for free advice for your control or measurement problem.”saelig co. inc. 585-425-3753 • fax: -3835 www.saelig.com • saelig@aol.com  plug directly into pc — self powered!  drive any rs422  or rs485 devices.  send control and data  100s of feet! k422/k485, 25pin > 9pin . . . $69 k2  9pin > 9pin . . . . . . . . . . $69 isolaters232/422/485 signals  k4xx-isol 25pin  self-powered . . . . . . . . $139 new! 9p-9p k3-isol -  $129!/g77/g97/g107/g101/g32/g80/g67/g115 /g116/g97/g108/g107/g32/g73/g50/g67 /g101/g97/g115/g105/g108/g121/g33/g82/g83/g50/g51/g50/g32/g116/g111/g32/g82/g83/g52/g50/g50/g47/g52/g56/g53/g32 /g115/g101/g108/g102/g45/g112/g119/g114/g100/g32/g99/g111/g110/g118/g101/g114/g116/g101/g114/g115  store analog/digital /gps or canbus dataon flashata cards -read on your own pc!  > 100 customizable software modules—finish really quickly.  8ch 10bit a/d, 33 i/os, i 2c, 2 x rs232, interrupts, sleepmode,pre-emptive multitasking, easy toattach lcd or keypad.  canbus adapter—recompile or log data over huge network! /g80/g67/g77/g67/g73/g65/g32/g32 /g68/g97/g116/g97/g108/g111/g103/g103/g101/g114/g32/g84/g68/g83/g50/g48/g50/g48 /g108/g111/g119/g112/g111/g119/g101/g114/g32/g80/g67/g99/g97/g114/g100/g32/g108/g111/g103/g103/g105/g110/g103/g80/g67/g45/g98/g97/g115/g101/g100 /g73/g110/g115/g116/g114/g117/g109/g101/g110/g116/g115 adc-10 8-bit  $85through adc-216 16-bit $799—display scope, spectrum and meter simultaneously. connect to pc parallel port and start gathering/displaying data immediately! •enviromon temperature  logging/alarm system standalone or with pc.    th-03 thermistor- to-pc converter  tc-088x thermocouples now! gps logging check out what’s new at www.saelig.com! industry-standard card for pc’s   isa/p-port/pci versions2-6v i2c bus versions  master, slave or bus monitor  control or program i2c devices ica90/93lv - pica90/93lv pci90/93lv -  from $299! usb ic’s usb <> rs232 easily!! us232: usb <> rs232 cable $35smd pcb adapters for prototyping“how to i2c” www.saelig.com by janz for all computers drdaq plugs into a pc for useful datalogging at school, college,industry.  built-in sensors for light,sound, temp. or add ph sensor and run one of the many suggested science experiments! - only $99!/g68/g114/g68/g65/g81 /g69/g100/g117/g99/g97/g116/g105/g111/g110/g97/g108/g32 /g68/g97/g116/g97/g108/g111/g103/g103/g101/g114 /g119/g105/g116/g104/g32/g98/g117/g105/g108/g116/g45/g105/g110/g32 /g115/g101/g110/g115/g111/g114/g115/g33 www.drdaq.com customer list inc: intel, compaq, philips, nec, kodak, nokia, us military, microsoft,  dell, xerox, universities, t.i., dalsa, harris, litton, sony, j&j, thomson, h-p, agilent, etc.new!! 12-bit 100ms/s dual-ch scope adapter adc-212/100 $1015!! /g87/g73/g76/g75/g69/g32/g84/g73/g71/g69/g82/g32/g77/g79/g68/g85/g76/g69/g83 /g109/g117/g108/g116/g105/g116/g97/g115/g107/g105/g110/g103/g32/g112/g111/g119/g101/g114/g102/g117/g108/g32/g66/g65/g83/g73/g67/g32/g98/g117/g105/g108/g100/g105/g110/g103/g32/g98/g108/g111/g99/g107/g115 basic tigers are tiny multitasking computer systems for quick project development. powerful features and low prices make tigers a number one choice for developers: super-fast development cycle, high reliability products,>100,000 instructions/s, up to 38 i/o lines,a/d, d/a, i2c, spi, , text/graphic lcd inter-face, up to 50,000 lines of basic, rtc/watch-dog timer. easy connection and software forexpansion modules for canbus, tcp/ip fornet-access, opto-i/o, 64 analog inputs, 64 dig-ital outputs, high-current  outputs, etc. tiger starter kits start from $159! new! euroquartz filters/crystals!/g82/g101/g109/g111/g116/g101/g32/g99/g111/g110/g116/g114/g111/g108/g32/g38/g32/g100/g97/g116/g97/g32/g97/g99/g113/g117/g105/g115/g105/g116/g105/g111/g110 bit/g108/g105/g110/g107® power & data on two-wire  control network 2-yearself-contained dataloggers for volts, switch- closures, events, flow, pressure, etc. see www.abidata.be for details6 issue 151  february  2003 circuit cellar®www.circuitcellar.comusb parallel port jan van de kamer mcs-51 sbc for the classroom part 1: hardware praveen deshpande, prajakta deshpande, & viraj bhanage gps-gsm mobile navigator ma chao & lin ming a wireless indoor/outdoor humidity meter ken macleish short solutions simple el-lamp driver d. prabakaran i robotics corner easy image processing  camera interfacing for robotics daniel herrington i applied pcs a p89c668 development board for 8051fans fred eady i above the ground plane nonlinear mixing ed nisley ii from the bench newcomer nitron motorola’s leading 8/16-pin mcus jeff bachiochi i silicon update  working the net’ tom cantrellcolumnsissue task manager jennifer huber triumph over new year’sresolution new product news edited by john gorsky test your eq edited by dave tweed advertiser’s index march preview priority interrupt steve ciarcia real people4 8 11 94 9615112 20 3830features contest-related articles62 7876 54 6844check out avr today at www.atmel.com/ad/fastavrintroducing the atmel avr®.an 8-bit mcu that can help you beat the pants off your competition.  avr is a risc cpu running single cycle instructions. with its rich, cisc-like instruction set and 32 working registers, it has very high code density and searingly fast execution–up to16 mips. that’s 12 times faster than conventional 8-bit micros.we like to think of it as 16-bit performance at an 8-bit price.  with up to 128 kbytes of programmable flash and eeprom, avr is not only up to 12 times faster than the mcu you’re usingnow. it’s probably 12 times smarter, too.  and when you consider that it can help slash months off your development schedule and save thousands of dollars in projectcost, it could make you look pretty smart, too.  avr comes in a wide range of package and performance options covering a huge number of consumer and industrialapplications. and it’s supported by some of the best developmenttools in the business. so get your project started right. check out avr today at www.atmel.com/ad/fastavr. then register to qualify for your freeevaluation kit and bumper sticker. and get ready to take on the world. our avr microcontroller is probably 12 times faster thanthe one you’re using now. (it’s also smarter. ) avr 8-bit risc microcontrollers memory configurations (bytes) debug and processor package flash eeprom ram development tools tinyavr 8-32 pin 1-2k up to128 up to128 available nowlow power avr 8-44 pin 1-8k up to 512 up to1k available nowmegaavr® 32-64 pin 8-128k up to 4k up to 4k available now © 2002 atmel corporation. atmel and the atmel logo are registered trademarks of atmel corporation.rlow-cost rf transceiver the trf6901 is intended for use as a low-cost fsk or ook transceiver to establish a frequency-programmable,half-duplex, bidirectional radio frequency (rf) link in the860- to 930-mhz band. the single-chip transceiver oper-ates down to 1.8 v with an on-board dc/dc converterand is designed for low-power consumption. the synthe-sizer has a typical frequency res olution of approximate- ly 200 khz and features a fully integrat-ed voltage-controlled oscillator(vco). there is also code available fromti’s msp430 microcontroller family toprogram this device. typical uses include applications in wireless data communications, pdas,remote sensors, wireless metering, secu-rity systems, keyless entry, homeautomation, and garage door openers.products employing this device cannews 8 issue 151   february  2003 circuit cellar®www.circuitcellar.comnew product edited by john gorsky wirelessly transmit and/or receive up to 64 kbps ofinformation at distances greater than 200 m. the chip features programmable crystal frequency trim- ming, programmable brownout detection, 9-dbm typicaloutput power, and an integer-n synthesizer with fullyintegrated vco. also featured is an on-chip referenceoscillator and pll, a linear receive strength signal indi- cator (rssi), and a three-wire serial portinterface. minimal external componentsare required for this 48-pin, low-profileplastic quad flat package (pqfp) device. the trf6901 is priced at $2.75 in quantities of 1000. texas instruments, inc.(972) 644-5580www.ti.com low-cost 8051 controller the versa 1000 (vrs1000-40) is a low-cost, 8-bit, 8051-based microcontroller with in-system program-ming (isp) capability. with its hardware features and powerful instruction set, the vrs1000-40 can easily serve as a versatile andcost-effective controller for applications that require upto 36 i/o pins and 64-kb flash memory for either pro-gram, data, or both. to program the on-chip flash mem-ory, a commercial writer is available. the flash memorycan be programmed in either serial or parallel interfacewith the isp feature. the vrs1000-40’s isp capabilitymakes it easy to program via an rs-232transceiver/level shifter. the vrs1000-40 is available in 44-plcc and 44-qfp packages, and it’s pin compatible with other 8051-basedmicrocontrollers. key fea-tures include: three 16-bittimers/counters, a watchdogtimer, and four 8-bit i/oports plus one 4-bit i/o portfor plcc or qfp packages.the device also features afull-duplex serial channel,nested interrupts, two priori-ty level interrupts, power save modes, and a code pro-tection function. the vrs1000-40 is supported by a demo system, and it’s compatible with keil compilers and the raisonanceide/compiler/assembler, the latter of which is freelyavailable from goal. the price for the versa 1000 in quantities of 1000 is $3.40 . goal semiconductors, inc. (514) 871-2447www.goalsemi.com 68hc9s12dp256 development board the evbplus9s12dp256 board is a low-cost, feature- packed development board for the new motorola hcs12microcontroller family. it’s compatible with themotorola 9s12dp256evb board and other similar devel-opment boards from axiom and technologicalarts, butit also incorporates many on-board peripherals thatmake this board a better value for users.  the state-of-the-art mc9s12dp256 controller is the most powerful chip in the family, and it’s loaded withhardware features, such as 25-mhz bus speed, 256-kbflash memory, 12-kb sram, and 4-kb eeprom. on- chip peripherals include dual scis, triple spis, i 2c, five can modules, two 10-bit eight-channel adcs, eightpwms, and eight 16-bit timers. it can also be used inevaluation and development of all the other familymembers, such as a series and d series. the on-board hardware includes bdm in and bdmthe on-board hardware includes bdm in and bdm out ports, a solderless breadboard, four robot servo out-puts, a 2 × 16 lcd module, a 4 × 4 keypad connector, afast spi expansion port, a speaker, a four-digit seven-seg-ment led display, eight data-led indicators, and fourmode-led indicators. also included is a dip switch,four push buttons, ir and rf transceivers, an rs-485interface, three can ports, and dual sci db9 connec-tors. all i/o lines in the 112-pin male header and femalereceptacle provide  easy access for your experiments onthe breadboard. supplied with an rs-232 cable, which is used for con- necting to a pc serial port andan ac adapter to power theboard, the board is pricedstarting at $145 . evbplus.com (630) 894-1440www.evbplus.comuse the cypress psoc™instead of an mcu for more flexibility, fewer parts and lower cost. the versatile psoc™programmable system-on-chip™is  the world’s first mixed signal array that lets you custom configure the exact functions you need. and it has an on-chip controller to manage your application and run the configuration process. graphically select, place, and interconnect  the peripherals you want and adapt the architecture with psoc designer ™software dynamically reconfigure a single psoc  chip multiple times—changing functionality on the fly in any application reduce bom cost by reducing the number  of external components mcu later . cypress, psoc, programmable-system-on-chip and psoc designer are trademarks of cypress semiconductor corporation. ©2002 cypress  semiconductor corporation.  all other trademarks are the property of their respective owners.there are many more blocks to work with— and thousands of configurations to choose from.  psoc designer™software is free for download, with  full-featured emulation hardware starting at $248.option #8926 8-bit pwm inverting amplifier irda  transmitter 11-bit delta sigma a/dband pass filter analog  comparator 8-bit counter8-bit dac24-bit timer low pass filteroption #1530 analog  comparatorinstrumentation  amplifier12-bit  incremental a/dnotch filter 16-bit crcoption #625 analog  comparator 16-bit pwm programmable  gain amplifierinstrumentation  amplifierirda  transmitter 11-bit delta sigma a/d8-bit dac12-bit  incremental a/d band pass filter 8-bit counteroption #4237 cpuanalog  comparatoryour customized mixed signal  platform in 60 minutes or less build your custom psoc™with programmable analog and digital functions from our extensive library. to learn more about our innovative psoc solutions and to enter a drawing to win a psoc development kit, visit www.cypress.com/ad/mcu .10 issue 151   february  2003 circuit cellar®www.circuitcellar.comnew productnew product robot base the blue robot base now includes additional micro controller support. this new version allows the follow-ing boards to be mounted to the robot: basic board jr,jstamp development board, adapt12 system, oopic 1and 2, mini robomind, parallax board of education,isopod development board, dontronics dt005passive motherboard, and the rogue robotics simm-bot system. the rogue blue robot base is an 8 ″round base with three high levels, two central 3 ″servo-driven wheels, and sensor mount mounting holes on the first and sec- ond levels for greater flexibility and ease of installation.the base is a highly stable platform for smooth surfaceexperimentation and research. it’s ideal for hobbyists,educators, researchers, and robot enthusiasts. the rogue blue robot base sells for $119 . it is also available as a full robot kit bundled with the parallaxboard of education ( $219 ) or as a rogue robotics simm- bot ( $219 ). and for as little as $79, a parallax boe-bot can be upgraded to a rogueblue robot with the rogueblue boe expansion pack. rogue robotics(416) 707-3745www.roguerobotics.com cost-effective 14-pin flash memory pic the pic16f630 and pic16f676 are new 14-pin, flash memory microcontrollers that feature an integrated ana-log-to-digital converter, precision internal oscillator, andquick start-up. the pic16f630 and pic16f676 microcontrollers are code-compatible with microchip’s current pic12f629and pic12f675 eight-pin flash memory devices, allow-ing designers to reuse software and hardware in existingplatforms, thus lowering overall development costs andtime-to-market concerns. the devices offer a typicalstandby current of 100 na at 2 v and a wide operatingvoltage range from 2 to 5.5 v. a quick start-up of 2 ms, and the ability to run a timer from an external crystal while in sleep mode make thedevices ideal for applications requiring low-power opera-tion. additionally, the peripheral features can be enabledby individual on/off  controls to conserve power. the pic16f630 and pic16f676 offer 1792 bytes of flash program memory, 64 bytes of ram, and 128 bytesof eeprom with one million erase/write cycles. thepic16f676 features a 10-bit analog-to-digital converterwith eight channels that can use either vdd or anexternal voltage reference. additional peripherals avail-able on both devices include a precision internal oscilla-tor that is ±2% stable over a wide temperature and volt-age range, a comparator with an internal voltage refer-ence with 32 selectable voltage levels, and brownout reset (bor). pricing in high vol- ume is $0.79 each for the pic16f630, and$0.91 each for the pic16f676. microchip technology inc.(480) 792-7668www.microchip.com miniature four-digit lcd the lcd-s401m14tf is a new miniature four-digit lcd with characters only 0.174 ″high. it incorporates three decimal points, allowing numbers ranging from 0.001 to 9999 to be displayed. it also incudes units ofmeasure for pressure indication in psia, mpa, and kpa.the display is available with customer-specified featuresin production quantities as small as 1000 units. thislcd is ideal for equipment or instruments where aminiature pressure display is required, or in any applica-tion requiring a compact, four-digit display withextremely low power consumption. the transflective lcd utilizes twisted nematic (tn) lcd fluid against a gray background for good readability.an optional backlight is also available, allowing use inenvironments with low—or even zero—ambient light. the lcd is housed in a single in-line package with thirteen 0.25 ″-long leads on 0.06 ″centers. the total package footprint size is 0.8 ″× 0.4″. package thickness is 0.11″maximum. the device operates from a 5-vac sup- ply over a temperature range of 0 to 50°c. the storage temperature range is –20° to 70°c. typical pricing for the standard configuration is $0.32 in quantities of 5000.ply over a temperature range of 0 to 50°c. the storage temperature range is –20° to 70°c. typical pricing for the standard configuration is $0.32 in quantities of 5000. lumex, inc.(800) 278-5666www.lumex.com newswww.circuitcellar.com circuit cellar®issue 151     february  2003   11problem 5 —can an induction motor (e.g., squirrel- cage type) be used as a generator?  contributed by dave tweed problem 6 —what is "lithotripsy"? what is the shape of the sound reflector and why?  contributed by dave tweed problem 7 —why does this reconstruction of a  20-khz sine wave sampled at 44.1 khz show ripple inits amplitude?  contributed by dave tweed problem 8 —assume you can make a cigarette out of six cigarette stubs. if you are given 36 cigarettes,how many can you smoke? contributed by naveen pnproblem 1 —which of the following are legiti- mate parts of a url?   protocol  username  password  host  port  path  parameter  query  fragment  contributed by david tweed problem 2 —which parts of a url are used by the client (browser), and which parts areused by the server?   contributed by dave tweed problem 3 —an analog signal channel car- ries frequencies from 1 to 11 khz. what is theminimum frequency at which signals from thischannel must be sampled? what is the sam-pling interval, t, in this case? contributed by naveen pn problem 4 —suppose that the snr of this channel is 8:1. what is the maximum number ofbits per second that this channel can theoreti-cally carry?  contributed by naveen pnwhat’s your eq? —the answers and 4 additional questions and answers are posted at  www.circuitcellar.com/eq.htm you may contact the quizmasters at  eq@circuitcellar.comtest your eqcircuit cellaredited by dave tweed12 issue 151    february 2003 circuit cellar®www.circuitcellar.comife is becoming more and more dif- ficult for the electron- ic enthusiast who wants to connect his own hardware to a pc.in the old days, a handful of standardlogic chips, a parallel printer port, anda simple dos program would do thejob. nowadays you need knowledgeof microcontrollers, windows devicedrivers, and hardware protocols likeusb. windows 98 still allows directaccess to the registers on the printerport hardware, but newer versions ofwindows such as windows 2000strictly forbid this. even worse, thereare plans to declare parallel and seri-al ports obsolete! of course, it is always possible to resist the new generations of pc hard-ware and operating systems by usingthe pentium 233-mhz machine run-ning windows 95. but eventually therewill come a time when new softwarereleases of your favorite cad systemswill not run on the old machine. sure, anew pc is quickly bought, but whatdo you do with your hardware projectsthat took many hours of time to build? one possible solution is a usb-to- standard parallel port adapter thatdoesn’t use a microcontroller or otherprogrammable logic. although there isno need to develop a windows devicedriver for this adapter, it is unfortu-nately necessary to modify your proj-ect software. there is no way aroundthis. on the bright side, you get some-thing back for this effort: now multi-ple adapters can be connected to thepc simultaneously. note also thatthis adapter cannot be used to drive anactual printer with standard printerdrivers; the reasons for this willbecome clear shortly. parallel port emulation if you ignore bidirectional modes (e.g., epp and ecp), a standard parallelport has 12 outputs and five inputsthat all operate at ttl levels, asshown in figure 1. reproducing thispinout is not difficult. two 74hct273chips provide 16 outputs, and eightinputs can be generated by using a74hct541. the problem now becomesa question of connecting the resulting8-bit bus to the serial usb interface. itseems future technology devicesinternational (ftdi) considered thisquestion as well, and its answer wasto develop the versatile ft8u245amusb-to-parallel interface chip. the ft8u245am is a full usb v.1.1-to-parallel converter that con-tains all of the logic required to identi-fy itself as a usb device, to initializethe interface, and handle all usb com-munication. your project hardwarehas two buffers that it can access, oneof 384 bytes for sending data to the pcand one of 128 bytes that contains thedata received from the pc. as a bonus,ftdi supplies a free windows devicedriver that can be downloaded fromthe company’s web site. unfortunately, the ft8u245am is available only in a qfp package.there are no sockets for this packageand it’s difficult to solder by hand.however, it can be done and youneed to build the interface only once. figure 2 lists the pinout of the chip.i’ll discuss the main signals, but forthe full details, download thedatasheet from the ftdi web site. usb operation the usb hardware and driver soft- ware on the pc work together to cre-ate virtual bidirectional pipelines forusb parallel port l with each passing generation of pc andos technology, it’sbecoming harder foryou to connect yourhome-built hardwareto your computer.however, with jan’susb-to-standard par-allel port adapter, youwill have no problemconnecting your ownhardware.jan van de kamerfeaturearticlewww.circuitcellar.com circuit cellar®issue 151   february 2003   13ated as output q1 of the state machine goes low and q2goes high. this could be inter-preted by the ft8u245amas the next read pulse.fortunately, the parasiticcapacitance of the outputs ofthe 74hct4017 results in asmall overlap of the outputsignals, and the measure-ments show no spikes in thedecoded signals. a full cycle of the state machine requires 10 clockpulses. if at that time there ismore data in the receivebuffer, then a second cycle will follow immediately. this can be used to boost the speed of theinterface significantly. the maximumspeed of the usb interface is 12 mbps.and, when the overhead of addressesand checksums are subtracted, thisresults in an effective data transferrate of 1 mbps. the ft8u245am iscapable of handling this data rate, sothe usb parallel port’s hardware mustbe able to keep up. because two bytesare read per cycle, the state machinemust be able to execute 524,288 cyclesper second. each cycle requires 10 clockpulses, so an oscillator frequency of alittle less than 6 mhz is sufficient.the values of r10 and c4 are selectedto produce this frequency. to put the outputs into known states after a power-up cycle, a resetcircuit is incorporated using r12through r14, q1, and c8. a nanddata flowing between an appli-cation program and a particularusb device. when an applica-tion writes a byte via the driv-er api, that byte eventuallyappears in the receive fifo ofthe ft8u245am. similarly,when a byte is written by thehardware to the chip’s transmitfifo, it becomes available tothe software a short time later. this project takes advantage of that in the simplest possibleway by requiring that theapplication send data 2 bytes ata time, representing the 16 out-puts. for every 2 bytes sent, the hardware returns 1 byterepresenting the eight inputs. thismeans that the software must always execute a read function after every2- byte write function in order to pre- vent the incoming pipeline from over-flowing. these simple rules mean thatthe hardware can be nothing morethan a simple state machine that gen-erates a series of signals that willalways be the same. a gal or palwould be ideal for this job, but eitherwould require access to a specializedprogrammer, and i want to avoid that. figure 3 shows the order in which the different signals need to be gener-ated to latch the output data intotwo 74hct273 8-bit latches for the 16 outputs and to read one 74hct541buffer for the eight inputs. the *rxfsignal from the ft8u245am is usedas a trigger for the state machine. thefirst step is to lower the *rd signalreleasing the first byte for the outputs,which are clocked into the first74hct273 by pulsing its clock sig-nal (cp1). both cp1 and *rd can beunasserted at the same time.  another lowering of *rd releases the second byte of outputs that get clockedin the second 74hct273 by a pulse oncp2. after unasserting *rd the secondtime, the *rxf signal should be at ahigh level because all of the data hasbeen read from the receive buffer. thenext step is to drive the inputs onto thedata bus by lowering the *oe  signal of the 74hct541, clocking the current state of the inputs into the transmitbuffer of the ft8u245am on thefalling edge of the wr signal. whenthis sequence is completed, the statemachine will stop in state 0 untilnew data is received. the schematics figure 4 presents the schematics for my usb parallel port (see photo 1),including the ft8u245am (u1) alongwith the input and output buffers u3through u5. the resistor array r9makes sure the inputs are alwayswell-defined even if they’re not used.connector cn2 is a 25-pin d-sub con-nector identical to those found onthe rear of a pc. it carries 12 of theoutputs and five of the inputs. theremaining inputs and outputs are con-nected to cn3. these will not be usedfor existing hardware projects, but itwould be a shame not to make themavailable for future projects. the heart of the statethe heart of the state machine is u6, a 74hct401710-state counter with fullydecoded outputs. r10, c4, anda nand schmitt trigger cre-ate an oscillator for thiscounter. it starts only whenthere is data in the receivebuffer of the ft8u245am(*rxf = 0) and runs until thestate machine is finished pro-cessing the data. the norgates of u8 and a nandgate in u7 combine the out-puts to generate the signalsshown in figure 3. theoretically, there can be a timing problem on the *rdsignal. a glitch can be gener- d7 d6 d5 d4 d3 d2 d1 d0 13 11  9 8 7 6 5 4 3 2 1817161514 1*busy ack paper select error *select int *autofeed *strobe 25-pin female d-sub connector= output = input 1920212223242512 10 figure 1— the standard pc printer port connector is mapped to the control registers of the pc hardware. eecs rcclk avcc agnd xtout xtinvccgnd *eegnt *eereq *rxf vcc *txe wreesk eedata vcc *reset test 3v3out usbdpd1 d2 d3 d4 d5 d6 d7 gnd*rdusbdm d0 1724 ftdi ft245am xxyy32 25 91 61 8 figure 2— from the top of the 32-pin quad flat pack package, you can see the pinout of the ft8u245am.14 issue 151    february 2003 circuit cellar®www.circuitcellar.comgate produces an inverted signal to reset the state machine. all outputs arereset to a low level. the ft8u245am also receives a reset so that the usbparallel port is in a well-defined stateand ready to receive data. voltage and current multiple voltages are required for the usb parallel port. the inputs andoutputs must operate with 5-v logiclevels in order to be compatible withstandard printer ports. however, thedata lines of the usb interface mustoperate at 3.3-v logic levels. this volt-age is generated by a low-dropoutregulator on the ft8u245am. pin 6provides a 3.3-v power supply that’sderived from the voltage on thechip’s v ccpins. all other data and control signals of the ft8u245amuse the v cclevel, which can be between 4.4 and 5.25 v. this voltage range is exactly what’s available on a standard usb interface,which allows usb hardware to use thepc’s power supply instead of an exter- nal power supply. the usb host inter-face supports an initial current of100 ma. after the usb device is con-figured, it can request an increase incurrent to a maximum level of 500 ma.the host controls this. if there is nopower available, the request is deniedand the device is shut down. as you know, a standard printer port does not provide a power supplyconnection; so, all of your hardwareprojects already have external powersupplies that also can be used topower the usb parallel port. u9 pro-duces a stable 5 vdc from any inputbetween 8 and 12 vdc, and diode d1protects the hardware from accidentalreverse polarization.  a solid copper heatsink is designed into the pcb that has an area of4.5 cm 2. this produces a thermal resistance of about 42°c/w, whichallows u9 to dissipate up to 2.6 w.the maximum output current dependson the input voltage. at 9 vdc, u9must drop 4 v, which limits the cur-rent to 2.6 w divided by 4 v, giving atotal of 650 ma. if more current isrequired, u9 must be mounted stand-ing up and attached to an aluminumheatsink. it’s also advisable to buildup the ground and power lines to con-nector cn2 with solder in order toreduce their resist ance. figure 4— the ftdi ft8u245am and standard cmos series for logic are the basis of the electronics required to build your own usb parallel p ort.*rxf *rd cp1cp2 *oe wr figure 3— the various control signals must be gener- ated in a particular order. the blue arrows indicate that the signal is flank-triggered.16 issue 151    february 2003 circuit cellar®www.circuitcellar.comin the usb design rules, it states that an externally powered device isnot allowed to put voltage on the sig-nal lines if the pc is switched off.this requires the usb parallel port tocut off the 3.3 vdc generated by theft8u245am because current can flowinto the interface via pull-up resistorr3. to prevent this, transistor q2 incombination with resistors r15 andr16 block the 3.3-vdc power supplyto r3. as soon as the pc is switchedon, the data+ line is pulled to3.3 vdc, indicating to the pc that thisis a high-speed usb device (i.e., sup-porting data transfers at 12 mbps). ifr3 were connected to the data– line,the pc would limit the data transferspeed to 1.5 mbps. the ft8u245amadjusts itself accordingly. the first time after the pcb is finished, i imagine you’ll want to turn on the power.don’t do it just yet; first, mount thepcb onto a flat surface or in a hous-ing. it wouldn’t be the first time asmall piece of wire caused a short onyour pcb when you just placed it on atable. secondly, you need to do somework on the pc before you can con-nect the usb parallel port. i have developed a special test pro- gram for the usb parallel port thatyou may download from my web site (home.planet.nl/~jkamer) or the circuit cellar ftp site. the installation program setup.exe takes care of multiple tasks.the test software is installed as well asthe eeprom programmer softwarefrom ftdi. the device drivers for theft8u245am are placed in a ftdi sub-folder, which are needed only when theusb parallel port is con nected for thefirst time. a documentation sub-folder that contains several specs and usermanuals is also created. finally, thesource files of the test program areplaced in a source folder. the test pro-gram is developed using delphi. thebest part is that the software is freeand can be distributed freely. after installing the test software, you are all set and ready to go. now,connect a 9-vdc power supply tocn4. led d2 will light up to indicatethat power is available. this is themoment you’ve been waiting for: it’stime to plug a usb cable type ab intoyour pc and into the usb parallelport. windows will start thinking (thefamous hourglass) and prompt youwith a “new hardware found” dialog.  the rest is simple as you follow the instructions presented by windows.as soon as windows requests thelocation of the device information file,point it toward the folder that con-tains the ftd2xx.inf file. after com-pletion of the installation, the statusof the ft8u245am can be requestedusing the windows device manager photo 1— i made the prototype of the usb parallel port by hand.effort…big prizes! innovate with the hc08 from motorolainnovate with the hc08 from motorola these products incorporate superflash®technology licensed from sst . motorola and the stylized m logo are registered in the u.s. patent and trademark office. all other product or service names are the property of their respective owners. © motorola, inc. 2 002 68hc908qt4 demonstration kitflash innovation 2003 design contest enter our flash innovation 2003 design contestinvolving our new hc08 q-family. you may beeligible to win a 60” thin plasma screen hdtvor one of several otherexciting prizes. we areoffering prizes valuedtogether at more than $30,000.  innovate with the hc08! motorola’s hc08 q-familyof 8-bit microcontrollersis available in small 8- and 16-pin packaging.with flash, you gain theflexibility to reprogramin-application and in-circuit, which helpsmake field upgrades easy and inexpensive. take advantage of  our 68hc908qt4demonstration kit,which has everythingyou should need to get started. entries can be from the very simple to the mostintricate. innovation,architectural eleganceand quality of design arethe keys to success inflash innovation 2003. deadline for entries: june 30, 2003 for information on entering and for contest rules, visit us at www.circuitcellar.com/fi2003 small parts, low-cost tool, little effort …big prizes!18 issue 151    february 2003 circuit cellar®www.circuitcellar.comtype of device. in order to tell them apart, each device musthave its own serial numberand device description. bydefault the ft8u245am usesa vid of $0403, a pid of$6001, no serial number, andno device description. becauseno serial number or devicedescription is given, by defaultonly one ft8u245am devicecan be connected to the pc. with the help of an eeprom these values can be changed tomake the devices unique. youcan request a new vid numberfrom the usb organization, andthen change the ftdi’s defaultvalue. this isn’t affordable formost hobbyists, so instead youmight want to limit yourself tochanging the serial number anddevice description. the ft8u245am spec docu- ments how to organize the eepromcontents. however, it is not necessaryto develop an eeprom programmer;the ft8u245am can take care of thisitself using the usb interface. to makelife easy, ftdi provides a program thatallows you to enter the settings youwant (see photo 3). you can downloadthe program from the ftdi web site. there are many suppliers of serial eeproms. the basic function is thesame but the use of non-serial pins 6and 7 and the memory layout seem tovary from supplier to supplier. thechip used here must have a 64 × 16 bitmemory layout, and ftdi recom-mends the 93lc46b (among others)(under the control panel). a new usb device will appear inthe list with the description“ftdi ft8u2xx device.” what might look strange is that the properties of thisdevice indicate a usb-to-serialdevice. this is because ftdialso supplies a serial version ofits chip, the ft8u232am. thedevice driver for both chips isthe same; the parallel versionuses only a subset of the func-tions. for example, commandsthat set the data rate are notneeded for the parallel version. if windows doesn’t find the new hardware or does not rec-ognize the hardware as a usbdevice, you face an interestingchallenge. but, don’t throw thepcb out the window just yet;first, remove the usb cable andpower supply. if you didn’t do ityet, use a multimeter to check thatthere are no shorts between the pinsof the ft8u245am. then, measure allof the tracks among the componentsto make sure the pcb is ok. you canalso reconnect the power and measurethe voltage on the logic pins; theseshould be at a nice high or low logiclevel. if everything checks out andafter reconnecting it to the pc it stillis not recognized, your only remainingoption is to try a different pc. my pcis one of the first that contained usbports and windows 98se as an operat-ing system. it seems that the first usbhost chips were not as compliant withthe standard as they claimed.replacing the usb card with a latermodel solved the problem. after windows has installed the ftdi device drivers, the test programcan be launched. after detecting theusb parallel port, all of the outputscan be modified directly using thecheckbox closest to the output youwant to change. photo 2 shows ascreen dump of the software. thecheckboxes that are placed close tothe inputs cannot be modified butinstead display the current status ofthe corresponding input. a mark inthe checkbox indicates a high level,and no mark means a low level. notethat if you change the level at one of the inputs on the hardware, then you will not see this in the software untilyou change an output. device configuration i succeeded in designing the usb parallel port without the use of micro-controllers or any other programmablehardware. however, a small eeprommemory is connected to theft8u245am at u2. proper operationof the usb parallel port does notrequire this chip, so why put it there? every usb device must identifyevery usb device must identify itself to the pc; this is done by twocodes, the vendor id (vid) and theproduct id (pid). these two 16-bitnumbers are the first thepc calls for after a deviceis connected. dependingon the value of thesenumbers, windows willdecide which device driv-ers must be loaded to sup-port the device. if thedevice is a known device,windows takes care ofthis without your help. ifthe device is new,windows will prompt youwith the “newhardware” dialog. it is possible to connect more than one of the same photo 3— the eeprom programming utility for programming the eep- rom code in-system was developed by ftdi. photo 2— the test software for the usb parallel port provides easy access to each input and output.second. at the same time, the inputs are also read 190,000 times. this isachieved using a transmit buffer size of2 × 8000 = 16,000 bytes. if the buffersize is increased, the interface collaps-es and the throughput is reduced. itseems it is no longer possible todivide the data over the available timeslots, and incoming data is lost. i measured the speed with only one usb parallel port connected on theusb interface so that all 1000 slotswere available for the device. if moreusb devices are connected, the band-width is divided and the throughputwill decrease accordingly. i www.circuitcellar.com issue 151   february 2003   19 circuit cellar®from microchip. available in many packages, i selected a 93lc46b-p, the p indicating an 8-pin dil package. place an empty eeprom in the sock- et for u2 after removing the usb cableand switching off the power supply.after inserting the eeprom, the usbparallel port can be connected to thepc again and the eeprom configura-tion program ftd2xxst.exe can be launched. fill in the requested data using the vid and pid numbers from ftdi. if you changed these numbers, windowswill recognize the parallel port as a dif-ferent device because it won’t knowthe new numbers. the ftd2xx.infconfiguration file must be changed toreflect the new values. the device driv-ers themselves do not have to change. after entering the required data in ftd2xxst.exe, it can be written intothe eeprom by selecting the programcommand from the device menu.remove the usb cable, switch off thepower supply, and then switch on andinsert the usb cable again. windowswill find new hardware but the pidand vid will be known this time, sowindows will assume the device usesthe registered device drivers.  from this point onward, you’ll have the ability to connect multiple usbparallel ports. the test software doesnot support this, but because thesource code is available (including aspecial delphi usb parallel portobject), it’s easy to modify the softwareas needed. note that you still have todo some of the programming yourself. performance measurement after every write cycle of 2 bytes, the hardware places 1 byte in theproject files to download the pcb layouts,go to ftp.circuitcellar.com/pub/circuit_ cellar/2003/151/. sources ft8u245am interface chip future technology devicesinternational ltd.44 141 353 2565www.ftdichip.com 93lc46b chip microchip technology inc.(480) 786-7200www.microchip.comresource usb informationusb implementers forum(503) 296-9892www.usb.orgjan van de kamer earned a b.s. intechnical computer science fromhogeschool arnhem, the netherlands,in 1993. after graduation, he success-fully started his own business design-ing microcontroller embedded sys-tems for industrial applications. onthe side, he designs robots usingthese types of systems. he enjoysinterfacing with mechanical partsand bringing them to life. you mayreach jan at jkamer@planet.nl orthrough his web site at home.planet.nl/~jkamer.transmit buffer. the size of the trans-mit buffer is 384 bytes, so after send-ing 2 × 384 = 768 bytes, the pc mustexecute a read cycle to prevent theloss of data.  when i tested this on the prototype, i found a strange effect. even when itransmitted a block of 1000 bytes, iwas able to execute a read cycle of500 bytes. how was this possible?the usb protocol divides every sec-ond into 1000 time slots. in each slot,data can be exchanged between a pcand the addressed device. if you send1000 bytes to the ft8u245am, thewindows device driver from ftdiwill transmit this data to the chipusing a handshake protocol over sev-eral time slots. after sending eachpacket, the status of the ft8u245amis reported back with 1 bit indicatingwhether the transmit buffer containsdata. if so, this buffer is read by thepc before sending more data to pre-vent data loss. this uses up somebandwidth, but the benefit is obvious. in order to determine the maxi-in order to determine the maxi- mum speed of the usb parallel port, iconnected some of the outputs toinputs. by varying the buffer size andcounting how many of these bufferscould be processed in 1 s, i producedthe graph shown in figure 5. the x-axis displays the buffer size as passedto the device driver. for example, avalue of 1025 indicates a transmitbuffer of 2050 bytes and a receivebuffer of 1025 bytes. the number ofcycles is listed on the y-axis, whereone cycle represents setting 16 out-puts and reading eight inputs. the graph shows a maximum of 190,000 changes to the outputs per200,000 180,000160,000140,000120,000100,000 80,00060,00040,00020,000 0buffer size number of cycles (per second)25 525 1025 1525 2025 2525 3025 3525 4025 4525 5025 5525 6025 6525 7025 7525 8025 figure 5— you can compare the number of access cycles that can be made per second to the usb parallel port versus the buffer size used in the access cycle.20 issue 151    february 2003 circuit cellar®www.circuitcellar.comhen we joined a small group respon- sible for the develop- ment of instrumentation for various systems, we didn’t havemany resources in our laboratory.moreover, we were developing micro-processor-based instrumentation solu-tions with an 8085 microprocessor-based cpu card that was purchasedfrom a local vendor. although the cardwas powerful with its densely packedperipheral chips, the after-sales sup-port was unsatisfactory.  at the same time, the instrumenta- tion community was adopting the 8-bitmcs-51 microcontroller (i.e., the intel8051), which had a lot of peripheral cir-cuitry built right on the chip, as wellas an instruction set that was opti-mized for instrumentation and controlapplications. this chip made it possibleto develop single-chip applicationswithout having to add a single externalperipheral device for i/o or memory.  the chip impressed us so much that we initiated smaller projects based onthe intel 8751 (i.e., an 8051 microcon-troller with 4 kb of on-chip eprom).soon thereafter, we decided to developa general-purpose cpu card to addressthe need for different types of dataacquisition and control systems. we had experience designing vari- ous microcontroller-based embeddedsystems, so the advantages of modulardesign were obvious to us. we devel-oped an 8051 microcontroller-basedcpu card in 3u single euro formfactor (160 mm × 100 mm) with a pro-prietary expansion bus on a 64-pineuro connector. the card has 64 kbof rom, 32 kb of ram, and otherglue logic with a selectable rs-232/rs-422 or rs-485 serial interface,a matrix keypad, and an lcd inter-face. since then, we’ve executed manyinstrumentation projects that werebased on our 8051 cpu card. one day, a professor from a local engineering college visited our labora-tory. after inspecting the various proto-type systems, he understood the impor-tance of a general-purpose cpu and fewi/o cards. he pointed out that such ageneral-purpose microcontroller-baseddevelopment system would be highlyuseful to engineering students fortheir coursework and designers inembedded systems laboratories. many commercial manufacturers use programmable logic devices (pld)or application-specific integrated cir-cuits (asic) for their developmentsystems. these devices are advanta-geous because of their low cost andhigh packing density, which results ina small board size. however, most ofthe circuit gets encapsulated insideone or two devices, making it espe-cially difficult for students to trou-bleshoot and examine the technology. the situation becomes worse when one of these devices is damaged by amistake on the part of the students,which is bound to happen at thisintroductory stage in their careers.the bad device, being proprietary (thedevice fuse map is not disclosed forcommercial reasons), has to be pur-chased from the hardware manufac-turer. thus, in spite of the availabilityof commercial systems, they aren’tused in college labs because of thescarcity of funds, poor after-sales sup-port, insufficient documentation andsource code, and lack of trouble-shoot-ing expertise in college departments.  the professor suggested that if a system were specially designed forcollege students, many colleges wouldmcs-51 sbc for the classroom part 1: hardware w college students tendto experience a lot ofproblems when work-ing with developmentsystems that useplds and asics. so,at the behest of a localcollege professor,praveen and his col-leagues developed aninexpensive 8051-based sbc that’s per-fect for the classroom.praveen deshpandeprajakta deshpandeviraj bhanagefeaturearticlewww.circuitcellar.com circuit cellar®issue 151   february 2003   21another aim of ours was to provide a powerful monitor program resident ineither an on-board rom socket or 8051on-chip rom. the size of the monitorprogram decides its final deployment inon-chip or external rom.  the monitor program is designed to provide all of the basic features: pro-gram entry using an in-line assembler,program execution, single stepping,break point, viewing and modifyingvarious memory areas, registers, sfrs,program uploading and downloading,and so on.  a serial interface is a valuable resource for communicating with ahost computer during the debuggingsession. a jumper-selectable rs-232/rs-485 serial interface is includedfor communication with the hostcomputer (see figure 1).  an 18-key matrix keyboard, a six- digit led, and a 2 × 16 or 4 × 20 alpha- numeric lcd interface are included forbasic input/output. the on-board key-board and display comes to your rescueif a host computer isn’t available forsoftware development during thelearning stage. the serial eeprom isincluded because it can be used to storevarious configuration parametersshould you decide to use this sbc fordeveloping a serious embedded system. the 8-pin socket accepts a variety of serial nvram devices from 128 bytesto 1 kb or more, and it requires justtwo processor i/o lines for interfacing!finally, if you discover at a later stagethat the hardware on the sbc is insuf-be interested in using it. so, we agreedto design a single-board computer(sbc) for the students. in this article,we’ll describe the 8051 microcon-troller-based sbc that we developed.  we chose the 8051 microcontroller because of its industry-standard archi-tecture, availability, and low cost. inaddition, the professor’s students wereusing the 8051 in a few courses. design objectives our main design objective for the 8051 sbc hardware was to use inex-pensive and available components (seetable 1). we chose a 40-pin devicebecause it was readily available andinexpensive, but you can choose fromthe intel 8031 (no rom) or one with4 or 8 kb of on-chip program memory(e.g., atmel or philips 89c51/52).  if you need two hardware serial ports, then the ds80c320/520 fromdallas semiconductor is a goodchoice. cygnal, philips, maxim, andsiemens also offer compatible(enhanced in many cases) 8051 coresand many more on-chip peripherals(e.g., adc, pwm channels, watchdogtimer, analog comparator, etc.); never-theless, they’re more suitable for sin-gle-chip applications rather than fullyexpanded systems. without externalperipheral devices, you can easily operate the 8051 at its maximumclock speed (i.e., 50 mhz for thedallas 80c420).  external program memory and external data memory are combinedby applying the rd and psen signalsto the input of an and gate, and byusing the output of the gate as theread strobe to the external programand data memory. the obvious disad-vantage is that the overall memoryspace is cut in half. you can stilldevelop a sufficiently complex embed- ded application with a combined 64-kbcode and data memory space.table 1—we laid down ambitious specifications at the time of design. fortunately, we were able to meet our objec- tives with readily available, inexpensive devices. figure 1— the sbc is designed to be rich in resources such as serial interface, keyboard display, lcd, eeprom, and 64 kb of shared memory space. moreover, you can expand it further by adding your custom hardware on a prototyping board.64-pin din euro expansion connector ic23 eeprom 24c01ic3 74hct373ic4 74hct373ic2 74ls245sda (p1.6)  scl (p1.7) rs-232 interface ic18 max232 ic22 75176 reset ic6ep2[0..7] p0[0..7] p1[0..7] p3[2..5]txd rxd *rd, *wr, ale  ic6 74ls04ic7 74ls393ic5 74ls367 11.0592 mhz bclk8279clkcontrol bus address busrstic (11,13,14)  i/o decoder logic ic (8,19,20,21) keyboard and seven-segment led ic (6,14,15,16) lcd interface ic10  32 kb of ram ic17  32 kb rom or ram data bus(ic1)8051 µc bclk0device descriptioni/o decoder logic ic (8,19,20,21) keyboard and seven-segment led ic (6,14,15,16) lcd interface ic10  32 kb of ram ic17  32 kb rom or ram data bus(ic1)8051 µc bclk0device description cpu mcs-51-compatible 40-pin (dip) device speed 11.0592 mhzmemory 32 kb of rom, 32 kb of ram, 60-kb downloadable overlapped program and  external data memory i/o space 256 bytes of fully decoded i/o spaceon-board input devices 18-key push-button matrix keypad using intel 82c79 controllerdisplay interface 2 × 16 or 4 × 20 lcd, six-digit, seven-segment led  serial interface rs-232 or rs-485 (jumper selectable) nonvolatile memory support for 8-pin serial eeprom devices with i 2c interface digital i/o 12 (includes on-board timer and interrupt input pins)expansion 8-bit proprietary expansion bus on a 64-pin din euro connector with buffered   data, address, and control signals firmware boot loader for intel hex file downloading and execution; powerful retargetable  debugging monitor program power requirement 5 v at 0.5 a (without lcd backlit drive)miscellaneous on-board reset switch, leds for power indication8279 (ic8). you can imple- ment up to 64 keys and16 digits using this device.ic19 through ic21 pro-vide decoding and drivingfunctions. the irq line istaken to logic high when akey is available in the on-chip fifo memory of ic8.this line is inverted andcan be connected to theint1 line of the microthrough jumper jp9. the memory map’s structure is illustrated infigure 2. the system hasfour memory areas: on-chip internal programmemory, external datamemory, internal scratchpad memory, and externalprogram memory. the32-kb external code mem- ory area starts at 0000h. the circuit diagram on the circuit cellar ftp site shows a 32-kb eprom device 27c256 for ic17. if you choose to use a boot loader pro- grammed inside the mcs-51 on-chipcode memory, you can insert a 32-kbram in the ic17 socket. only pins 1,27, and 22 need to be reconfigured,and jp4 through jp6 are provided toaccomplish this (see table 2).diode d1, r3, c2, and a not gate (ic6e) generate a power-on reset sig-nal. you can reset the micro with theswitch sw1. cn1 extends the resetbutton to the system’s front panel. the sbc provides an on-board key- pad with 18 push-button keys and sixseven-segment leds using an intel 22 issue 151    february 2003 circuit cellar®www.circuitcellar.comficient for your applica-tion, an expansion bus isavailable on a 64-pin dineuro connector foradding external hardware. the sbc circuit you may download a complete circuit diagramfor the sbc from thecircuit cellar ftp site. even though it has a 40-pin generic 8051-micro-controller device (ic1),any other compatible 40-pin device can be used. arom-less device usuallyis the cheapest option.refer to the circuit cellar ftp site for a list of compatible devices. the circuit has an 11.0592-mhz crystaloscillator built around afew gates in ic6, r1, r2,y1, and c1. the bufferedclock signal (bclk0)drives either the x1 or x2 pin of themicrocontroller. the 8051 microcon-troller has an on-chip oscillator circuitthat needs an external crystal and twocapacitors, but it doesn’t provide aclockout signal, which may berequired for many external peripheraldevices used in this design (e.g., the8279 keyboard and led controller). forthis reason, an external crystal oscilla-tor is used and ic7 (74ls393) dividesthe 11.0592-mhz clock signal to pro-duce bclk (5.5296 mhz) and 8279clk(1.3824 mhz). note that 11.0592 mhzgives you many standard data rates forserial communication on an rs-232interface; however, you may use a dif- ferent clock if necessary. we found that the input pin (x1 or x2) used for an external clock is differ-ent for intel, atmel, and other micro-controller devices. a jumper (jp3)enables you to drive either the x1 orx2 pin from the external clock signal.you can leave the remaining pinunconnected or grounded as per thedevice’s datasheet.  resistor r4 takes the *ea/vp pin high. you can disable the on-chip pro-gram memory (if available) on an 8051device by inserting shorting jumper jp1. figure 2— the mcs-51 has three types of memory space. it was cleverly designed with single- chip control applications in mind. however, you can easily expand it by adding external devices. this sbc memory map shows the physical addresses for various areas and i/o devices.ffe0h ffc0h ffa0h ff80hff60hff40hff20hff00h*bpcs5 *bpcs4*bpcs3*bpcs2*bpcs1*bpcs0 *lcd1 *8279csexternal data   memory mapped i/o space (256 bytes) 32-kb external  data memory + code memory   space overlapped (user code   download area) 24-kb external data memory + code memory space overlapped (ic17 is ram) 8-kb on-chip  program memory on at89c52  (boot loader) sfr direct addressing only indirect addressing only direct and  indirect  addressingffh 80h ffh 80h 7fh 00h internal data memory   ram and sfr spaceexternal data and code memory space32-kb external program (code) memory ic17 is  eprom/rom (boot loader or application code)ffffh ff00h feffh 8000h 7fffh 2000h 1fffh 0000hram and sfr spaceexternal data and code memory space32-kb external program (code) memory ic17 is  eprom/rom (boot loader or application code)ffffh ff00h feffh 8000h 7fffh 2000h 1fffh 0000h table 2—the sbc hardware is highly configurable. you can change the memory map, enable or disable certain memory areas, and select the serial interface of your choice. in addition, you can play with the configuration using the various shorting jumpers listed here.jumper purpose position/status description jp1 (two-pin) enables/disables 8051 on-chip open disabled program memory closed enabled jp2 (three-pin) rs-232/485 serial interface selection 1 –2 rs-485 2–3 rs-232 jp3 (five-pin) 8051 device external system clock 2 –3 drives x1 pin 11.0592-mhz driving pin selection 3 –4 drives x2 pin 1–2 x1 pin is grounded 4–5 x2 pin is grounded jp4 (three-pin) configuration of ic17 as either 32-kb 1 –2 32-kb rom device jp5 (three-pin) rom or ram. jp4, jp5, and jp6 2 –3 32-kb ram device jp6 (three-pin) have identical positions 1 –2 or 2–3. jp7 (two-pin) *irq signal from 8279 (ic8) closed int1 gets *irq on key-  strokes jp1 (6 × 2 pin) card-select signal on the prototype 1 –2 *bpcs0 expansion board for choosing a 3 –4 *bpcs1 base address for that board. a 5 –6 *bpcs2 unique position must be selected 7 –8 *bpcs3 for each additional board. only one 9 –10 *bpcs4 position should be selected for 11 –12 *bpcs5 each board.flash facts$49.95  ($199 value)now for a limited time zilog redeﬁnes 8-bit with the new z8 encore!™ family of ﬂash microcontrollers that simpliﬁes your developmentprocess, increases design productivity and gives youmore functionality than any other 8-bit mcu in history.  but don’t take our word for it.  visit us at www.zilog.com/z8encore2  or  call us at 866-498-3626 and receive our complete  development kit for only $49.95.  act now because when this special introductory offer ends, the kit will sell for $199.95! z8 encore! ™ will be available in all standard ﬂash memory  conﬁgurations from 4k to 64k. incorporated into new  designs or upgrading from existing 8-bit (including z8®)  architectures, this next-generation mcu has featuresand performance that leaves the competition in the dust. the z8 encore!™ t est drive kit includes hardware • evaluation board  • t arget interface module board• serial cable• universal power supplysoftware • zds ii ide with full     version c-compiler • sample code• device drivers• documentation cd the new z8 encore!™ mcu block diagram 10-bit a/d converter port a port b port c port d port e port f port g port h16-bit timer w/pwm 16-bit timer w/pwm 16-bit timer w/pwm 16-bit timer w/pwm i2c spi uart 0 uart 1watch-dog timercrystal  oscillator register file 4k x 8 dma controller interrupt controllerez8 20mhz cpureset control on-chip debuggerflash program memory 64k x 8thethe order now!   visit us at www.zilog.com/z8encore2 or call us at  866-498-3626 (866-4z8-encore) z8 encore!™ zilog, z8 encore! and z8 are trademarks or registered trademarks of zilog inc. in the united states and in other countries. oth er logos, product names and service names mentioned herein may be trademarks of the companies with which they are associated. this comparison is valid as of 9/27/2002. feature zilog  motorola zilog  motorola   z8f6403  mc68hc908as60a  z8f3202  mc68hc908gp32  actual cpu speed 20mhz  8mhz 20mhz  8mhz  on board dma yes no yes no  high speed flash 64k 60k 32k 32k  sram 4k bytes  2k bytes 2k bytes  512 bytes  a/d converter 10-bit  8-bit 10-bit  8-bit  spi & i2c both  no i2c both  no i2c  uart s 2 (9-bit)  1 (8-bit) 2 (9-bit)  1 (8-bit)  16-bit timers 4 multi-mode 2  multi-channel  4 multi-mode 2 multi-channel   independent  synchronous  independent synchronous   timers  timers  timers  timersa 32-kb ram hm62256 (ic10) maps to the upper memo- ry space starting at 8000h. aneight-input nand gate (ic13)and decoder (ic9) provide eightchip-select outputs for the top-most 256 bytes of external mem-ory space (ff00h through ffffh)for connecting external peripher-als. two outputs, *8279cs and*lcd1, are used to address theon-board keyboard/display con-troller and the lcd interface. the remaining six chip-select signals (*bpcs0 through*bpcs5) are made available on a64-pin din euro connector forfurther expansion. the expansionconnector j1 has all the necessary sig-nals (e.g., buffered data bus, addressbus, *brd, *bwr, brst, and bale),in addition to p1 port lines, for fur-ther expansion. the microcontroller’stimer input pins (t0 and t1) andinterrupt inputs (int0 and int1) aremade available, and the expansionboard can also draw power (5, 12, and–12 v) from this connector.  the sbc provides an lcd interface on cn3. you can use a 2 × 16 or 4 × 20 lcd with led backlight, and either a4- (two transfers) or 8-bit (single trans-fer) data bus for the lcd controller.the lcd controller needs an active-high enable signal (lcden); it alsorequires a single r/*w signal to indi-cate an active-high read and active-low write. because the mcs-51 hastwo independent signals for data readand write, a flip-flop is imple- mented using two nand gates(ic14b and ic14c). the outputof this flip-flop becomes ther/*w signal. the lcd controller also requires an active-high enablesignal that must be delayed atleast by 100 ns with respect to the r/*w signal. the actual delay value depends on the lcd con- troller used (refer to the datasheet for your controller). r4, c3, andtwo inverter gates in ic16 gener- ate the delay. the display can beseparate from the sbc (e.g., onthe front panel of an enclosure). the sbc implements a three-wire rs-232 serial interface using amax232 (ic18). you have to make acable for connecting the sbc to thehost computer in a null modem con-figuration. the handshake signals(e.g., rts and cts) should be loopedback to the host computer. a two-wire rs-485 serial interface is implemented using a 75176 trans-ceiver (ic22) from texas instruments. 24 issue 151    february 2003 circuit cellar®www.circuitcellar.comphoto 1— take a look at the boot loader in action. y ou can use windows hyperterminal for communication with the sbc. after the sign-on message, send your hex file using the pop-down menu pointed to by the cursor .www.circuitcellar.com circuit cellar®issue 151   february 2003   25the object code (i.e., intel hex file for- mat) into the on-board memory. it mayoptionally perform a ram test andnotify you of any errors. then, you can execute the downloaded code. the intel standard hex file is one of the most popular formats in the mcs-51 world. the standard is used to burnthe mcs-51 program into an eprom,prom, and so on. for instance, an8051 assembler will usually generatebecause the 8051 has only one on-chip uart, you select either the rs-232 or rs-485 serial interface usingjumper jp2. the txd signal is alwaysconnected to both the max232 and75176, which helps you to developrs-485-related software because youcan see the data on the rs-485 net-work via a pc’s serial port.  p1.5 pin of the microcontroller is connected to the data enable pin ofthe 75176. if you’re using the rs-485interface, make sure the data enablepin p1.5 is taken low by your power-up initialization routine. you must dothis because it’s made high by thehardware reset of the 8051 microcon-troller, enabling the rs-485 transmit-ter. this blocks the rs-485 network. the sbc supports an 8-pin (e.g., at24c01) serial eeprom using a bit-banged i 2c interface. few 8051 devices offer an on-chip hardware i2c interface; however, to make the sbcaccept the most general 8051 micro-controller device, we decided toimplement the i 2c in the software. atmel has documentation that pro-vides the details for the soft-ware implementation. [1] you will find three leds for power supply indication: d2,d3, and d4. each applicationmay have different powerrequirements, hence we keptthe power supply separate.  firmware the minimal software com- ponent required to start work-ing with the sbc is a bootloader program resident at thereset vector location (i.e.,either micrcontroller on-chipcode memory or externaleprom). this pr ogram enables you to download your object code from the host pc using an rs-232 serial inter-face. at the pc, you can use any ter- minal emulator program (e.g.,windows hyperterminal) to send thehex file to the sbc’s serial port.  the boot loader program is responsi- ble for initializing the on-board hard-ware (e.g., uart, 8279, and lcd),posting a sign-on message, and loadingphoto 2— unfortunately, the single-board computer ’s keys were not mounted at the time of the photograph. you must mount a 64-pin reverse euro (right-angled female) connector to accom- modate the expansion boards.www.circuitcellar.com circuit cellar®issue 151   february 2003   27an intel standard hex file that can be loaded into an eprom programmerand burned into the chip.  the boot loader c code in listing 1 uses a function, loadintelhexfile() ,to convert the intel hex file on the fly to binary. it also computes the check-sum and verifies that the file has beendownloaded correctly in the sbc’scode memory space. first, a few lines display a sign-on message. after you see a ready string,you should send the hex file to thesbc’s serial port (see photo 1). the bootloader starts reading individual fieldsafter it receives a colon. two helperfunctions, getdata() and getaddr() , return 8- and 16-bit values after readingappropriate ascii characters from theserial port and converting them to cor-responding binary quantities. the asc2bin() routine converts each character (a nibble) into an 8-bitvalue using a look-up table to speedup the process. because we used onlya three-wire serial interface, the pcsends the serial data continuouslywithout bothering with how it’s con-sumed. as the rts/cts flow controllines are looped back, the pc notesthat the serial data is consumed by thereceiving end, and is ready to acceptnew data. the boot loader has to con-vert the received ascii datastream tobinary, separate each field, identify therecord type, and load the data bytes tothe physical address location.furthermore, it has to compute thechecksum and validate it before thenext line reception begins.  as you can tell, the cpu has little time to echo each received character.instead, the progress of the download-ing is shown by displaying a #for each line received. the loadintelhex file() function (see listing 1) initial- izes an external data memory pointervariable (p) with the load address, and writes all of the data bytes receivedfrom one input line received from theintel hex file to the physical memory. itinitializes another code memory pointervariable (cp) with the same load address and simultaneously reads back the writ-ten data for checksum computation. the use of a separate code memory pointer is essential because the cpuwill fetch the code from the code mem-ory, and it must get the correct codebytes during program execution. thecomputation of the checksum byadding the read-back code bytes ensuresnot only the correct data reception fromthe host pc, but it also confirms thatit’s correctly accessible via the codememory space. if the computed check-sum is found to be correct, the codeproceeds to receive the next record.listing 1— with boot loader code, you can quickly start software development with the sbc. it downloads the intel standard hex files from the host pc. remember to configure your serial port to rs-232. the use of c language simplifies the coding effort. void loadintelhexfile(void) //convert hex file to binary and load it unsigned char count,ch, i, rec; {unsigned char far *p;unsigned char code *cp;unsigned int addr, min_addr=0xffff, byte_counter=0;char buf[30];baseaddr = 0xffff;       //go address computedsends ("\r\nmcs-51 single board computer"); //sign-on messagesends ("\r\n(c) 2002, p p deshpande, v p bhanage");sends ("\r\nboot loader intelhex file v1.0");sends ("\r\nready\r\n");while(1) { if ((ch = recvchrw()) != ':') continue;sendchrw('#');checksum =tchk=0;tchk += count = getdata(); //get number of bytesaddr = getaddr(); //load addresstchk += uintbytes.b.hb; //add the address bytetchk += uintbytes.b.lb;if ( addr < baseaddr) baseaddr = addr;tchk += rec = getdata();if ( rec == 1) { i=0;break; }p = (unsigned char far *)addr; //external data memory pointer cp = (unsigned char code *)addr;  //code memory pointerif (rec == 0) { for (i=0; i < count; i++) { *p++ = getdata();tchk += *cp++; }checksum = getdata(); //read checksum byte }tchk += checksum; //should result in 0if (tchk) { //not 0, report checksum error i = 2;break; }byte_counter += count; //count bytes loaded }if (i==0) { //inform that file download is successful}tchk += checksum; //should result in 0if (tchk) { //not 0, report checksum error i = 2;break; }byte_counter += count; //count bytes loaded }if (i==0) { //inform that file download is successful sprintf (buf, "\r\n%d bytes loaded!", byte_counter);sends(buf); //display number of bytes successfully loadedsends("\r\npress 'g' to execute.\r\n"); } else { handlechecksumerror(); //report checksum error  }while (toupper(recvchrw()) != 'g'); //wait for g commandsends ("\r\nexecuting...");asm ("clr   a ");asm ("mov dph,_baseaddr+0"); //load base addressasm ("mov dpl,_baseaddr+1");asm ("jmp @a+dptr "); //jump to user programwhile(1);}six seven-segment displays. if you’ve hooked up the sbc to the host pc,you will see a sign-on message on thepc screen (see photo 1), followed by a“ready” prompt. at that stage, thesbc will be waiting to receive theobject code from the pc. we haven’t included the design of the power supply in this article. thesbc requires only a 5-v power supply;however, a 12- and –12-v power sup-ply is made available for an expansioncircuit board that may contain signalconditioning and other detector front-end analog electronics. thus, thepower supply current requirement isdependent on the expansion circuit.  if you decide to use low-power com- ponents (e.g., the hct series), thepower requirement reduces even fur-ther. the board requires 5 v at 0.5 a ifttl ics are used for all of the logicdevices except ic3 and ic4, and thecmos devices for 89c52, 82c79, and62256. a 0.5-a current is usually suffi-cient for 12-v supplies unless yourapplication drives numerous 12-vrelays, motors, and the like. always usea proper heatsink for voltage regulators. code debugging? if you require code-debugging fea- tures, you’ll need a monitor programthat enables you to set break points, 28 issue 151    february 2003 circuit cellar®www.circuitcellar.comotherwise, the loader reports a check-sum error with a dump of the loadedcode bytes, load address, record type,received and computed checksum val-ues, and so on. you may use thisinformation for troubleshooting. when an end-of-file record field is encountered, theloadintelhexfile() function dis- plays the actual number of bytesloaded with a prompt to press the “g”key to execute the program. after youhit the “g” key, it displays the mes-sage “executing” and makes an indi-rect jump to the lowest load addressreceived during the download. if youwish, you can modify the code to setan explicit start address for execution. listing 2 shows you how to set up an interrupt vector table to redirecteach vector to the corresponding loca-tion in the user code memory startingat 8000h. this is essential if you wishto use of any of the available interruptsources in your application. many 8051derivatives, such as the ds80c320,have more interrupt sources thanwhat’s shown in listing 2.  if you decide to use any such device, you must add a device-specificinterrupt vector redirector to yourboot loader code. as you write yourapplication code, it should begin at8000h. you may use an assemblerdirective (e.g., org 8000h) to locateyour code. in addition, you shoulddeclare the interrupt service routinesat corresponding vector locations rela-tive to 8000h (e.g., 8003h must haveexternal int0 vector). you may download the source code and intel hex file for the boot loaderfrom the circuit cellar ftp site. we used the hi-tech c compiler with sin-gle-chip memory model for compilingthe code, but any other c compilershould do the job.  the code size of the boot loader is greater than 4 kb because we usedstandard c library functions (e.g.,sprintf() ). the code doesn’t require any external data memory for its oper-ation. the hex file can be readily pro-grammed into the on-chip code mem-ory of the 8051 microcontroller orexternal eprom. we used 19,200-bps,8-bit, no-parity, 1-stop bit settings tocommunicate with the host pc.construction as you can see in photo 2, the pcb is double-sided with plated-throughholes. we used ic sockets for easiercomponent replacement. after you solder all of the ic sockets and the power supply connector, makesure that a continuity tester doesn’tshow continuity between 5 v andgnd. then, apply 5 v and make surethat each ttl ic is getting a 5-v sup-ply. solder all of the discrete compo-nents (i.e., resistors, diodes, capacitors,crystal, etc.) and insert the 74ls04 (ic6)into its socket. don’t forget the 0.1-µfceramic decoupling capacitors near thepower pins of all of the logic devices.  you should also see a reset signal ifyou should also see a reset signal if you press the reset switch (sw1). insertthe ic max232 (ic18) and check thevoltages at pins 2 and 6 with a multi-meter; they should read approximately9 v and –9 v, respectively. insert ic7and check the clock signal at pin 2,bclk, and other 8279clk signals. after the clock signals are verified, it’s time to insert the other ics. theboot loader code must be programmedeither in the external eprom or inthe internal code memory space of themicrocontroller. set jumpers jp1, jp3,jp4, jp5, and jp6 to match your mem-ory configuration. if all is well, youshould see a sign-on message on the listing 2— you must initialize the interrupt vector table in this way if you wish to use it in your application. by doing so, all of the interrupts are redirected to the corresponding vector locations of the user program area starting at 8000h. //set up an interrupt vector table (8052 device specific). allinterrupts are redirected to start_addr (8000h). you may need toadd more vector locations if you choose an mcs-51 derivate withmore interrupt sources.#define start_addr 0x8000#asm psect vectors,ovrld; assemble directive to tell this is ivt org         03h ; ext int0 vector ljmp        start_addr + 03horg         13h ; ext int1 vectorljmp        start_addr + 13horg         0bh ; timer0 vectorljmp        start_addr + 0bhorg         1bh ; timer1 vectorljmp        start_addr + 1bhorg         23h ; serial port(ri+ti)vectorljmp start_addr + 23horg         2bh ; timer2 vector (8052 only)ljmp        start_addr + 2bh #endasmwww.circuitcellar.com circuit cellar®issue 151   february 2003   29project files to download the code and schematics, go to ftp.circuitcel-lar.com/ pub/circuit_cellar/2003/151/. reference [1] atmel corp., “interfacing at24c xxserial eeproms with at89c x051 microcon- trollers,” october 1998. resources p. deshpande, “implementing atwo-wire rs-485 network,”circuit cellar 133, august 2001. intel corp., mcs 51 family user’s manual , intel corp., santa clara, ca, 1994. ———, microprocessor and peripheral handbook , vol. 2 peripheral, intel corp., santaclara, ca, 1988.sources ad7713 sigma-delta adcanalog devices, inc.(781) 329-4700www.analog.com at24c01, at89c51/52 atmel corp. (408) 441-0311www.atmel.com 87c520/80c320 dallas semiconductor, inc.(972) 371-4000www.dalsemi.com c compiler hi-tech software, llc(800) 735-5715www.htsoft.com mcs-51 microcontroller intel corp.(408) 765-8080www.intel.com 75176 transceiver texas instruments, inc.(800) 336-5230www.ti.compraveen deshpande earned hisb.s.e.e. from the regionalengineering college (rec) in nagpur,india. he’s a senior scientific officer inthe field of distributed data acquisi-tion and control. you may reach himat ppd@cat.ernet.in. prajakta deshpande has a b.s. from sagar university and a master ofcomputer applications (m.c.a.) frombarkatullah vishwa vidyalaya, bothin india. currently, she lecturesabout computer science. you mayreach her at ppd@nettaxi.com. viraj bhanage received a b.s. in elec- tronics and telecommunications fromshivaji university in kolhapur, india.currently, he designs laser-basedsystems. you may reach viraj atviraj@cat.ernet.in. perform a single-step execution, andexamine various memory areas andcpu registers. this is a topic in and ofitself, so we’ll discuss the implemen-tation of a re-targetable monitor pro-gram in another issue. until then, youcan test the sbc hardware and thinkabout powerful embedded applicationsbased on this sbc. i30 issue 151    february 2003 circuit cellar®www.circuitcellar.comith today’s stand-alone global position system (gps) receivers, you are able to pinpoint your own position. but, what’smore useful about stand-alone gpsreceivers is that they can transmit yourposition information to other receivers.we decided to use both of these fea-tures to create a wireless vehicle track-ing and control system for the designlogic 2001 contest, sponsored byatmel and circuit cellar .  to design the port navigation system, we combined the gps’s abilityto pinpoint location along withthe ability of the global  system for mobile communications (gsm) to communicate with acontrol center in a wirelessfashion. the system includesmany gps-gsm mobilenavigators and a base stationcalled the control center.  let us briefly explain how it works. in order to monitorships around a port, each shipis equipped with a gps-gsmmobile navigator. the naviga-tor on each ship receives gpssignals from satellites, com-putes the location informa-tion, and then sends it to thecontrol center. with the ship location information, the control center dis-plays all of the ships’ positions on anelectronic map in order to easily moni- tor and control their routes. besidestracking control, the control centercan also maintain wireless communi-cation with the gps units to provideother services such as alarms, statuscontrol, and system updates.  hardware gps became available in 1978 with the successful launch of navsstar 1.later, in may of 2000, the u.s. gov-ernment ended selective availability(sa); as a result, the gps accuracy isnow within 10 to 30 m in the horizon-tal plane and slightly more in the ver-tical plane. for more information ongps and its accuracy, read jeff stefan’sarticle, “navigating with gps”(circuit cellar 123). the gps-gsm mobile navigator is the main part of the port navigationsystem. the design takes into consid-eration important factors regardingboth position and data communica-tion. thus, the project integrateslocation determination (gps) andcellular (gsm)—two distinct andpowerful technologies—in a singlehandset (see photo 1).  the navigator is based on a micro- controller-based system equipped witha gps receiver and a gsm moduleoperating in the 900-mhz band. wehoused the parts in one small plasticunit, which was then mounted on theships and connected to gps and gsmgps-gsm mobile navigator w what’s the more laud-able engineering feat,designing a naviga-tion system capableof tracking ships inshanghai port orplacing at the top of acompetitive designcontest? with theaward-winning gps-gsm mobilenavigator, ma and linaccomplished both. ma chao & lin mingfeaturearticle lcdbutton  control at45d021  flash  memoryat90s8515  microcontrolleralarm power   supply 3:1  mux gps modulers-232  interfacegsm  modulespi uart figure 1— the at90s8515 microcontroller is the basis for the gps-gsm mobile navigator.www.circuitcellar.com circuit cellar®issue 151   february 2003   31buzzer or presented on the lcd. the first way is to receive the commandfrom the control center; the secondway is to manually send the alarminformation to the control center withthe push of a button. the gps-gsm mobile navigator is powered by either a rechargeable bat-tery or dc input. getting gps data after the gps module computes the positioning and other useful informa-tion, it then transmits the data in somestandard format—normally in nmea-0183 format. when you’re building thisproject, it’s nice to be able to buystand-alone gps oem modules. justcheck the pages of circuit cellar for manufacturers. we used a sandpipergps receiver from axiom for this proj-ect. the sandpiper is intended as acomponent for an oem product thatcontinuously tracks all satellites inview and provides accurate satellitepositioning data. with differential gpssignal input, the accuracy ranges from1 to 5 m; however, without differentialinput, the accuracy can be 25 m.  the sandpiper has two full-duplex ttl-level asynchronous serial datainterfaces (ports a and b). both binaryantennas. the position, identity, head-ing, and speed are transmitted eitherautomatically at user-defined timeintervals or when a certain eventoccurs with an assigned message (e.g.,accident, alert, or leaving/entering anadmissible geographical area). this information is received by the system in the dispatching or opera-tions center, where it is presented as ashort message service (sms) messageon a pc monitor. sms is a bidirection-al service for sending short alphanu-meric (up to 160 bytes) messages in astore-and-forward fashion. if the onlydata received is time and position,then the data can be displayed on adigitized map and also recorded in adatabase file; the recorded informationcan be replayed later for debriefing orevaluation of a mission. the hardware block diagram is shown in figure 1. the at90s8515microcontroller assures that all of thecomponents work well together; it con-trols all incoming and outgoing mes-sages as well as the i/o channels, serialinterfaces (rs-232), peripheral devices(e.g., lcd and buttons), and all otherparts. the gps module receives thegps signals and outputs the data to theat90s8515 microcontroller via a ttl-level asynchronous serial (uart) inter-face. the microcontroller works withthe gsm module by communicatingwith the gsm network. the interfacebetween the gsm module andat90s8515 is also ttl async serial.an rs-232 interface is used to exchangedata with the pc.  because the at90s8151 has only oneuart, a three-channel multiplexer isused to switch among three workingmodes. the location information andother data is stored in the 2-mb serialdata flash memory of the at45d021.the flash memory stores up to 2160pieces of location information in 12 h, because the gps-gsm mobile navigator saves gps signals every 20 s. four but-tons, an lcd, and a buzzer enable youto display the system status and infor-mation and control the navigator.  system features as we explained, the gps module outputs the ship location informationsuch as longitude, latitude, andgreenwich time every 2 s. the loca-tion information is then stored every20 s in flash memory, which hasenough power to memorize the trackof a ship even when the power is off. note that the gsm wireless commu- nications function is based on a gsmnetwork established in a valid regionand with a valid service provider. viathe sms provided by the gsm network,the location information and the statusof the gps-gsm mobile navigator aresent to the control center. meanwhile,the mobile navigator receives the con-trol information from the control cen-ter via the same sms. next, the gps-gsm mobile navigator sends theinformation stored in flash memory tothe pc via an rs-232 interface. (notethat you can set up the navigatorusing an rs-232 interface.)  there are two ways to use the mobile navigator’s alarm function,which can be signified by either athere are two ways to use the mobile navigator’s alarm function,which can be signified by either a table 1—the nmea rmc data values are based on the following example: $gprmc,161229.487,a,3723.2475,n,12158.3146,w,0.13,309.62,120598,,*10 . photo 1— on the front side of the main board, you can see an lcd, four programmable keys, a gsm module, an rs-232 connector, and some other components. name example units description message id $gprmc – rmc protocol header utc position 161229.487 – hhmmss.sss status a – a = data valid; v = data not valid latitude 3723.2475 – ddmm.mmmm n/s indicator n – n = north; s = south longitude 12158.3416 – dddmm.mmmm e/w indicator w – e = east; w = west speed over ground 0.13 knots – course over ground 309.62 degrees truedate 120598 – ddmmyy magnetic variation – degrees e = east; w = west checksum *10 –– <cr><lf> –– end of message termination34 issue 151    february 2003 circuit cellar®www.circuitcellar.comand nmea initialization and configura- tion data messages are transmitted andreceived through port a. port b is con-figured to receive rtcm dgps correc-tion data messages, which enable thegps unit to provide more accurate posi-tioning information. but, we didn’trequire the use of port b for this project.  about 45 s after the gps module is cold booted it begins to output a setof data (according to the nmea for-mat) through port a once every sec-ond at 9600 bps, 8 data bits, 1 stop bit, and no parity. nmea gps messagesinclude six groups of data sets: gga,gll, gsa, gsv, rmc, and vtg. weuse only the most useful rmc mes- sage—recommended minimum specific gnss data—which containsall of the basic information requiredto build a navigation system. table 1lists the rmc data format. we only need position and time data, so the utc position, longitudewith east/west indicator, and latitudewith north/south indicator are pickedout from the rmc message. all ofthis data will be formatted into a stan-dard fixed-length packet with someother helpful information. next, thisdata packet will be transmitted to thecontrol center and stored in theat45d021’s flash memory. the data packet is a 42-byte long ascii string, which includes the pack-age id, system password, terminal id, figure 2— jack port jp1 is the 20-pin gps socket header. jack port jp2 is the 40-pin gsm socket header. u2 is the dual four-channel multi plexer controlled by pa2 through pa3. all of the data traffic runs at 9600 bps.table 2—take a look at the 42-byte data package format and the following example ready to be saved: :10019999e121263457n311864290742160 030000#.name byte definition description start byte 1 : start symbol of data package data package id 1 0~9 package id is repeated from 0 to 9system password 3 000~999 system passwordterminal id 4 0000~9999 terminal idposition data 19 e000000000~e180000000 e means east longitude, which is from 000 ° and 00.0000 min. to 180 ° and 00.0000 min. n00000000~n90000000 n means north latitude, which is from 00 ° and 00.0000 min. to 90 ° and 00.0000 min. utc 6 hhmmss greenwich time (hour, minute, second)upload time rate 3 001~255(003) upload time interval = basic upload time × upload time rate alarm information 4 xxxx 0 means ok; 1 means alarm byte 1: aberrance alarmbyte 2: over-speed alarmbyte 3: dangerous area alarmbyte 4: manual alarm stop byte 1 # stop symbol of data packagewww.circuitcellar.com circuit cellar®issue 151   february 2003   35position data, utc, and other operational information.table 2 shows the definitionof a reforming data packetand an example ready to besaved or transmitted. gsm transmits data a committee of telecom vendors and manufacturers ineurope—the europeantelecommunications standardsinstitute (etsi)—designed gsm as a digital wireless communications system. commercial service began in mid-1991,and by 1993 there were 36 gsm net-works in 22 countries, with 25 addi-tional countries looking to participate.furthermore, the standard spreadquickly beyond europe to south africa,australia, and many middle and fareastern countries. by the beginning of1994, there were 1.3 million subscribersworldwide. today, gsm is also the most widely used communications stan-dard in china, and covers almost all of the country. so, we didn’t need to setup a communications base station forour system; this, of course, significantlyreduced the total cost of the project. the most basic teleservice supported by gsm is telephony. group 3 fax, ananalog method described in itu-t rec-ommendation t.30, is also supported bythe use of an appropriate fax adapter.sms is one of the unique features ofgsm compared to older analog sys-tems. for point-to-point sms, a mes-sage can be sent to another subscriberto the service, and an acknowledgmentof receipt is sent to the sender. smsalso can be used in cell broadcast modeto send messages such as traffic or newsupdates. messages can be stored onthe sim card for later retrieval.  sms is effective because it can trans- mit short messages within 3 to 5 s viathe gsm network and doesn’t occupy atelephony channel. moreover, the costsavings makes it a worthwhile choice(i.e., in china, each message sent costs$ 0.01 and receiving messages is fr ee). with sms transmitting, gathering posi- tion data is easy and convenient. as with gps modules, stand-alone gsm oem modules are available. weused the falcom a2d from wave-com for this project. the falcoma2d is a dual-band embedded gsmmodule (gsm900/dcs1800). it fea-tures the following services: telepho-ny, sms, data, and fax. the gsm module has one ttl- level serial data interface. we use atcommands to control and program thefalcom a2d. the data and controlcommands are exchanged between themicrocontroller and gsm modulethrough the serial interface.  there are many groups of at com- mands, including: call control, data card control, phone control, computer data card control, reporting operation, network communication parameter,miscellaneous, and short messageservice. we use some of the sms com-mands to communicate with the con-trol center. the main at commandsfor using sms are listed in t able 3. you can download the gsm 07.07 andgsm 07.05 protocols for more detailsabout the at commands that are usedin gsm communications. [1, 2] let’s review an example of how to make a gsm module send and read asample sms in text mode. first, initial-ize the gsm module with at com- mands at+csca and at+cmgf. using the former sets the sms center number to be used with outgoing sms messages.remember, the number will be saved on the sim card just like in normal mobile phones. there are two different modes— text mode and protocol data unittable 3—to send sms messages, you can use these (mainly) at commands. for more details, you may want to read the gsm 07.07 protocol on the etsi web site. command definition at+csca set the sms center address. mobile-originated messages are transmitted through this service center.at+cmgs send short message to the sms centerat+cmgr read one message from the sim card storageat+cmgd delete a message from the sim card storageat+cmgf select format for incoming and outgoing messages: zero for pdu mode, one for text modeat+csmp set additional parameters for text mode messages initialization  eeprom check  flash memory check  gps/gsm reset mode select  (= 0, 1, 2, 3)npower off  button  pressed   >1s ypower off prepare uartinitialization  eeprom check  flash memory check  gps/gsm reset mode select  (= 0, 1, 2, 3)npower off  button  pressed   >1s ypower off prepare uart  communication reset  system parameters received  "$"  from the pc send all of the data in   flash memory to pcstandard  working mode  update system parameters with datadata   received is in   correct formatdisplay current  system parameters  while receiving   data from pc return to  mode selectreturn to  the current modey nm = 3m = 2 m = 1m = 0 ynn ypower on figure 3— after initialization, you can select the function mode by pressing the menu button and enter button. the lcd will show the status and system parameters.ple tasks between the gps and gsm modules, although it hasonly one uart serial port. withthe programmable flash memo-ry, you have high reliability andcan update your system. theeeprom makes it possible tostore system parameters such asthe sms center number, con-trol center number, and p rede- termined time intervals. other components on the board are the four-channelmultiplexer, a large capacitydata memory, and the user interface. the latter consists ofa 2 × 16 lcd, a buzzer, andthree push buttons.  accessories an at45d021’s serial-inter- face flash memory is used as ablack box to store data packages.the 2,162,688 bits of memoryare organized as 1024 pages of264 bytes each. in addition tothe main memory, the microalso contains two data srambuffers of 264 bytes each. thesimple spi serial interface facil-itates the hardware layout, increases system reliability, andreduces the package size andactive pin count. theat90s8515 saves gps data to flash memory via an spi port at a user-defined specific interval. or it readsdata from the flash memory to backupto pc. up to 2160 pieces of informationcan be stored in flash memory. because the at90s8515 has only one uart port, another chip is used toexpand the serial port for three kinds ofdifferent functions. the digitally con-trolled mc14052b analog switch is adual four-channel multiplexer. withtwo i/o pins, the avr controls it toswitch among three channels, all ofwhich are uart serial interfaces.  one max202 chip accomplishes the conversion between ttl/cmos leveland rs-232 level, which is necessaryfor the rs-232 interface between thenavigator and pc. using the rs-232port, the system can backup the data inflash memory to the pc. also, youcan change some system parametersthrough the pc via the rs-232 port. 36 issue 151    february 2003 circuit cellar®www.circuitcellar.com(pdu) mode—for handling shortmessages. the system defaultis pdu mode; however, textmode is easier to understand.so, use the at+cmgf=1command to set the module tothe gsm 07.05 standard smstext mode. the at+cmgs command is used to send a short message.the format of this command is: at+cmgs=<da><cr>message  texts<ctrl-z> here, <da> is a subscriber’s mobile phone number that youwant to send the short mes-sage to. the gsm module canreceive incoming short mes-sages and save them on thesim card automatically. youcan use the at+cmgr com-mand to read an incomingshort message from the simcard storage, and then use theat+cmgd command todelete it when you’re finished.  if you want to read an sms message, then send aat+cmgr=x command to tellthe gsm module which shortmessage you want to read.next, check the serial port toreceive the message from thegsm module. rs232_r is a subrou- tine used to receive data from theuart. listing 1 demonstrates sendingand reading a short message in a bas-com-avr program. in this code seg-ment, chr(34) converts the ascii value 34 to the right quote character(). it also converts chr(13) to <cr> and chr(26) to <ctrl-z> . as you can see, “my sms message” is themessage you want to send.  circuit description the difficult part of designing this project was learning both the nmeagps message and gsm at commandprotocols. the easy part was designingthe hardware circuit (see figure 2).you may download a table of the pinassignments from the circuit cellar ftp site. as you can see from theschematic, there are three jack ports.jp1 (20 pins) is used for the gps mod-ule, jp2 (40 pins) is for the gsm mod-ule, and jp3 is used for communica-tion with the pc.  the at90s8515 (u1) is the core of the circuit. this low-power cmos 8-bitmicrocontroller is based on the avr-enhanced risc architecture. by execut-ing powerful instructions in a singleclock cycle, the at90s8515 achievesthroughputs approaching 1 mips permegahertz, allowing you to optimizepower consumption versus processingspeed. the at90s8515 features 8 kb ofin-system programmable flash memory,512 bytes of eeprom, 512 bytes of sram, and 32 general-purpose i/o lines.sram, and 32 general-purpose i/o lines. flexible timer/counters with comparemodes, internal and external interrupts,a programmable serial uart, an spiserial port, and two software-selectablepower-saving modes are also available. the high speed of the at90s8515 makes it possible to complete multi-to set gsm module work mode the time  is even second or odd secondto set  a 1-s timer even odd check  gsm statusthe time  is what?else 12, 16, 18 sread   gps information  from gps  module save gps  data to  flash memory let gsm module send gps data out  according to given  interval display messages or  alarm according to   the process done above count to   20 s nclear counter to 0ycheck if there is a short message y display short   message for   4 s, and then clearnmode = 1 figure 4— the main function is mode 1. the at90s8515 microcontroller receives the ship location data every 2 s from the gps module, and then saves the data in flash memory every 20 s. at a user-defined time interval, the at90s8515 sends the location data to the control center, and then receives the control information from the control center via the gsm module.the flow charts in figures 3 and 4 describe the at90s8515 program thatcontrols the devices. the software han-dles a number of key functions, such asinitializing the system and starting thegps and gsm modules. the softwarealso selects the working mode.additionally, it checks and sets thesystem parameters in mode 0, backsup the trace data stored in flash mem-ory to the pc in mode 2, and resetsthe system parameters in mode 3. mode 1 is the standard working mode during which many tasks arecompleted. during mode 1, the gpssignals are read every 2 s from a satel-lite; the location information is savedin flash memory every 20 s; and thegsm module sends location data tothe control center according to thegiven interval time. meanwhile, thenavigator receives the control infor-mation from the control center fromthe gsm module. applied technology our system is now being used in shanghai port, china for navigationand monitoring of ships. aside fromtracking ships, the gps-gsm mobilenavigator can also find use in otherapplications, such as navigating taxis.the system works quite well, and weplan to adapt it for future projects. i www.circuitcellar.com circuit cellar®issue 151   february 2003   37with two control pins and four data pins, the avr gives the lcd specificinformation to display. port pins pc2through pc4 individually sense thethree push-button switches. there is amenu button to select the work mode,and an enter button to confirm theselection. the third is an sos buttonused to send an alarm message to thecontrol center. software description we used the powerful bascom-avr to develop the software. an ide isprovided with an internal assembler.you can also generate atmel obj code.additionally, the bascom-avr has abuilt-in stk200/300 programmer andterminal emulator. other notable fea-tures include: structured basic withlabels; fast machine code instead ofinterpreted code; special commandsfor lcds; i 2c; one wire; pc keyboard and matrix keyboard; rc5 reception;and rs-232 communications. thebascom-avr has an integrated ter-minal emulator with download option,an integrated simulator for testing, andan integrated isp programmer.  you can easily write the firmware for this project using the bascom-avr.and with the isp benefit of avr, on-line emulation is almost unnecessary,so you can program and test with ease.ma chao is a professor of electronicengineering at east china normaluniversity in shanghai, china. he isa specialist in digital image compres-sion and processing, embedded con-trol systems, and computer networksystems. you may reach ma at ma-chao@online.sh.cn. lin ming is a graduate student com-pleting a master’s degree in electronicengineering at east china normaluniversity. he works primarily withembedded systems and microcon-troller-based applications. you mayreach him at lmcrr@online.sh.cn.  project files to download the pin assignmentsand source code, go to ftp.circuitcellar.com/pub/circuit_cellar/2003/151/. sources at90s8515 and at45d021atmel corp.(714) 282-8080www.atmel.com sandpiper gps receiver axiom navigation, inc.(714) 444-0200www.axiomnav.com  falcom a2d gsm module falcom wireless communicationsgmbh(800) 268-8628www.falcom.de  bascom-avr mcs electronics+31 75 6148799www.mcselec.comresource nmea specificationnational marine electronicsassociation(919) 638-2626www.nmea.orgreferences [1] european telecommunications standards institute, “etsi gtsgsm 07.05,” v.5.5.0, 1998. [2] ———, “etsi gts gsm 07.07,” v.5.0.0, 1996. listing 1— we created a program to send an sms message to a mobile phone (13916315573). the pro- gram directs the gps-gsm mobile navigator to read and delete an incoming short message. the print command is a bascom-avr instruction that sends output to the serial port. the rs232_r subroutine is used to read input from the serial port. constant definitionconst gsm_center = +8613800210500 //sms center numberconst send_number = 13916315573 //phone number the sms  sends toused to read input from the serial port. constant definitionconst gsm_center = +8613800210500 //sms center numberconst send_number = 13916315573 //phone number the sms  sends to const sms_texts = my sms message //message texts to be sent //initialize the gsm module print at+cmgf=1//set gsm module in text modeprint at+csca= ; chr(34) ; gsm_center ; chr(34) //set sms center number //send a messageprint at+cmgs=; chr(34); send_number; chr(34); chr(13);sms_texts; chr(26) //read and delete an incoming short message print at+cmgr=1 //read first short message  from sim card storage gosub rs232_r //receive messageprint at+cmgd=1        //delete message from sim  card storage38 issue 151    february 2003 circuit cellar®www.circuitcellar.comere in the south- ern arizona desert we almost worship humidity. that’s because we have so little of it, exceptin july and august when it tends to bemuggy. and recently, with the west-ern united states suffering from pro-longed drought and disastrous wild-fires, the subject of atmospheric mois-ture is of more than passing interest. over the years i have acquired vari- ous inexpensive weather instruments, including an anemometer, an indoor/outdoor wireless thermometer,a rain gauge, and two humidity instru- mentsan inaccurate human-hair-type hygrometer and an ungainly sling psy-chrometer. a while back, i tried search- ing the internet for “humidity” and wasrewarded with the datasheet for the rela- tively new hih-3610 series of humiditysensors from honeywell/microswitch. these are solid-state elements described as delivering instrumentation-gradehumidity sensing performance withan accuracy of 2%. at an input voltage of 5 vdc, the output voltage of the sen-sors varies linearly with relative humidi- ty over a range of 0 to 100%. because the sensors looked interesting, i resolved to have a crack at designing a humidi-ty meter around them.project goals  i decided to build the meter in two pieces, an indoor unit incorporatingthe display and a battery-operated out-door unit. data from the outdoor unitwould be transmitted by radio toavoid the complication of a connect-ing cable. reasonable immunity tointerference from part 15 deviceswas essential. i wanted the display tobe switchable from outdoor to indoorhumidity and readable from acrossthe room in darkness (while lying inbed wondering if the humidifier hadrun out of water). and, the outdoorunit would be built with surface-mounted parts so it would be smalland inconspic uous. i pondered how to deal with a sur- face-mounted microcontroller. theone i chose is one-time programma-ble, but, what if i needed to changethe program? there was no way icould have gotten it right the firsttime. moreover, how would i pro-gram the thing to start with? clearly,it would not plug into the zif socketon my programmer.  the answers to these questions, which i’ll explain in this article,turned out to be simple. but, rightaway i discovered that my under-standing of such subjects as wireless,smt, and microcontrollers was woe-fully behind the times. i’ve learned alot from this project, and it has beenfun inventing (or, more accurately,reinventing) ways of getting thedesired results. one of the thingsthat helped me significantly wasreading circuit cellar articles on related subjects. another has beendigi-key’s excellent web site, withits wealth of easily accessible prod-uct information and datasheets. partway through the design stage, i discovered another goal to set. i have afriend in western pennsylvania, dr.daniel nadler. dan is an ophthalmol-ogist who has good woodworking toolsand knows how to use them. earlier,he had sent me a 0.5-mm automaticpencil that he had constructed from arare wood. during a chat on theinternet, i mentioned the humiditymeter i had in mind and the fact thatit needed a nonconducting enclosureto allow for an internal receivinga wireless indoor/ outdoor humidity meter h fascinated by weatherinstrumentation, kenrecently built anindoor/outdoor humidi-ty meter with severalbasic components anda few pic micros. inthis article, hedescribes how to buildthe separate indoorand outdoor units andhow to make themaesthetically pleasing.  ken macleishfeaturearticlewww.circuitcellar.com circuit cellar®issue 151   february 2003   39through a red filter that is cement- ed into the front panel bezel. adot at the lower right corner ofthe led (normally a decimalpoint) is lit when the outdoorhumidity is being displayed.changing from outdoor to indoorhumidity, or vice versa, is doneby momentarily pressing the but-ton on the back of the unit. thesensor for indoor humidity, which is identical to the one inthe outdoor unit, plugs into the bottom of a circular plastic well onthe epoxy-glass back panel. the wellprotects the sensor and helps to pre-vent the air around the sensor fromreceiving heat from the interior ofthe enclosure. it’s made from threethick nylon washers, two inside thepanel and one outside.  the base of the internal structure is a 5.375 ″× 2.375″aluminum plate that serves as a ground plane for thereceiving antenna. near the middleof the ground plane is a bnc panelreceptacle that accepts a smiley rub-ber-duck antenna made for 70-cmhand-held transceivers. the wirelessreceiver is a 1.98 ″× 0.72″daughter- board plugged into strip sockets onthe back of the circuit board. thereceiver is connected to the antennareceptacle by a short length of rg-174 coaxial cable. with this antennaconfiguration and with a similarantenna installed on the outdoorunit, the unobstructed operatingrange is a little over 1000 ′. i ordered the 3.8 ″× 2.5″two-sided circuit board online fromexpresspcb in california.expresspcb delivered the circuitboard in three days, along with twoidentical sisters, for $62. i down-loaded the company’s free boarddesign firmware and found itextremely easy to learn and use.  now it’s time to take a look at the circuit diagram, which is shown infigure 2. a microchip pic12c672microcontroller services the indoorhumidity sensor. in addition, apic16f84a microcontroller identi-fies signals  from the receiver, processes the data, tends theindoor/outdoor sensor switch, andcontrols the two digits of  the led.antenna. dan came back with, “how about wood?” we decided itwould be fun to make the meternot only a weather instrument, butalso an attractive article of furni-ture built with some exotic wood.we ended up working togetherdespite being 2000 miles apart, andthe meter came out in a nice-look-ing enclosure that dan crafted outof rosewood and curly maple.  temperature, humidity, and dew point relative humidity is important because it can be measured with simpleinstruments. dew point is more impor-tant in meteorology because it’s closelyrelated to the proportion of water vaporin a given air sample. relative humidi-ty changes when an air sample is heat-ed or cooled; dew point does not. if youknow the temperature and relativehumidity, a simple chart can give youthe dew point. such a chart is depictedin figure 1. as an example, on the chartis a dot at a temperature of 76°f and arelative humidity of 52%. interpolatingbetween the two adjacent curves gives adew point temperature of 57°f.i thought about including tempera- ture sensors in the meter and perhapsprogramming the controller to showdew point and temperature as well asrelative humidity. but, the wirelessthermometer offered by radio shack(part no. 63-1026) is an excellentinstrument, and i saw no need toduplicate its function. so, for simplic- ity, i decided to omit temperaturesensing from the meter.  the indoor unit photos 1 and 2 show the front and back of the indoor unit and photo 3shows its internal construction. the0.56″seven-segment led is visible 105 100 95908580757065605550454035 3035 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110100 9590858075706560555045403530252015 510 0 temperature (˚f)relative humidity (%)•dew point (˚f) figure 1with this chart, you can determine the dew point temperature when you know the air temperature and relative humidity. photo 1the indoor unit displays relative humidity from 0 to 99%. the dot means that the unit is showing outdoor humidity.40 issue 151    february 2003 circuit cellar®www.circuitcellar.compic16f84a firmware i’ll describe some critical parts of the pic16f84a firmware here; theassembly listing is available to down-load from the circuit cellar ftp site (local.asm). the listing is heavily com-mented and may be consulted for pro-gramming details. i’ll cover thepic12c672 firmware later in connec-tion with the outdoor unit. now, i would like to concentrate on measuring outdoor humidity. anamplitude-modulated wireless trans-mitter in the outdoor unit sends abrief digital packet on 433 mhz every10 s. a 1 bit is represented by the rfoutput lasting 1 ms ±1.5%, and a 0 bit is represented by the absence of out- put for an equal time period. eachpacket consists of a preamble of24 alternating 1 and 0 bits (12 one,zero pairs: 10), a 4-bit sync nibble (1100), a 0.5-ms start pulse, and 1 databyte. the data byte is an 8-bit binarynumber equal to the percent of rela-tive humidity at the outdoor unit. in the receiver, a packet that’s been down-converted, amplified, and enve-lope-detected is fed to an internaldata slicer that performs a 1-bit ana-log-to-digital conversion. the sliceroutputs 4 v to the receiver’s data ter- minal while the detector output isgreater than a threshold value, and outputs 0 v when the detector out-put is less than the threshold. with atime constant of many milliseconds,the threshold voltage adjusts itself tothe average value of the detector out-put. the analog-to digital conversionis faithful if the threshold voltage set-tles at a value that is halfway betweenthe minimum and maximum detectoroutput; this will be true if the digitalpacket contains equal numbers ofintermixed 1 and 0 bits. between packets, the wireless trans- mitter is silent, the receiver agc maygo to full gain, and the data slicerthreshold voltage moves slowly to theaverage value of receiver noise plusany extraneous signals present on thesame frequency. the data slicer nowoutputs a random series of 4-v noisepulses possibly mixed with extraneoussignals. the first duty of the firmware is to find the next humidi-ty packet amid this mess. when it comes along, the preamble lasts long enough to put the thresholdvoltage of the data slicer where itbelongs. conventional wisdom statesthat for satisfactory operation, equaldensities of zeros and ones shouldprevail throughout the digital packet.during the preamble and sync nib-ble, my packet meets this criterion,but the data byte could contain allzeros, all ones, or anything in-between. usually, a balance of onesand zeros is maintained until the endof the attached data. this is com-monly done by encoding the data asmanchester code, wherein each bit is changed to a high plus a low (if thebit is a one) or a low plus a high (if azero) before transmission.  i didn’t encode the data byte. because of the threshold-voltage gen-erator’s long time constant, thethreshold voltage doesn’t have timeto change much while the start pulseand the single data byte are comingthrough. therefore, for the humidity figure 2in the indoor unit, the pic16f84a microcontroller gets data from either the wireless receiver or the pic12c672, as selected by the push button. the two digits of the seven-segment led, lit alternately by the ra0 and ra1 outputs of the pic16f84a, appear to be on simultaneously. photo 2the back panel of the indoor unit has a push button that toggles between outdoor and indoor humidity. the indoor humidity sensor plugs into a circu- lar well in the middle of the panel.www.circuitcellar.com circuit cellar®issue 151   february 2003   41meter, manchester or other encoding is unnecessary and would only add tothe complexity of the firmware atboth ends of the rf link. this stillmight be true even if the data is acouple of bytes long, but it woulddepend on the dynamics of thethreshold volt age. in the foregoing description, i’ve assumed that the signals from the out-door unit are strong enough to sup-press any extraneous signals. packetsthat are corrupted by interference willbe skipped. generally this is not aproblem, because humidity changesoccur slowly. the meter simply dis- plays the last humidity valueobtained until the interference stopsand new readings come in. all of this still prompts an impor- tant question: how does the systemlock in on the desired signals?  extracting data the firmware samples the data slicer output every 40 µs. each time apositive transition (i.e., a change from0 to 4 v) occurs, the program meas-ures the time to the next positivetransition. if this time is near 2 ms, itmeans the 2 bits of a 10 pair in a pre-amble might have been detected. ifthe next positive transition occurs2 ms later, it’s likely that these weretwo of the 10 pairs in a preamble. ifseveral more 2-ms intervals follow,the probability is high that this iseither part of a preamble or a similarpulse train from an extraneous source.  after detecting the end of the pulse train, the program tests whether ornot the next positive transition arrivesin 4 ms, as it would after the 4 bits ofa sync nibble. (the 1100 sync nibblealways ends with a positive transi-tion, thanks to the adjacent startpulse.) if a 4-ms interval follows thepulse train, then the program assumesthat it was a sync nibble and proceedsto clock in the 8 bits of relativehumidity. otherwise, the programcontinues to look for a preamble. indoor humidity values go from the pic12c672 to the pic16f84a over a circuit board trace. the absence ofreceiver noise and extraneous signalsin this case could simplify the process,but it’s easier to have the pic16f84aexecute the same procedure for bothindoor and outdoor humidity. averaging successive humidity readings some- times vary by 1% and occasionally by2%. i think the variations are causedby slight inhomogeneities in the airwafting past the sensor (the sensorresponds rapidly). to smooth outthese variations, five consecutive photo 3the insides of the indoor humidity sensor unit slide into the enclosure from the rear. four screws go up through the rubber feet and floor of the enclosure, and then into threaded spacers that sup- port the aluminum ground plane.advice, i made the cable short (4 ″) and isolated the signal lines by using 10-conductor ribbon cable with everyother conductor grounded.  reprogramming an otp in the pic manual for mid-range devices, microchip discusses how toreprogram a one-time programmablemicrocontroller. [1] check out section28.7 in the manual. the technique usesthe fact that in the eprom, a 1 bit canbe electrically reset to zero, althoughnot vice versa. the maximum numberof times you can reprogram depends onthe program size in relation to the totalprogram memory; in my example, itcan be done about 16 times by using anew section of the program memoryevery time you reprogram.  for additional details about repro- gram ming your own microcon- troller, look at the assembly code for the pic12c672. you’ll find the codefile (remote.asm) along with theother assembly code file on thecircuit cellar ftp site. reducing interference interference between this device and others that use the same frequen-cy is a twofold problem. one issue isinterference from other signals, andthe other is interference to other sig-nals. with an increasing number ofpart 15 devices running at 433 mhz,preventing interference can be diffi-cult. amateur stations are licensedusers of this frequency. if a legal part15 device or an amateur station inter-feres with the humidity meter, myonly recourse would be to improve my design or move away. onthe other hand, if thehumidity meter interfereswith the functioning of apart 15 device, i could berequired to change thedesign, cease using the out-door unit, move away, orearn an amateur radiolicense. the easiest solutionis to restrict the power radi-ated from the outdoor unitand earn an amateur license. obtaining an amateur tech-nician license isn’t difficultand is a good idea anyway. 42 issue 151    february 2003 circuit cellar®www.circuitcellar.comreadings are summed by the firmware,and then the firmware computes anddisplays their average value. when the sensors are switched, an initial delayis avoided by having the programshow the next reading as soon as itarrives. thereafter, the program oper-ates in averaging mode, updating thedisplay every 50 s. the outdoor unit photo 4 shows the outdoor unit sus- pended from the ceiling of my porch.the 9-v battery is attached to the unitwith velcro. figure 3 and photo 5illustrate the circuit diagram and inte-rior details, respectively. the backsideof the circuit board is a nearly solidground plane. i ordered the board fromexpresspcb, and again liked theresults. the board is so small that theminimum order, when cut up, yielded12 boards—all of them perfect. several circuit features help to hold down power consumption: thetransmitter consumes no powerexcept while sending a one;the pic12c672 microcon-troller sleeps between read-ings; and 5-v power is sup-plied to the humidity sen-sor only while a reading isunder way. t hat leaves the voltage regulator as theprincipal power consumer,because it has to run contin-uously to energize thewatchdog timer in thepic12c672. i have yet to replace the original batteryafter seven months of con-tinuous operation.the pomona 2390 die-cast alu- minum box came with a bnc panelreceptacle at each end. i replaced oneof the receptacles with the powerconnector, which happened to fit thesame hole. that left four emptyscrew holes around the connector,which now provide air circulation tothe humidity sensor and drain con-densation from the box. additionalaccess to ambient air is provided by ahole in the cover plate located overthe humidity sensor. pic12c672 firmware the pic12c672 micros in thepic12c672 firmware the pic12c672 micros in the indoor and outdoor units run identicalfirmware. every 10 s, each micro per-forms an a/d conversion on the dcoutput of a humidity sensor. the pro-grams then calculate the relativehumidity from the linear equationthat relates humidity to the sensoroutput. finally, they formulate a digi-tal packet and feed it serially to thewireless transmitter’s data terminal(in the outdoor unit) or to the ra2 ter-minal of the pic16f84a (in the indoorunit). the pic12c672 then goes tosleep until the watchdog timer wakesit for the next reading.  i programmed the pic12c672 of the indoor unit by plugging it into mymicrochip picstart plus program-mer, but that wasn’t possible with theoutdoor unit’s surface-mountedpic12c672. for the outdoor unit, imade up a little cable with appropriateconnectors at the ends and used it forin-circuit serial programming via theprogramming header and the program-mer’s zif socket. heeding microchip’s photo 5here’s the outdoor unit without its cover plate. the principal components are (left to right) the bnc antenna receptacle, the wireless transmitter, the white programming header, the 8-pin pic12c672 microcontroller, the humidity sensor, the voltage regulator, and the power connector. the humidity sensor is the small black object plugged in at the lower right of the pic12c672.  photo 4— the outdoor unit hangs by its antenna from a vinyl-covered cup hook on my porch.short wire antenna on the outdoor unit were easy tasks. the abbreviatedtransmitting antenna is an inefficientradiator, and impedance mismatchlowers the power delivered to it bythe transmitter. as you can see intable 1, i measured the relationshipbetween the transmitting antenna andthe maximum unobstructed range.  because the range i needed was less than 50 ′through one or two intervening walls, i settled for a 5/8 ″ wire antenna, which incidentallypermitted the nice mountingmethod shown in photo 4. before someone tries patiently to explain to me the extensive fccpart 15 regulations, i’ll conclude bysaying that so far i haven’t receivedany complaints from either hamoperators or part 15 devices! i www.circuitcellar.com circuit cellar®issue 151   february 2003   43initially, i used the simplest algo- rithms i could think of for receivingdata from the outdoor unit, but soon iran into trouble. some infernal devicein the neighborhood was messing upthe readings. after much sleuthing, ifound that the culprit was my ownradio shack part 15 wireless ther-mometer! it puts out a whale of a sig-nal on the 433-mhz band and my 1-mw-plus transmitter, even with a rub-ber-duck antenna, couldn’t compete.the problem vanished after i installedthe firmware described earlier. nowthe two instruments coexist amicably. i lowered the probability of interfer- ence to other services by substantiallyreducing the power radiated by theoutdoor unit. my philosophy was touse the best receiving antenna thatwould fit inside the indoor unit’senclosure, and then reduce the radiat-ed power to the minimum required forreliable reception. installing a rubber-duck antenna in the indoor unit and aproject files to download the code and a partslist, go to ftp.circuitcellar.com/pub/circuit_cellar/2003/151/. sources two-sided boardexpresspcbwww.expresspcb.com man6940 led fairchild semiconductor(207) 775-8100www.fairchildsemi.com hih-3610 sensors honeywell international, inc. www.honeywell.com/sensing lt1121cst-5 voltage regulator  linear technology corp.(408) 432-1900www.linear.com pic12c672/16f84a micros microchip technology, inc.(480) 786-7200www.microchip.com 2390 box pomona electronics(909) 469-2900www.pomonaelectronics.com rcr-433-hp receiver, rct-433-as transmitterradiotronix, inc.(405) 794-7730www.radiotronix.com rdmd-440 rubber-duck antenna the smiley antenna co.(619) 579-8916www.htantennas.com resources digi-key corp.(800) 344-4539(218) 681-6674www.digikey.com fcc part 15 regulations www.fcc.gov/oet/info/rules/part15 ken macleish is a retired engineer liv-ing in tucson, arizona. he graduatedfrom caltech in 1939 and has a doc-torate in nuclear physics from theuniversity of california. duringworld war ii, he worked in oakridge, tennessee at tennesseeeastman company. before retiring in1970, he was with eastman kodakand perkin-elmer corporation in vari-ous engineering and managementpositions. ken may be reached atkmacleish@comcast.net.reference [1] microchip technology inc., “picmicro mid-range mcufamily reference manual,”ds33023a, december 1997. table 1—note the maximum operating range for vari- ous transmitting antennas.antenna range none 3 ′ 5/8″wire 100 ′ 1.25″wire 127 ′ 2″wire 160 ′ rubber duck 1030 ′ figure 3in the outdoor unit, as in the indoor unit, the dc output of the humidity sensor feeds the pic12c672 ’s a/d converter via the chip ’s an2 port while the gp4 port supplies 5-v power to the sensor. digital data packets go from the gp5 port to the modulating input of the wireless transmitter.44 issue 151    february 2003 circuit cellar®www.circuitcellar.com’ve been inter- ested in robotics since i was a little boy. back when i was in junior high school, i built a mobilerobot platform out of the drive portionof a child’s motorized car and acommodore vic-20. over the years,advances in technology have madeexperimenting with robotics moreenjoyable. the game boy camera isan ingenious addition to the gameboy color game unit that came out acouple of years ago. it’s a black-and-white digital camera with a resolutionof 123 × 128 pixels, operating at a rateof one to 30 frames per second.  the camera’s original price was between $40 and $50, making it some-what cost-prohibitive for hobbyists.however, because the product wasrecently discontinued, i found someon ebay selling for between $10 and$20. the reduced price makes thecamera an attractive solution if you’reinterested in robot navigation. it’seven less costly than a singlepolaroid sonar module ($30 to $50)and in the same ballpark as reflectiveinfrared sensors ($5 to $15). the sensor inside the camera is a highly integrated cmos array withbuilt-in edge enhancement and extrac-tion. built-in image processing enablesa microcontroller to perform objectdetection and tracking, provided cer-tain assumptions about the back-ground of the image are valid. atmel’s at90s8515 microcontroller has an external memory interface busthat allows you to easily connect ansram ic. the on-chip hardwareuart makes it possible to outputprocessed data without consumingprecious processing resources, and thetimers enable it to control hobbyservo motors without much work. inaddition, the avr series of microcon-trollers has a high-speed risc archi-tecture (e.g., most instructions takeone or two clock cycles) that makestiming calculations simple. in short, the flexibility of the avr 8-bitmicrocontrollers makes attachingspecial-purpose peripherals like thegame boy camera a breeze. figure 1 is a block diagram of a camera interface and object-trackingsystem. as you can see, the camera is controlled via some of the microcon-troller’s general-purpose i/o pins.the analog output of the camera isattached to the external a/d con-verter. the servos are connected totwo more pins of the microcon-troller, and the rs-232 converterconditions the uart’s signals forconnection to the outside world. figure 2 details the interface circuit. a few notes might be helpful here.the a/d converter needs to be fastenough to read out a pixel valueevery 2 µs if the maximum framerate is desired. this means the sam-ple frequency of the adc must be atleast 500 khz. a speed requirementlike this rules out the use of thebuilt-in adc on most microcon-trollers (e.g., the at90s8535).   for my circuit, i settled on the analog devices ad7822, which does-n’t have the added complication ofpipelining that many of the neweradcs seem to have. also, you don’tneed the rs-232 converter ic if thecircuit will be interfaced directly toanother microcontroller’s uart. iused a 7.3728-mhz crystal to achievecompatibility with standard data rates.a speed of 115,200 bps is the maxi-mum speed that a standard pc serialeasy image processing  i since childhood, daniel has incorporat-ed high-tech toys in hisrobotics projects.thus, it’s no surprisethat he used a gameboy camera in one ofhis recent designs.now, he’ll show youhow to use the camerato enhance the naviga-tion system on yourown mobile robot.daniel herringtonroboticscorner camera interfacing for roboticswww.circuitcellar.com circuit cellar®issue 151   february 2003   45in the first part of the pro- gramming process, you canset the camera’s registers fora normal (positive) or invert-ed (negative) image, an edge-enhanced image, or an edge-extracted image. register set-tings also control the cam-era’s exposure time, the out-put voltage offset level, andthe gain of the video signal(i.e., how much it varies fromthe output voltage offset).   the maximum frequency for the camera’s xck input is 500 khz (t = 2 µs). with amicrocontroller crystal fre-quency of 7.3728 mhz (t =135.6336 ns), the time for each half-period of xck is:  or approximately eight microcon- troller clock cycles. i tuned the timingof the assembly code by adding nopinstructions where appropriate. it’s interesting to see how different register settings affect the image out-put from the camera. table 1 showstwo settings: normal mode and edgemode. these settings were derived byexperimentation and may need to beadjusted for any given environment. i set up a test area with various medium- and high-contrast coloredobjects on a light-colored floor (seephoto 4). the top-center image frameswithin photo 5 show what the gameboy camera images look like withspecific register settings: photo 5a is anormal image; photo 5b is a negativeimage; and photo 5c is an edge-extracted image. i used this type ofimage for object tracking. note thatthe light-colored objects (red andport supports, so i pro- grammed the microcontrollerto work at that speed. the completed prototype circuit board is shown inphoto 1. it’s a simple wire- wrapped board with allthrough-hole componentsexcept the adc. the poten-tiometer is used to adjust thereference voltage for the micro-controller’s on-chip analogcomparator. the comparator isused in place of the adc forthe hobby robot depicted inphoto 2. i found that the opti- mum setting for the referencevoltage for my test environ-ment was about 4.66 v. photography 101 the game boy camera uses mitsubishi’s m64282fp cmos imagesensor. this sensor is special becausemitsubishi designed some image pro-cessing capabilities right into thecmos array itself.  software isn’t required to perform edge detection, enhancement, orextraction from the image. to get anedge-extracted image, simply put thesensor in the appropriate mode andthen read out the resulting analogpixel voltages for the entire image.after this image is read out, it can befurther manipulated by the microcon-troller. photo 3 shows the m64282fpchip inside the camera. i didn’t use the camera’s cartridge base in these experiments. after thecartridge is opened, the ball can bedisconnected from the cartridge. idisconnected the purple cable fromthe cartridge and soldered a standard0.1″double-wide header on the end. this allowed a 0.050 ″ribbon cable to be used for a long-distance connec-tion, although i don’t recommendexceeding 1 ′or so.  by the way, i cut a hole in the back of the ball so that the cable could exit in aplace where it doesn’t interfere withmounting the camera on a pan-tilt base.you may download the pinout of theoriginal connector that’s coming out ofthe ball from the circuit cellar ftp site. the numbers refer to the correspon ding pin numbers on the m64282fp chip.to simplify the interfacing of the assembly code and speed things up, iturned the camera sensor board in thecamera ball upside-down. thisensures that the first pixels to be readfrom the camera are those correspon-ding to the bottom-right corner of theimage instead of top-left. furthermore,this makes the calculation of the near-est object faster, because the image isread out serially from the sensor. the procedure for programming and using the m64282fp is straight-forward. first, load the registers inthe m64282fp using a synchronousserial protocol that is similar toother two-wire synchronous serialinterfaces. the microcontroller gen-erates the xck, sin (data), andload signals for loading all of theregisters in the camera ic.next, give the start command. after the exposure is finished, thecamera ic will return a read signal.when the read signal becomesactive, read 15,744 pixels (123 × 128)worth of analog data on the voutpin synchronouslywith the xck sig-nal that the micro-controller gener-ates. after all of theimage data has beenoutput, the readsignal becomesinactive, and thecamera automati-cally starts anotherexposure.rs-232  converter game boy  camerau a r tmemory  interface timers general-purpose  i/o a/d  converterlatch32k x 8  sram pan/left tilt/right servo servoat90s8515 figure 1— you can use the two servos for either panning/tilting a camera head or driving the left and right wheels of an autonomous robot. for the lat- ter, the servos must be modified to allow for continuous rotation. this servo hack is common for hobby robots. register address normal mode edge mode 0 000 0x80 0x3f1 001 0xd6 0xd62 010 0x06 0x183 011 0x00 0x004 100 0x01 0x015 101 0x00 0x006 110 0x01 0x017 111 0x07 0xf3 table 1—when you’re switching from normal to edge mode, it ’s important to remember the m64282fp registers 0, 2, and 7.46 issue 151    february 2003 circuit cellar®www.circuitcellar.comorange in this case) don’t show up as well in the edge-extracted image. youcan increase or decrease the exposuresetting to allow these low-contrastobjects to be seen in edge mode. obstructed views ian horswill’s 1993 dissertation, “specialization of perceptualprocesses,” details some of his researchconcerning image processing for robot-ics. horswill outlines various assump-tions that may be made by a roboticimage-processing system for detectingobstacles in a given environment. after the edges have been extracted from an image, the height of the firstedge from the bottom of the image canbe determined. let’s assume the cam- era is mounted somewhere on thefront of the robot, several inches or feet above the floor. if the camera isaimed forward and down, and if thefloor doesn’t have visible edges (i.e.,the carpet color is constant, andthere are no high-contrast seams orchanges of color), then the onlyedges should be the obstacles on thefloor or a floor-to-wall transition infront of the robot.   if the robot moves near a wall, and if there is enough of a contrast betweenthe wall and floor, an edge will bedetected at that location in the image.using this technique, the robot can tellhow far away the edge of the obstacle isby its height in the image.  if the image is divided into thirds (i.e., left third, center third, and rightthird), then the lowest edge in eachthird of the image gives the robot thedistance it can move in that direc-tion. then, the robot can turn andmove toward the farthest direction toavoid the closer obstacles. this“greatest third” approach is wellsuited for corridor following, becausethe greatest third of the image is most likely the direction of the corridor. [1] the camera takes care of extracting the edges from the image, but themicrocontroller must perform anyadditional processing. for instance, ifyou want to know an object’s distance(or depth) from the robot, then you’llneed an algorithm to post-process theimage and reduce the informationdown to a depth table. the index tothis table could represent a givenx location, or column. the entry at figure 2— with this processor and interface circuitry and connector design, you can enhance your own robotics applications with the game boy camera.www.circuitcellar.com circuit cellar®issue 151   february 2003   47each index within the table could be written with therow of the lowest edge pixelin a given column. this algo-rithm is implemented in the microcontroller as shownin  listing 1. now, i’ll explain the oper- ation of the depth-findingcode. starting at the bot-tom-right corner of theimage, count the number ofpixels vertically until one isreached that surpasses a pre-defined threshold value. putthe row number (i.e., depth)of that pixel in a table, stepto the next column to theleft, and repeat the process.  when the depths of all of the columns of the image have beenrecorded, send that information outof the uart. a graphical representa-tion of the depth map for the testobjects in photo 4 is shown in the depth/nearest/track frame inphoto 5c. the groups of shadedcolumns are areas that include objects. point and shoot  the opposite of obstacle avoidance is object tracking. the camera can bepanned and tilted in response to anobject found in the image. assumingthe lowest edge in the image abovesome brightness threshold is an objectto be tracked, the microcontroller cancommand servo motors to pan and tiltthe camera to move the object to thecenter of the image. this requiressome intelligent control of the motors to prevent a slow response,overshooting, and ringing.   to perform object tracking, the microcontroller searches the imagein ram from the bottom up. whenit finds the first edge brighter than a given threshold value, it marks thex  and y locations and measures the horizontal and vertical distance ofthis edge from the center of theimage. then, the microcontrollerissues a corrective movement com-mand to the servos, which respondby redirecting the camera until theobject is centered in the view.listing 2 shows how it’s done.   photos 6a and b show the pan-tilt servo mechanism. the pan servo isdirectly mounted to the tilt servo’scontrol surface. note that the sub-micro-sized servos in myphotos allow for a com-pact installation. the performance of the pan-tilt camera head isadequate for trackingsmall objects, providedthat the object isn’t mov-ing faster than about 1 ′per second at a distance of 4 ′ from the camera. thismeans you can roll a ping-pong ball at a moderatespeed across the floorroughly 4 ′in front of the camera, and the camerawill lock on and track the ball until the servos reachtheir limit. the system won’t notice a  bounc- ing ball. using a large ball (e.g., abasketball) causes different edges(left and right) of the ball to bedetected, and the camera oscillatesbetween the two nearest edges  if they alternate in intensity or y position.  one helpful piece of equipment for tuning the system is a laser pointer.with a laser pointer, a bright point canbe moved from one location to anotheralmost instantaneously. using one, youcan observe the reaction of the servos.   the gain of the system is set too high if the servos overshoot and“ring” (i.e., oscillate until they cometo a rest) at the new location. thegain should be set by increasing ordecreasing the divisor of the erroramount so that the correction amountcauses the servos to overshoot slightly photo 1—the prototype circuit board is small enough to fit inside a mobile hobby robot. photo 2— i’ve provided you with four views of the mobile robot. the servo that controls the tilt angle of the camera is for future expansi on.a) b) c) d)48 issue 151    february 2003 circuit cellar®www.circuitcellar.comwithout ringing. look for the con- stant, trackdiv , in the assembly code for more information.  incidentally, the entire image-cap- ture/process/output sequence takesroughly 11 ms, yielding a frame rateof about nine frames per second. thepan-tilt camera head is only able totrack objects while they are within theservo’s travel limits. if a subject is lostbecause it moved too far to the left orright, the camera will wait for up to 30frames for the object to reappear beforeit returns to the center position to lookfor another object. you can overcomethis limitation by giving the camera theability to pan all the way around. to dothis, mount it on a mobile robot. follow that subject! you can apply the theory used for panning and tilting a camera to con-trolling a mobile robot. the cameraitself is stationary with respect tothe robot base. instead of controllingthe camera directly, the microcon-troller commands the robot base tomove in a certain direction at a spec-ified speed. this arrangement allowsthe mobile robot to find high-con-trast objects and approach them.  the robot is able to search for objects by spiraling out in an ever-widening arcuntil an object is within view. when anobject is detected, the robot faces theobject and speeds toward it. the robotslows down gradually until it stopswith the object located in the center ofthe camera image. as long as the object doesn’t move too fast, the robot willcontinue to rotate, move forward, ormove backward to keep the object inthe center of the image. photo 2 showsthe prototype of the mobile robot. instead of using the external adc, the microcontroller uses the on-chipanalog comparator to detect brightpixels. in addition, the ram isn’tused, because the only informationthe robot requires is the nearest photo 3— there’s only one chip and two capacitors on the circuit board in the camera ball. take a look at the clear-packaged m64282fp ic. photo 4— the perfect testing area may be closer than you think. i placed the test objects on my kitchen floor, which has a practically constant texture and surface.www.circuitcellar.com circuit cellar® issue 151   february 2003   49 photo 5a— the normal image doesn ’t have valid depth or nearest-object information. b—you can familiarize your- self with a negative image. notice that i had to increase the exposure (register 2) in order to get a decent image. c—the top frame holds the edge-extracted image. the black columns in the bottom frame make up the depth map, and the nearest object is marked with a red dot.a) b) c) terms:no minimum order .  shipping and handling for the 48 continental u.s.a. $6.00 per order.  all others including ak,hi, pr or canada must pay full shipping.  all orders deliveredin californiamust include local state sales tax.  quantities  limited.  nocod.  prices subject  to change without notice. mail orders to: all electronics corporation p.o. box 567 van nuys, ca 91408 fax (818)781-2653 e-mail   allcorp@allcorp.comcall, w rite fax or e-mail for our free 96 page catalog outside the u.s.a. send $3.00 postage. charge orders to visa, mastercard,  american express or discover1-800-826-5432order toll freenew lower pricing! jmc# 1225-12hba 120 mm (4.72") square x 25 mm (1") wide cooling fan.dual ball bearing fan pro-vides reliable output of 88 cfm @ 2600 rpm.  12 vdc @ 0.6 amps.  45 dba max @ 1m. designed for 50,000 hours @ 25 deg. c. thermoplastichousing and 7 blade impeller.  three 7" pigtailleads with 3-pin connector (0.1" cntrs).   thirdlead is for sensing rotation.  prepped withmetal finger guard.  ul, csa,cul, ce.  large quantity available. cat# cf-153 $400 each90 for $3.00 each 450 for $2.25 each990 for $1.50 each 1980 for $1.30 each incredible price!  12 vdc 120mm cooling fan w/ screensuper bright red 6,000 mcd  t-1 3/4  cat# led-94 75¢ each 100 for $50.00 - 1,000 for $350.00 blue- water-clear 1,500 mcd  t-1 3/4  cat# led-74 $1.75 each 100 for $115.00  1,000 for $950.00 white- water-clear 3,000 mcd  t-1 3/4  cat# led-75 $2.00 each 100 for $165.00  1,000 for $1300.00 transparent hinged plastic  box with 10 compartments.  great for parts storage or display of small items.   outside dimensions 7" x 3.4" x 1.25".    friction-lock lid with dual clasps.each box individually wrapped in a cardboard sleeve.    cat # sb-1010 compartment plastic storage box shop our online store www.allelectronics.com$100 eachcase of 36 for $30.60 (85¢ each)50 issue 151    february 2003 circuit cellar®www.circuitcellar.comobject location. to determine the location of the nearest object, thepixels from the camera are read andprocessed on the fly.  because the information isn’t sent from the uart, it’s pointless to havethe rs-232 converter on the board.therefore, you can construct areduced circuit for the mobile robot.the only components that you needfor the mobile robot’s microcon-troller board are the microcontrolleritself, the crystal, a potentiometer(which is used for adjusting the ana-log comparator reference voltage),and a few capacitors.regarding the performance of the mobile robot, the camera does anexcellent job sensing high-contrastobjects within its view; however, itis inadequate for detecting the major-ity of medium- and low-contrastobstacles. in the real world, youshould always use multiple layers of photo 6a— four aa nicd or nimh batteries power the circuit board used for the pan-tilt head. b—these servos have a quick transit time. it takes only 0.09 s to rotate the con- trol surface through 60 °! this fast response time keeps the servos from being the limiting factor in the system ’s reaction time.a) b)www.circuitcellar.com circuit cellar®issue 151   february 2003   51sensors. it is a good idea to try sup- plementing the camera with abumper panel or whiskers. developing the software for this project con- sists of two parts. the first sectionconsists of the assembly code in theavr microcontroller that talks tothe camera, ram, and serial inter-face. the second part includes the cprogram for a linux-based pc thatreads and writes camera registers. inaddition, this portion capturesimages and obtains depth informa-tion, nearest object information, orobject-tracking locations.  i assembled the microcontroller code with the tavrasm avr assem-bler and programmed the microcon-troller with sp12. i wrote the c pro-gram for the host pc using thesimple directmedia layer (sdl)library, which is a public cross-plat-form graphics and multimedia-pro-gramming library.  sdl includes routines for drawing pixels on the x-windows display. auser-contributed extension, bfont,supplies the routines for writing textto the window. refer to photo 5 forscreen shots of the user interface.although i completed all of the devel-opment for this project in linux, itshould be fairly easy to port to awindows environment. there are two versions of the avr assembly code. the pan-tilt programcontrols the pan-tilt camera head, andthe chase program controls themobile robot. the pan-tilt code hasthe added overhead of communicatingwith the pc through the uart. inaddition, it requires the use of thepan-tilt c program on the pc. thisadds significant delays to the opera-tion of the pan-tilt camera.   if you want to get the maximum performance out of the pan-tilt cam-era, you can hard-code the registersettings and remove the calls to theuart communication routines. thechase code is already optimized forthe fastest possible frame rate.either of the avr programs can bemodified to allow for higher-levelbehavior by adding calls to new rou-tines in the main loops.enlargements one way to enhance the output of the tracking system would be tomount a low-power laser pointer onthe pan-tilt head. then, as long as thefield of view is kept away fromhumans and highly reflective surfaces(in addition to other appropriate safe-ty precautions), the robot could alter-nate between strobing the laser point-er and tracking an object. this wouldlet you see a pulsating red dot, signal-ing where the robot is actually focus-ing its attention. you could also use the laser and a cylindrical lens to generate a flat,fanned-out beam (visible as a hori-zontal line on any objects in its path). this line would be visibleonly  at points in the field of view where an object is obstructing thebeam (t. ward, “scope out the laserrange finder,” circuit cellar 46). therefore, the camera would have amuch greater ability to detect low-contrast objects against the floorbackground. additionally, thisapproach would also help in findinglow-contrast walls. if a high-speed parallel connection to a pc were used instead of the serialone, then the pc could attempt to per-form pattern recognition in real time,comparing the edge-extracted image toan edge database of known objects.  a similar improvement would be to use two cameras in tandem with-out pan servos. a microcontrollercould send both edge-extractedimages via a high-speed parallel con-nection to a pc, allowing the pc tocompare the two images and attemptto find matching patterns of edges.assuming that the pan angles of thetwo cameras were fixed, the match-ing pattern locations would thenallow the pc to determine the dis-tance to certain objects based on thedistance between the two camerasand the difference in pan angles. [2] i daniel herrington received hisb.s.e.e. and m.s.e.e. from theuniversity of texas at arlington. hehas been a vlsi design engineer forthe past eight years. currently, he’sworking in the asic products divi-52 issue 151    february 2003 circuit cellar®www.circuitcellar.comlisting 1— the depth-finding code simply checks each column for the first bright pixel, starting from the bottom of the image. this code relies on the camera sensor being mounted upside-down in the ball (an easy modification). ldi col_cnt, 0 //start at right-hand column depth_outer_loop: ldi row_cnt, 0 //start at bottom row depth_inner_loop: ldi temp1, 0   //the next few lines are a shortcut for ptr = row_cnt × 128 mov ptrlo, row_cnt    lsl ptrlolsl ptrlolsl ptrlolsl ptrlolsl ptrlolsl ptrlolsl ptrlomov ptrhi, row_cntlsr ptrhiadd ptrlo, col_cnt  //ptr = ptr + col_cntadc ptrhi, temp1ldi zl, low(rambase)ldi zh, high(rambase) //z = pointer to image in ramadd zl, ptrlo //z = z + ptradc zh, ptrhildi yl, low(depthbase)ldi yh, high(depthbase) //pointer to depth tableadd yl, col_cntadc yh, temp1ld pixel, zcp pixel, thresh //if the pixel is above the  threshold,store the row in the depth table brsh edge_in_this_pixel depth_no_edge_here: inc row_cntcpi row_cnt, depthrows //if not to the top of the  rows, go to the next row brne depth_inner_loop    edge_in_this_pixel: st y, row_cnt   //store the new y-location of  bright spot inc col_cntcpi col_cnt, depthcols  //if not to left-hand side of image,go to the next column brne depth_outer_loop   rjmp output_depth output_depth: ldi yh, high(depthbase)ldi yl, low(depthbase)ldi col_cnt, 0outc depthstart //output flag to signal start of depth table output_depth_next: ld rxbyte, y+outcreg rxbyte     //transfer depth table through  uart addi col_cnt, 1cpi col_cnt, depthcolsbrne output_depth_next end_write_depth: outc depthstop //output flag to signal end of  depth tablewww.circuitcellar.com circuit cellar®issue 151   february 2003   53resources mitsubishi electric research laboratories, “m64282fp artificialretina technical information,”www.lh.co.nz/hardware/ar/techinfo.htm. mitsubishi cmos imaging sensors, www.mitsubishichips.com/products/assps/a_retina/index.htm. sources ad7822 a/d converteranalog devices, inc.(800) 262-5643www.analog.com at90s8515 microcontroller atmel corp.(408) 441-0311www.atmel.com bfont (billi font library) diego billiwww.cs.unibo.it/~dbilli/bfont/bfont.html m64282fp cmos image sensor mitsubishi electric and electronicsusa, inc.(408) 730-5900www.mitsubishichips.com game boy camera nintendo of america, inc.(425) 882-2040www.nintendo.com sdl cross-platform library sam lantingawww.libsdl.org geda design suite www.geda.seul.org tavrasm avr assembler www.tavrasm.org sp12 avr programmer www.xs4all.nl/~sbolt/e-spider_prog.htmllisting 2— based on the direction and amount of position error (i.e., the distance of the object from the center of the image), this code pans the camera left or right. track_init_vars:ldi zh, high(rambase) //load pointer with start of image (bottom-right corner) ldi zl, low(rambase)ldi row_cnt, 0 track_outer_loop: ldi col_cnt, 0 track_inner_loop: ld pixel, z+ //increment ram pointercp pixel, thresh //if pixel is greater than threshold  value, track object in the x-direction (pan) brsh track_obj_x track_no_obj_here: addi col_cnt, 1 //increment column countercpi col_cnt, depthcolsbrlo track_inner_loop //if cols are less than 128, do next col addi row_cnt, 1 //increment row countercpi row_cnt, depthrows brlo track_outer_loop //if rows are less than 121, do first column track_obj_x: cpi col_cnt, 4brlo track_out_of_viewcpi col_cnt, 120brsh track_out_of_viewcpi col_cnt, 62 //if object is to right of center, then pan right brlo track_obj_to_right cpi col_cnt, 67 //if object is to left of center, then pan left brsh track_obj_to_leftrjmp track_obj_y //if object is in center in x direc- tion, then track in y direction (tilt) track_obj_to_left: subi col_cnt, 64divi col_cnt, trackdiv //divide error by trackdiv (this allows tuning of control loop gain) in temp1, ocr1al  sub temp1, col_cntcpi temp1, 43brlo track_out_of_view track_left_output: out ocr1al, temp1 //set servo to new valuerjmp track_obj_y track_obj_to_right: ldi temp2, 64sub temp2, col_cntdivi temp2, trackdivin temp1, ocr1aladd temp1, temp2cpi temp1, 131 //make sure value is still within limits if not, don't set servo to new value brsh track_out_of_view   track_right_output: out ocr1al, temp1references [1] i. horswill, “specialization of perceptual processes,”  (ph.d.diss., mit, 1993).   [2] i. horswill and m. yamamoto, “a $1000 active stereo visionsystem,” presented at ieee/iapworkshop on visual behaviors,seattle, wa, 1994.project files to download the code and pinout,go to ftp.circuitcellar.com/pub/circuit_cellar/2003/151/.sion at agilent technologies. daniel’stechnical interests include robotics,radio-controlled airplanes, nonlinearvideo editing, and linux. you mayreach him at dherr@frii.com.54 issue 151   february 2003 circuit cellar®www.circuitcellar.comecently, i learned that the circuit cellar readership pool is comprised of numerous 8051 fans. so, in keeping with circuit cellar ’s reader-oriented heritage, i’m going to mix it up this month with ahome-brewed 80c51-compatible philipsp89c668 microcontroller developmentboard, a set of data radios from the landdown under, and the latest keil c51compiler for the 8051. from 8748 to p89c668  my first encounter with the 8751 (i.e., a uv-erasable 8051) occurredwhen i stepped off the 8748 boat backin the early 1980s. although i didn’thave a tool like the keil c51 compilerin those days, the 8751’s firmware wasfriendly and its hardware was easy toincorporate in my designs. i loved my8748 micro and fell even deeper inlove with the 8751 after i gained a bet-ter understanding of its architecture.  for one of my 8751 projects, i built a musical instrument tuner. obviously, iwas in good company in those days.and, judging from the number of youwho are mating the packet whackerwith various 8051 variants, i’m still ingood company today.this whole p89c668 development board thing started when a readerrequested that i meld the packetwhacker’s ethernet engine onto adevelopment board featuring a flash-based 8051 device. the hardware design was hammered out over multiple e-mail sessions. in the end, i determined that the development board would haveto be simple to build with room forexperimentation and expansion. the reader suggested that i base the 8051 development board project on thephilips p89c668. i thought he meantp89c664 not p89c668, so i went mer-rily along my way, collecting p89c664microcontrollers and the peripherals tosupport them. things changed, howev-er, when my box of p89c664s wasdelivered to the florida room. the p89c664 is also an excellent choice for an 8051-compatible micro.like the p89c668, the p89c664 isbased on the 80c51 cpu and can beprogrammed in-circuit (in-system pro-gramming, or isp) or programmed in-circuit by the application (in-applica-tion programming, or iap).  an important feature is the user- accessible, serial-based, low-level flashmemory programming routines con-tained in the p89c66 xboot rom. and, with the right software tool set,you don’t need a dedicated 87c51 pro-grammer for development. for this project, it’s better to use the p89c668 instead of the p89c664,because the p89c668 comes with 8 kbof on-chip eram as opposed to the2 kb of eram found on the p89c664.i did need some extra eram for theethernet and serial i/o buffer area. onelast note before getting started: all ofthe p89c66 xfamily’s low-level 80c51 details (e.g., instruction set and timing)are identical to the original 80c51.  p89c668 hardware take a look at the schematic in figure 1. only three additional integrat-ed circuit logic elements and a general-purpose transistor are needed to create apotent, easy-to-build, easy-to-under-stand p89c668 development platform.  supported by a 74hct573 low- order address line latch, the p89c668is configured in the traditional way. a74hct138 one-of-eight decoder usesa p89c668 development board for 8051 fans r despite their geo-graphical and occupa-tional differences,most of fred’s read-ers have one thing incommon: their love ofthe 8051. this month,fred assuages theirappetite for 8051-related projects with asimple 80c51-com-patible p89c668development board. fred eadyappliedpcswww.circuitcellar.com circuit cellar®issue 151    february 2003   55and the programming interface sim- ple, flash magic—which is a free ispprogram from the embedded systemsacademy—is used to program the on-board p89c668. the active compo-nents shown in figure 3 process thers-232 signals from the flash magicpc application, allowing you to readand program the p89c668’s code flashmemory and configuration bits.  to be honest, another reason why i chose flash magic was to have anexcuse to build the sipex 233acp/pn2222a/74ls125-based har dware isp interface that’s described in the flashmagic manual. you can use flashmagic without the fancy rs-232 con-trol interface; however, with a littlemore effort and a few more dollars,the convenience offered by installingthe isp interface makes it worthwhile. flash magic uses the rts and dtr signals to control the psen and rstsignals. when psen is low, ea is at5 vdc, ale is floating at the falling edge of the reset pulse, and the p89c688 boot rom boot loader routines areinvoked. after they’re activated, theboot loader routines accept commandsand data in intel hex format from flashmagic via the p89c668’s uart.  as soon as the device is programmed, flash magic sets the status byte to0x00. then, it uses the rts and dtrsignals to reset the p89c668 and exe-cute the program contained within thep89c668’s code area flash memory. the sipex sp233acp and q2 pull the rs-232 inputs low when there isno com port attached or the flashmagic is inactive. the inactive stateof the rs-232 inputs forces the con-verted rs-232 outputs to a ttl high.the tri-state inputs of the 74ls125see this ttl high and block the74ls125 inputs. thus, psen and rstare left to the mercy of the externalcircuitry they’re attached to.  in an active state, the 74ls125 would pass its inputs and force psen low andrst high. to enter boot rom mode,psen is driven low by the rts signal.then, it’s held there until rst (drivenby dtr) is forced high and allowed toreturn low by the reset circuit, whichconsists of a 10-µf capacitor and a10-kωresistor. a processor reset is per- formed at the end of the isp operationthe three most significant address bits to provide chip select signals for theexternal i/o devices you may want toadd to the board.  one of the resident i/o devices is an old friend of mine. the upd71055l isan 82c55 variant made by necelectronics that’s connected to thep89c668 in the traditional fashion. q1,which is a pn2222a npn general-pur-pose transistor, acts as an inverter forthe interrupt signal that’s produced bythe second resident external i/o device,an rtl8019as ethernet engine ic.   the rtl8019as is a modified packet whacker configuration with the aenline acting as a chip select. thertl8019as portion of the p89c668 development board is shown in figure 2. the data bus (ad0–ad7), address bus (a0–a15), open p89c668 port pins(portions of ports p1 and p3), and allof the upd71055l i/o port pins areterminated on standard 0.1 ″male headers that are adjacent to an over-sized breadboard area. the initialp89c668 development board proto-type is shown in photo 1.  don’t let the hardware’s simplicity fool you. at only six clocks per cycle,the p89c688’s top speed (20 mhz), as well as its large internal code and datamemory structure, make it a viablemicro in the 8-bit world.  a flashy program there are numerous programs capa- ble of enabling the p89c668 isp inter-face. to keep the project affordable photo 1— the idea behind this design is to make it simple and cheap enough to build multiple boards so that each development board can be an ethernet node, serial node, or rf node on a network. if you’re won- dering about the location of the supporting capacitors and resistors, they’re all smt devices that are mounted on the backside of the board. photo 2— i used the blank check and display flash memory functions to verify that i had obtained access to the p89c688 flash memory using the sipex sp233acp isp circuitry .screens that i used for this project are shown in photo 2. a network node because the p89c668 development board contains ethernet and rs-232hardware, you probably think i’mgoing to describe the process of codingthe p89c668 development board hard-ware for use as an ethernet node on alan or wan. well, the lan or wanpart is correct, and the ethernet func-tionality will be exploited; however,for this particular project, the primarymethod of communication betweenp89c668 nodes will be via rf. as you probably know, writing code to deploy an embedded rf solution,can be a pain. basic data radios requirethe coder to produce at a minimumfirmware that generates a preamble, anaddressing scheme, and a crc. afterthat code is finished, if the data radiosare to be of any use, they must be ableto communicate reliably (i.e., eachradio must be able to check the validi-ty of the received data and acknowl-edge that validity or notify the senderthat the incoming message is bogus).  now, assume there are more than two data radios that need to communi-cate. also add the possibility that someof the data radios may be out of the range of the nodes they need to commu-nicate  with. after you get all of those requirements under control, you’ll have to deal with fcc certification. to eliminate as many of the rf has- sles as possible, i used embeddedcommunications systems (ecs) radio modems. i managed to get my handson a pair of rm-232-433 radiomodems that are designed for theoem market. in simpler terms, thatboils down to possessing radio modems without theecs commercial cases. the rm-232-433 operates as a short-range, license-exemptdevice on a center frequencyof 433.920 mhz. you can getrm-232 radio modems that operate on many of the other popular frequencies including914.500 mhz.  all of the potential problems relating to embedded rf imple-mentation that i described ear- lier are addressed in the rm-232-433hardware and firmware. the rm-232-433 operates in both acknowledgedpoint-to-point and multipoint modes.there’s even an acknowledgedmultimaster mode. the preamble,data encryption, error checking, andacknowledge logic all are built intothe rm-232-433’s operating firmware.the rm-232-433 radio modems areeasy to use. simply apply power, con-nect an antenna, and feed the radiomodem data via its serial port.  even though it’s that easy to get on the air with a pair of rm-232-433s, imanaged to foul things up. i’ve workedon many projects with a number of dif-ferent data radio modules. in theprocess, i’ve managed to accumulateantennas for each set of data radiosfound on the florida room’s shelves.  as you can see in photo 3a, my set of rm-232-433s came with a threadedantenna connector that’s a standard forthis type of rf equipment. the ideabehind the connector is to allow legalantennas to be easily attached anddeter the attachment of unapprovedantennas. i didn’t receive any antennaswith my ecs radio modems. so, i rum-maged through my bag of stubbies andpulled out a pair of antennas that fitthe threaded rf connector perfectly. after the antenna problem was solved, i moved on to determine how ishould apply power to the set of radiomodems. a standard 9-v transistorradio battery or an external powersource between 9 and 12 vdc canpower the rm-232-433.  after studying the radio modem’s board layout, i added the 2.5-mm powerconnector that you see in photo 3a. iadded the smt diode with the orange 56 issue 151   february 2003 circuit cellar®www.circuitcellar.comby holding psen high while a reset is performed using thedtr signal. using thesipex/pn222a’s rs-232 ispinterface, flash magic takescare of the programming andreset details as they pertainto the psen and rst signals. to allow for the use of debuggers or other peripher-als that require the comport during development,flash magic commands onlythe com port signals whenit’s active. using flash magic and thers-232 isp control hardware allows thep89c688 to be programmed and erasedin-socket with little hardware overhead.i can also add flash magic com- mand strings to a menu in my keilc51 compiler toolbar. this permits anautomated code, erase, program, anddebug development cycle that can beinitiated from the keil µvision2 ide.  in addition to being the heart of the isp operation, flash magic also pro-vides a means of displaying a flashmemory dump and incorporates utili-ties to read and write the security bits.a series of the flash magic operationphoto 3a— all of the rf plumbing is on this side of the board, because the bim2 module is a complete 433-mhz transceiver .b—this is the digital side of the ecs radio modem. the antenna connector can be mounted in either set of antenna pads. cut the link to the unused antenna pads in this fashion. the bank of status leds is located just above the pic16f84a. a) b) photo 4a— the banner is primarily used to tell you that you’ve established a serial communications session with the ecs radio modem. as you can see in b, there’s an option to turn this banner of f (signon). i suggest requesting the rm-232-433 user manual from ecs if you want the details for each of these command options. a)  b)hc08 q family of 8-bit microcontrollersmotorola and the stylized m logo are registered in the u.s. patent and t rademark office. all other product or service names are the property of their respective owners. © motorola, inc. 2002. •1.5k–4k of second-generation .5 micron flash  • 128 bytes of ram  •up to 4-ch 8-bit a to d converter  •2-ch 16-bit timer with input capture, output compare, or pwm  •trimmable internal osc (+/-5% accuracy)  •available in 8-pin dip/soic or 16-pin dip/soic/tssop•68hc908qt4 demonstration board and tutorial – codewarrior®integrated development environment – c compiler, assembler, linker and debugger– auto code generator for on-chip peripherals– full chip simulation and flash programminghc08 q family key features efficient. programmable. affordable. our powerful hc08 q family of 8-bit micro-controllers includes six new derivatives,available now, in volume, and competitivelypriced against 8-bit mcus without flash.available in small 8- and 16-pin packagingwith a full set of peripheral options – andmore are in development. leading edgemotorola flash is easier to program and  is re-programmable in the field, so products are “future enabled” to stay in the market longer. get started for just $25 with the comprehensive 68hc908qt4 demonstration kit. order yours now at www.motorola.com/mcujust what 8-pin mcus need: a little flash . system integration module external interrupt power-on-reset low-voltage inhibit mon08 cop internal rc128 bytes ram hc08 core2 channel 16-bit timer • input capture • output compare• pulse width mod. 4k bytes flash 1.5k bytes option4 channel 8-bit adc i/ o demonstration kit58 issue 151   february 2003 circuit cellar®www.circuitcellar.combands to route the power from the newly installed 2.5-mm power con-nector to the radio modem’s active cir-cuitry (see photo 3b). the black diodethat’s perpendicular to the dioderoutes power from pin 1 of the 9-pinrs-232. pin 1 of the 10-pin headerarea is also connected to pin 1 of the9-pin rs-232 female socket. in fact,you can use a 10-pin header instead ofthe 9-pin socket in situations wherethe radio modem is entirely enclosed.of course, the steering diode i added isoptional, because both diodes are onlythere to protect against attaching apower source with the wrong polarity. at that point, i had a set of antennas and the ability to apply power using astandard wall wart. next, i took a lookat the commercial units on the frontof the rm-232-433 user’s guide andnoticed that they were sporting somestatus leds. that meant that therehad to be provisions for the leds onthe oem radio modem board. well, the led access area was not obvious to me, so i decided to followthe traces from the line of 10 holes along the edge of the board. in doing so, i discovered a set of smt leds.this was too good to be true. i wasn’tlooking forward to building an exter- nal jig just to see a few leds blink.so, to test my new discovery, i applied photo 5— i used a bit of editorial privilege for this shot. actually , you can only open one memory window . note the tabs at the bottom of the memory dump select the dif fering memory areas.www.circuitcellar.com circuit cellar®issue 151    february 2003   59houston, we have liftoff. the receive and transmit status leds on the radiomodems became active, so i turned offthe radar and performed some success-ful pings. my first successful data trans-mission consisted of the word “duh.” coding the node here’s where the fun begins. you can write the p89c668 developmentboard’s firmware using the latest ver-sion of keil’s c51 compiler for the8051. although the p89c668 is a true8051 derivative, there are minor differ-ences in its architecture that must berecognized by the compiler to allowyou to manipulate the part fully. forinstance, the p89c668 has eram that’slogically treated like external memory.the p89c668 also houses an additionaldptr register. provisions to use theinternal eram and second dptr arealready in place, because the c51 com-piler supports the p89c688 directly.  the firmware plan includes writing diagnostic code for the p89c668 devel-opment board so that you won’t have tosuffer the pains i did while developingand debugging it. after the diagnosticcode has been written and debugged,power to one of the radio modems. igot the blinking pattern that matcheda radio in listen mode. at that point, things were going well. as an initial test, i planned to attachone radio modem to my laptop, one to adesktop machine, and then drive themwith hyperterminal. i put some dis-tance between the radios and fired upboth of them. the banner that you cansee in photo 4a appeared on both pcs.  because i had the banner and the radio modem’s attention, i decided tocheck out the configuration optionswith the configuration mode. i typed“+++,” hit the enter key, entered“help,” and pressed the enter key onemore time. you can see the result inphoto 4b. some of the other features ofthe rm-232-433 radio modem includethe ability to act as a repeater ( rptmode [on | off | all] ) and to be remote- ly configured ( remote [[(on|off] | sno cmd [params]] ).  in configuration mode, i could set the radio modem node as a master orslave (ptpmode [on | off | slave | master] ) and control just about every aspect of the radio modem’s oper-ation including setting delays, timeoutperiods, character pacing, on-the-air data rates ( airspd [60014400] ), and the radio modem’s serial port datarate (baud [600115200] ). each ecs radio modem is addressable. thisfacilitates the implementation of mul-tiple radio modem lans using a com-mon frequency. the defaults should have been fine for the initial test. all i had to do wastype in some characters on one of thepcs and the characters would appearin the receiving pc’s terminal win-dow. well, that’s what i did, but noth-ing happened. after an hour or so oftroubleshooting, i was nowhere nearsolving the problem. i tried the pingand radar functions on both radiomodems with no luck. finally, i putone radio modem in radar mode andreturned to my stash of data radioparts to see if i could figure out what imight have done wrong.  as i was looking through the batch of radios, i discovered that the onlyother threaded antenna connectionsbelonged to a set of 900-mhz units.duh! i removed the cute, stubby, 900-hz antennas and replaced them with asimple piece of hook-up wire. bang! figure 1— note the absence of external sram. the p89c668 contains a little over 7 kb of usable internal eram that’s accessed just like ex ternal sram by clearing a bit (extram) in the auxr register. it’s easy to add external storage to the development board if your project requires more than th e p89c668 provides.60 issue 151   february 2003 circuit cellar®www.circuitcellar.coming the eram area in another win- dow and monitoring the serial outputin yet another window (see photo 5).  as i stepped through the source code, i could see the serial data being placed in the eram area defined as the receive buffer (the x:000000 memory windowin photo 5) as well as the transmitted data flowing through the transmit buffer area (the x:000100 memory window).the serial output window emulates anyou’ll have the basis for the final operating firmwarebecause you won’t have towrite radio modem code at all.  the ecs radio modems are fed through their serial ports,and i figured that would bethe easiest 8051 code towrite. it wasn’t, so i decidedto use interrupt-driven seriali/o. even though there’s goodskeleton code included withthe c51 compiler, i ran into arough spot getting thep89c668’s uart to work.  the interrupt-driven serial i/o rou- tines use external memory as a bufferarea, which in this project is internaleram on the p89c688. my version ofthe keil 8051 c51 compiler (pk51) hasthe ability to debug the code i writeby simulating the hardware. so, iturned all of the debugger and simula-tion knobs to get a view of my code inassembly language format while view-ascii terminal, and i was able to enter a character and see theresults just as if my p89c668hardware were attached tohyperterminal.  the simulation allowed me to determine that the code wasworking as designed and myproblems were most likely inthe hardware. i coded a simple serial output program that didn’t use interrupts or the eram, successfully simulated it, andloaded it onto the development board. nothing was displayed in the hyperterminal window. because thingswere getting weird, i wired the develop-ment  board to my computer running frontline’s serialtest async and hit the reset button on the p89c688 develop- ment board. oh, yeah. there was my data loud and clear.  confident that hyperterminal had thrown me a curve ball, i reloaded thedevelopment board with the interrupt figure 2— this is basically the packet whacker module with the aen line pulled out for use. using the ne2000 code skeleton, the r tl8019as  is dead easy to implement for almost any microcontroller . photo 6— serialtest async has saved me many times. i can always count on serialtest to give me accurate serial port captures. the ascii interpretation in this shot is the banner generated by my interrupt-driven serial i/o code.www.circuitcellar.com circuit cellar®issue 151    february 2003   61modem network without having to swap cables after every compile, iadded a switch to disconnect dtr andrts from the sipex233acp when ahyperterminal session is active.  after i finished debugging, i had to connect the ecs radio modems to thep89c668 development board using anull modem arrangement. i did thisbecause both the development boardserial port and the ecs radio modemsare configured as dce devices. using the node in terms of usage, the ecs radio modems are self-sufficient. if you canget your message out of the p89c668’suart, you can make use of the rflink the ecs radio modems provide.  you may download the p89c668 development board source code (in c51project format) from the circuit cellar ftp site. i also provided a silkscreenedcircuit board and a parts kit for peoplewho want to get a jump start on theethernet functionality of the develop-ment board and the p89c66 xseries. if you don’t own a copy of the c51 com-piler, or you don’t want to port mysource, you can get an evaluation copyof the c51 compiler on keil web site.  i had forgotten how fun coding for the 8051 could be. the keil c51 com-piler is as fun to work with as it ispowerful, and the plug-and-play ecsradio modems will allow me to putlittle wireless nodes all over thecode and nothing appeared on theserialtest async display. somethingwas definitely wrong with either theinterrupt routines or external memoryaccess. i ruled out interrupt problemsand turned to keil’s knowledgebase fora possible answer. in the knowledge-base i found a document titled “c51:using xram on the philips 80c66xand 80c51rx devices.” the partnumbers were close enough, and i wasdesperate enough, so i read it. as it turned out, the p89c668’s eram was never activated and theknowledgebase document contained afix that i could add to the p89c668start-up code. all i had to do was toidentify the auxr register and turnoff a bit inside it (extram) to enablethe on-chip eram. two lines of codeand a compile later, i was spittingcharacters out of the serial port withthe interrupt code (see photo 6). during the battle with the p89c668 uart, i found that hyperterminaldoesn’t allow flash magic to borrowthe com port. hyperterminal is pri-marily designed to work with a modem; thus it holds dtr active whena hyperterminal session is active. this effectively holds the p89c668 in reset.  psen is also confused because dur- ing a hyperterminal session, rts isturned on and off at the wrong timesin relation to the isp hardware inter-face on the development board. tofacilitate the live testing of the radioproject files to download the code, go toftp.circuitcellar.com/pub/circuit_cellar/2003/151/. sources rm232-433 radio modemembedded communicationssystems, ltd.www.embeddedcomms.com.au flash magic embedded systems academywww.esacademy.com/philips serialtest async frontline test equipment, inc.www.fte.com c51 c compiler, µvision2 ide keil software, inc.www.keil.com modems lemos international, inc.www.lemosint.com µpd71055l nec electronics corp.www.nec.com p89c668 microcontroller philips semiconductorwww.philips.com rtl8019as ethernet engine ic realtek semiconductor corp. www.realtek.com sp233acp sipex corp.www.sipex.comfred eady has more than 20 years ofexperience as a systems engineer. hehas worked with computers andcommunication systems large andsmall, simple and complex. his forteis embedded-systems design andcommunications. fred may bereached at fred@edtp.com. figure 3— the isp interface can be conceived with just about any rs-232 converter ic. i had sipex sp233acps in the florida room; they were clean and easy to implement. i ran out of receive buffers, and instead of adding another sp233acp, i used a pn2222a to translate the rts signal. with the exception of the 74ls125, the whole isp interface could be built using only pn2222a transistors and a handful of resistors.florida room. i have visions of col-isp interface could be built using only pn2222a transistors and a handful of resistors.florida room. i have visions of col- lecting information and controllingdevices via an rf link into a masterp89c668 node that’s attached to theflorida room’s lan. this time, acircuit cellar subscriber has again proven that it doesn’t have to be com-plicated to be embedded. i62 issue 151     february 2003 circuit cellar®www.circuitcellar.comow often do you pick up the wrong station when you’re trying to tune in to a specific radio program? you expectthat dialing up a number on the receiver will select a specific stationwith a transmitter on that frequency,which is what usually happens.  amateur radio operators, particularly those living in cities, often encounterradios that emit loud squawks, tones,garbled speech, or stations transmittingon a different frequency. sometimesthe radio changes from one bizarresound to another before returning tonormal. generally, the unexpectedstations lie outside the ham bands,although anything seems possible. the culprit, intermodulation inter- ference, may not be attributable to theradio or an electronic device; it canarise in a rusty bolt on an antennatower! strangely, radio designers makeuse of the same effect (although theycall it nonlinear mixing) to select thedesired station from the myriad oftransmitters on the air. in the past, i’ve described linear audio mixers that combine signals byaddition. now, let’s look at how sig-nals combine in nonlinear mixers andsome of their unexpected properties.nonlinearity 101 analog designers feel comfortable around linear circuits because themathematics works out nicely: theoutput is always a linear function ofthe input. in fact, considerable designeffort goes into forcing a circuit to belinear by choosing a specific operat-ing point, wrapping negative feed-back around it, or compensating fornonlinear behavior. by definition, the output of a linear circuit is proportional to its input,which also implies the principle ofsuperposition. this means that theoutput caused by two separate signalsis equal to the sum of the outputscaused by each signal applied separate-ly. in effect, nothing comes out thatyou don’t put in. for example, the voltage across a resistor induces a linearly related cur-rent. if you double the voltage, the cur-rent increases by a factor of two. anop-amp circuit may have a gain of two,but when you double the input, theoutput also doubles. therefore, thegain is fixed and the output increasesby the same factor as the input. you know that an arbitrary input sig- nal can be represented as the sum of acollection of sine waves (i.e., the sig-nal’s fourier transform). those sinewaves will pass through a linear circuitand emerge with predictable amplitudeand phase relationships, which meansthat you can probe the circuit with onesine wave at a time and determine itsresponse to the entire set. by definition, nonlinear circuits include anything that doesn’t behavelinearly. when a diode’s currentincreases exponentially with appliedvoltage, a preamp’s gain decreases asthe input increases or a driver’s outputclips at a preset power level. that’snonlinear behavior. superposition doesn’t apply to non- linear circuits, because the output sig-nal is not simply the sum of the inputsignals. circuits with slight nonlinear-ities have outputs that are nearly thesum of the inputs, but additional sig-nals are always present. as you’ll see,you can’t probe a nonlinear circuitwith one sine wave and decide whatwill happen with even as few as oneadditional sine wave.nonlinear mixing h in a number of previ- ous articles, ed hascovered the topic oflinear audio mixers.this month, he willaddress the flip sideof the coin, nonlinearmixing. if you’re notaccustomed to work-ing with nonlinearmixers, this article isthe perfect place tobegin.   ed nisleyabove thegroundplanereplacing the lower resistor (r2) with a standard 1n4148 diode pro-duces photo 1b. the amplitude hasincreased slightly, with the 500-hzsignal at 0 db, because the forward- biased diode exhibits more than 100 ω of resistance at this operating point. the second harmonic rises to 20 dbbelow the main signal with the thirdharmonic remaining 10 db below that.additional harmonics also appear out of the grass at higher frequencies. a standard oscilloscope view of the signal across the diode shows basicallywhat you’d expect, although i didn’tinclude a photo. the upper peaks ofthe sine wave no longer reach 400 mv,because the increasing current throughthe diode rounds them off. that dis-tortion represents the new frequencycomponents in photo 1. adjusting the signal generator’s amplitude and dc offset changes thediode’s operating point and the amountof nonlinearity. when you try this onyour bench, compare the visible distor-tion on your oscilloscope (or pc) withthe magnitude of the harmonics. although distortion is thought of as bad, it’s a good way to generate newsignals with a precise relation to anexisting one. suppose you have a stable100-mhz oscillator and need a stable300-mhz signal. if you feed 100 mhzinto a diode, band-pass filter the output around 300 mhz, and amplify theresult, you can get the job done with-out complex circuitry or even a dsp. …two signals… the layout in figure 2 adds a second sine wave through a resistor. i used adirect digital synthesizer for the 500-hzsignal and the same function generatoras before for the 700-hz signal. thetwo tall bars in photo 2b show theinput signals at –5 db, and the smallertrace shows the generator’s 1400 hzsecond harmonic at –40 db. the har-monics from the dds are barely abovethe grass starting at 2000 hz. replacing r5 with d2 produces the forest of signals shown in photo 2b.not only are higher harmonics pres-ent, but you’ll also see frequenciesbelow the input signals. yes, in thiscase, 500 plus 700 equals 100! you should check the resources i list at the end of the article, in partic-ular the arrl handbook for radio communications , for the derivation of the math concerning nonlinear mix-ing. photo 2 shows most of the formu-las in action. combining two sine waves in a nonlinear mixer will produce outputsignals with frequencies equal to thesum and difference of all of the integermultiples of the input frequencies. forinputs at frequencies f 1and f2, the outputs will be at ±nf1±mf2. the order of a given output signal is the sum of its frequency coefficients.the two first-order mixing products inphoto 2a are the input signals at f 1= 500 hz and f2= 700 hz. the four sec- ond-order products are at 200, 1000,1200, and 1400 hz. there are actuallyeight of these products, four with posi-tive and four with negative frequencies,but i’ll discuss negative frequencieslater. suffice it to say that they’re real! you can see some of the third-order products in photo 2, most notably300 and 900 hz. the hump around2000 hz conceals the 1500-, 1700-, 1900-, and 2100-hz products. higher-order products abound even in thissimple example. the 400-hz bar isfourth-order (–2 × 500 + 2 × 700), and www.circuitcellar.com circuit cellar®issue 151     february 2003   63one signal… working at radio frequencies requires test equipment that’s both tricky touse and expensive to own. however, ifyou restrict yourself to audio frequen-cies, you can probe circuits usingnothing more than a pc with a soundcard and some readily available soft-ware. the principles remain the sameeven with frequencies scaled by sixorders of magnitude. i used a true audio real-time analyz- er, truerta, for this column. if youdon’t need truerta’s stimulus out-put, then take a look at visualizationsoftware’s spectrogram. both run onwindows; i was unable to find any-thing comparable for linux. figure 1 shows a pair of 100- ωresis- tors driven by a 400-mv ppsine wavefigure 1 shows a pair of 100- ωresis- tors driven by a 400-mv ppsine wave from my function generator. i offsetthe sine wave by 200 mv to slightlyforward-bias the diode that you’llmeet shortly. the two resistors form asimple and completely linear circuit. using truerta’s stimulus output, you can add the dc bias with a bat-tery and trimpot. typical line-in portshave resistors to both 5 v and com-mon to set the dc level in front oftheir ac-coupling capacitor. do notoverpower those input resistors. a perfect signal generator would produce a single frequency, but minewasn’t that good. the tallest bar inphoto 1a represents the main 500-hzsignal at –3 db. the two shorter barsshow that the 1000-hz second har-monic is 37 db below the main signal,and the 1500-hz third harmonic is10 db below that. note that the grass growing below those bars includes noise from the gen-erator and pc sound card. as youspend money on test equipment, you’lllower that noise floor and increase thedynamic range of the measurements.to pcr1 r2 100100500-hz sine gnd 1n4148  d1 figure 1— a resistor and a diode produce completely different outputs from this simple circuit, even with only a single sine wave as input. photo 1a— the sine wave output of a signal generator has moderately low harmonic content. b—replacing r2 with diode d1 increases the amplitude of the harmonics.a)  b)64 issue 151     february 2003 circuit cellar®www.circuitcellar.comthe 100-hz bar is actually a fifth-order mixing product (3 × 500 – 2 × 700). there isn’t a simple relationship between the order of a mixing productand its real-world amplitude, althoughhigher-order products tend to beweaker. the relative strengths changeas you vary the input levels and dcbias point, so you can indeed tune forthe best picture. …three, and more!  remember that the forest of spikes in photo 2 grew from just two inputsine waves. a third input signal, witha mixing formula of ±nf 1±mf2±pf3, would create even more products. if f3 were, say, 600 hz, you’d see six uniquesecond-order mixing products! you’ve certainly seen the forest of antenna towers atop hills or buildings.each tower may have several antennas,each transmitting or receiving on anyfrequency from a few tens of megahertzto a few gigahertz. part of the transmit-ter licensing process involves verifyingthat it won’t interfere with other trans-mitters or receivers in the same area.radio transmitters emit low-level spurious outputs, just as my signalgenerator produces the small third-harmonic signal in photo 1. all of thetransmitters on a site must be coordi-nated so that none of their spurs fallwithin the band-pass of any of thenearby receivers. the analysis actuallyextends high up the harmonic scale,requires a spreadsheet (at least) to keeptrack of the various mixing orders andproducts, and provides employmentsecurity for rf engineers. although silicon diodes are the most familiar, they’re not the only semicon-ductors in the world. the corrosionthat forms between two metal objectscan act as a rectifier and resemble apair of low-breakdown, leaky, back-to-back diodes. if that corrosion happensto form between a mounting bolt andan antenna tower, ambient rf energywill produce the same mixing prod-ucts you’ve just seen. by definition, receivers must be sen- sitive to low-level rf signals and con-nected to excellent antennas. two,three, or four rf carriers that are photo 2a— two sine waves add linearly in a resistor to show only one generator harmonic. b—replacing r5 with diode d2 produces many additional frequencies that are now present in the inputs.a)  b) /g4a/g4b /g20/g6d/g69/g63/g72/g6f/g73/g79/g73/g74/g65/g6d/g73/g2c/g20/g49/g6e/g63/g2evisit us on the web www .jkmicro.com call 530-297-6073     fax 530-297-6074/g54/g6f/g6f/g6c/g73/g20 /g74/g6f/g20 /g4d/g6f/g76/g65/g20 /g44/g61/g74/g61   µflashtcp-ep * 10base-t ethernet 2 serial ports 7-34 vdc optional i/o interface rugged enclosure w/ industry standard connectors starts at $229  logicflex * 10base-t ethernet 2 serial ports 46 digital i/o ’s programmable xilinx cpld hardware clock/calendar expansion bus for peripheral boards starts at $189  dual-e* 2 ethernet ports 2 serial ports 3 counter/timers 5 digital i/o ’s onboard connectors usnet tcp/ip software in kits starts at $199 /g54/g43/g50/g2f /g49/g50/g20 /g20/g53/g6f/g6c/g75/g74/g69/g6f/g6e/g73 all products based on the intel 386ex with dos and ne2000 compliant, 10base-t ethernet. standard memory includes 512k ram & 512k flash plus dip socket to accept an m-systems diskonchip. development systems contain necessary hardware and software tools for fast development. 1403 fifth st., suite d davis, ca 95616 usajk microsystems connects you with embedded control solutions. our cost-effective dos based controllers are ideal for data acquisition, networking or industrial technology applications.*  logicflex- epx* 10base-t ethernet 2 serial ports 16 opto-isolated inputs 16 relay outputs @ 500ma ea. quick-disconnect connectors rack mount enclosure lcd & 6 pushbuttons starts at $499/g4e/g45/g57 /g50/g72/g6f/g64/g75/g63/g74/g73www.circuitcellar.com circuit cellar®issue 151     february 2003   67located near an impromptu diode can produce an in-band mixing productthat is strong enough to swamp areceiver tuned to a nearby frequency. the mixing product frequency depends on the input frequencies andwill be reasonably constant. however,the modulation that you’ll find onthat signal won’t resemble any of thecarriers that produced it. passing thattype of mush through a radio that isdesigned to demodulate narrowbandfm only adds to the confusion. asquawk may be the best thing thatyou can expect.resistors and diodes can do when youmix them with a pc sound card and abit of software! i contact release  the chapter titled “mixing, modu- lators, demodulators” in the arrl handbook presents the basic math required to understand nonlinear mixers. assuming you have a handful of resis- tors and diodes, you can read the hand-book while fiddling with the display onyour pc. there’s nothing like an exam-ple to illustrate those obscure formulas! although most components behave in a linear manner over a reasonableoperating range, if you continue todouble the voltage applied to, say, aspeaker, it will eventually release itsmagic smoke and exhibit a differenttype of linearity (i.e., zero currentregardless of the applied voltage). youcan think of that as infinite resistanceif you like, but it is definitely not thenormal situation. take care whencranking the gain on that signal gener-ator, particularly if you’re monitoringthe output on your pc’s speakers. next time around, we will take closer a look at a double-balancedmixer and explore frequency shifting.until then, see what a handful ofresources the american radio relayleague, inc., arrl handbook for radio communications , newington, ct, 2002. xmms for linux, www.xmms.org.ed nisley, pe, is an electrical engi- neer and a ham radio geek (call signke4znu). you may contact him ated.nisley@ieee.org. sources truerta spectrum analyzer andsignal generator true audio(865) 494-3388www.trueaudio.com spectrogram  visualization software, llcwww.visualizationsoftware.comto pcr4 r5 100100100 r3700-hz sine 500-hz sine gnd 1n4148  d2 figure 2— combining two sine waves in a resistor produces their linear sum. substituting a diode gener- ates a nonlinear forest of frequencies from the two input signals.68 issue 151  february 2003 circuit cellar®www.circuitcellar.comt’s no secret that engineers are embedding micros in almost everything these days. i’ve been ranting about smallmicros since microchip introduced an8-pin micro (circa 1997). atmelhopped on the low pin count band-wagon with the 8-pin avr series. youknow this isn’t a pet rock fad whenthe company that controls roughly24% of the market for 8-bit microssets its sights on dominating everysegment of the microcontroller mar-ket. motorola’s ammunition comes inthe form of a new flash memory prod-uct line that’s based on the hc08. thecompany expects its nitron family ofmicrocontrollers to have the muscleand price that designersneed to win design-ins.  the kickoff begins with 8- and 16-pin packagesusing 0.5-µm, second-gen-eration flash memorytechnology. currently, thenitron family consists ofthree new parts, each ofwhich is available in an 8-(six i/o) or 16-pin (14 i/o)package. note that the base parts have 1.5 kb ofcode space. the first optionadds a four-input, 8-bit adc, and thesecond option includes the adc andincreases the code space to 4 kb. it’s no secret. it’s no coincidence. motorola’s vision of dominance playsright into motorola’s flash innovation2003 design contest. if you’re unfamil-iar with motorola micros or the68hc08 architecture, this month’scolumn will bring you up to speed.soon, you’ll be able to jump right inwith the rest of us and hopefully comeup with a winning design.  if you’re already familiar with the hc08, then skim the features sectionfor new information. as you do, payclose attention to the description ofthe free tools that motorola has madeavailable for these parts. the 68hc908  the nitron family of 8-bit mcus is a complex instruction set computer(cisc) that uses von neumann archi-tecture (i.e., data and code in one con-tiguous space). the core cpu is thehigh-performance hc08, so the objectcode is fully compatible with the otherprocessors in the family (see figure 1).  in addition to the flash memory, ram, 16-bit timer, and internal clock oscillator, there are several otherimportant features to consider: a watchdog, low-voltage detect/reset, anembedded monitor, high-current i/owith interrupt capability, and anoptional adc. now, i’ll describe thehighlights of each feature. the core as you can see in figure 2, the cpu consists of a control unit andexecution unit. the former is a finitestate machine that’s responsible fornewcomer nitron i motorola’s 2003designcontest isupon us, so now’s the time toget familiar with thenitron family. this month, jeff intro-duces us to the flashytechnology that willsoon permeate thelow-end mar kets.jeff bachiochi from the  bench motorola’s leading 8/16-pin mcus external interrupt power-on reset low-voltage inhibit mon08 copsystem integration module internal rc128 bytes of ram hc08  coretwo-channel 16-bit timer  input capture   output compare   pulse width modulation four-channel  8-bit adc 4-kb flash memory  1.5-kb option i/o figure 1— the motorola nitron microcontroller family is built around flash memory and the proven hc08 core cpu. the on-board monitor (mon08) offers access to the internals via half-duplex serial communi- cations on a single pin.www.circuitcellar.com circuit cellar®issue 151   february 2003   69protection against the unintention- al erasure or programming of theflash memory is carried in the flashblock protect register (flbpr). thisregister indicates the starting blockto be protected up to the end ofmemory $ffff. the flbpr preventsthe hven bit from being set whenattempting to erase or program a pro-tected block, including the blockcontaining the flbpr.  so, after it’s programmed, you can- not change flbpr without applying ahigh voltage to the irq pin forcingthe micro into monitor mode after areset. then, you can perform a mass erase via the monitor. volatile memory the volatile memory consists ofgenerating all of the execution unit’scontrol signals; it uses four clockcycles to prepare the needed output(one execution cycle).  the execution unit contains five registers: an accumulator (a), controlcode register (ccr), stack pointer(sp), program counter (pc), and indexregister (h:x). in addition, it includesthe a rithmetic logic unit (alu) and special-function logic for the daa,mul, and div instructions. the 8-bit a register holds operands and the results of arithmetic/logicoperations. the 8-bit ccr register contains six flags: overflow, half-carry, interrupt, negative, zero, andcarry/borrow. although the 16-bit sp register can reach the full addressspace, make sure it remains in the ram space located between the $0080and $00ff addresses on these devices. the sp is initialized to the end of ram and works downward. in addi-tion, the 16-bit pc register can alsoreach the full address space. at reset,the program counter is loaded withthe address in the reset vector at the$fffe:$ffff addresses. the 16-bith:x register is used to index or pointto a memory location. flash memory the on-board flash memory is in- circuit reprogrammable thanks to aninternal charge pump. the linearmemory array (1.5 or 4 kb) is locatedat the top of the 16-bit memoryspace and extends downward from$fdff. there is an additional 48 bytes ($ffd0 to $ffff) for interrupt vectors. one block of 64 bytes is the mini- mum number of bytes that can beerased at one time (i.e., beginning atany address $xx00, $xx40, $xx80, or$xxc0). the maxi mum number of bytes that can be programmed at onetime is one row of 32 bytes (i.e.,beginning at any address $xx00,$xx20, $xx40, $xx60, $xx80, $xxa0,$xxc0, or $xxe0).   the flash memory control register (flcr) controls the erase and programoperations. four bits are responsiblefor all of the operations: high-voltageenable (hven) enables the internalcharge pump; the mass erase controlbit facilitates total erasure; the erasecontrol bit permits block erasure; andthe program control bit (pgm)enables row programming.    table 1—in the lower part of the mc68hc908q xxaddress space, there are 128 bytes of ram between $0080 and $00ff. as you now know, the majority of the status, control, and data registers are between $0000 and $003f.cpu control alu 68hc08 cpu cpu registersaccumulator index register stack pointer program counter condition code register vii zchin figure 2— the hc08 cpu is based on a control and execution units. the cpu uses five registers. the 16-bit program counter can reach the total address space. address space registers $0000 port a data register (pta)$0001 port b data register (ptb)$0002–$0003 unimplemented (two bytes) $0004 data direction register a (ddra)$0005 data direction register b (ddrb)$0006–$000a unimplemented (5 bytes) $000b port a pull-up enable register (ptapue)$000c port b pull-up enable register (ptbpue)$000d–$0019 unimplemented (13 bytes)$000b port a pull-up enable register (ptapue)$000c port b pull-up enable register (ptbpue)$000d–$0019 unimplemented (13 bytes) $001a keyboard status and control register (kbscr)$001b keyboard interrupt enable register (kbier)$001c unimplemented$001d int status and control register (intscr)$001e configuration register 2 (config2)$001f configuration register 1 (config1)$0020 tim status and control register (tsc)$0021 tim counter register high (tcnth)$0022 tim counter register low (tcntl)$0023 tim counter modulo register high (tmodh)$0024 tim counter modulo register low (tmodl)$0025 tim status and control register channel 0 (tsc0)$0026 tim channel 0 register high (tch0h)$0027 tim channel 0 register low (tch0l)$0028 tim status and control register channel 1 (tsc1)$0029 tim channel 1 register high (tch1h)$002a tim channel 1 register low (tch1l)$002b–$0035 unimplemented (11 bytes) $0036 oscillator status register (oscstat)$0037 unimplemented$0038 oscillator trim register (osctrim)$0039–$003b unimplemented (3 bytes) $003c adc status and control register (adscr)$003d unimplemented$003e adc data register (adr)$003f adc input clock register (adiclk)$0040–$007f reserved (64 bytes) $0080–$00ff ram (128 bytes) $0100–$27ff unimplemented (9984 bytes) $2800–$2dff auxiliary rom (1536 bytes) $2e00–$edff unimplemented (49,152 bytes)changes. in this case only one output is available as the channels are used inan alternating fashion. osc all of the standard oscillator configu- rations are available on the ’908q. takenote of the external rc, crystal (oroscillator), and an internally generatedfixed clock frequency (12.8 mhz).  two internal clocks are derived from the oscillator. one is a divide-by-2 that’s used by the system inte-gration module (sim) and cop. theother is a divide-by-4 that’s used bythe cpu as an instruction cycleclock (bus clock).   70 issue 151  february 2003 circuit cellar®www.circuitcellar.comuser ram, reserved registers, and i/o.as i mentioned in association withthe sp, there are 128 bytes of rambetween $0080 and $00ff (see table 1).most of the control, status, and dataregisters are within the $0000-to-$003f address space. additional ram status and control registers are located in the $fe00-to-$fe0c upper address space in addi-tion to $ffbe, $ffc0, and $ffff (seetable 2). the $ffff location per-forms two functions. when thisaddress is read, it contains the lsb ofthe reset vector. on the other hand,when this address is written to, itresets the computer operation prop-erly (cop) watchdog counter.  tim the timer interface module (tim) is a two-channel timer that providestiming reference, input capture, out-put compare, and pwm functions.figure 3 illustrates the tim. theprescaler has seven prescaler selectbits for a  divide by 1/2/4/8/16/32/64 from the internal bus clock. the 16- bit counter (tcnth:tcntl) canbe configured to count up untilmatching the tmodh:tmodl reg-isters and then  reset to zero or free run. tcnth:tcntl can be read atany time without disturbing thecount. the timer overflow can causean interrupt. two pins, tch0 and tch1, can serve as inputs to capture separate events. on input, the 16-bit counter value is latched into separate cap-ture/compare registers (i.e., tch0h:tch0l and tch1h:tch1l).the input capture edge polarity can berising, falling, or both. in addition, thecapture can cause an interrupt.it’s possible to use the same pins as outputs con-trolled by the capture/compare registers. in thismode the output pin canbe set, cleared, or toggledon a match.  when used in conjunc- tion with the 16-bit timeroverflow, pwm outputs can be created. if the cap-ture/compare register val-ues are changed asynchro- nously, transition glitches can occurin the counts. this isn’t a problem inmost applications. linking the twochannels together makes synchronous address space register $ee00–$fdff flash memory (4096 bytes) mc68hc908qt4/y4  unimplemented (2560 bytes)  flash memory (1536 bytes) mc68hc908qt1/t2/y1/y2 $fe00 break status register (bsr)$fe01 sim reset status register (srsr)$fe02 break auxiliary register (brkar)$fe03 break flag control register (bfcr)$fe04 interrupt status register 1 (int1)$fe05 interrupt status register 2 (int2)$fe06 interrupt status register 3 (int3)$fe07 (reserved for) flash test control register (fltcr)$fe08 flash control register (flcr)$fe09 break address high register (brkh)$fe0a break address low register (brkl)$fe0b break status and control register (brkscr)$fe0c low-voltage interrupt service register (lvisr)$fe0d–$fe0f reserved for flash memory test (3 bytes) $fe10–$ffaf monitor rom (416 bytes) $ffb0–$ffbd flash memory (14 bytes) $ffbe flash block protect register (flbpr)$ffbf reserved flash memory$ffc0 internal oscillator trim value$ffc1 reserved flash memory$ffc2–$ffcf flash (14 bytes) $fed0–$ffdd user vectors (14 bytes) $fede adc conversion complete vector high$fedf adc conversion complete vector low$fee0 keyboard vector high$fee1 keyboard vector low$fee2–$fff1 user vectors (16 bytes) $fff2 tim overflow vector high$fff3 tim overflow vector low$fff4 tim channel 1 vector high$fff5 tim channel 1 vector low$fff6 tim channel 0 vector high$fff7 tim channel 0 vector low$fff8–$fff9 user vectors (2 bytes)$fffa irq vector high$fffb irq vector low$fffc swi vector high$fffd swi vector low$fffe reset vector high$ffff (read) reset vector low  (write) cop control register (copctl) table 2—additional ram status and control registers are located in the upper part of the mc68hc908q xxaddress space. take a look at $fe00 through $fe0c in addition to $ffbe, $ffc0, and $ffff.capture/compare unit 16-bit counter prescalerport pin port pintch0 tch1external mcu bus internal mcu bus tch0 interrpt tch1 interrpt internal address bus tov interrupt internal data bus internal bus clock figure 3— the timer interface module (tim) has three main parts: a prescaler, 16-bit counter, and capture/compare unit. two independ- ent channels use an i/o either as input for counting or output for sig- nal generation.pure wireless over 4,500 design engineers  over 300 leading eoem suppliers 50 technical educational sessions  the largest and longest wireless  eoem event in the silicon valley cut the cord and go pure wireless... log onto www.wsdexpo.com wireless systems design conference &expo february 24-27, 2003 san jose convention centersan jose, ca for general information: penton technology media | 611 rt 46 w hasbrouck heights, nj 07604 |t: 01.201.393.6032 |f: 01.201.393.6297 |e: electronicevents@penton.com  a penton event72 issue 151  february 2003 circuit cellar®www.circuitcellar.comthe internal oscillator is adjustable ±25% to within less than 5% by set- ting a trimming register with a valueother than the default value of $80.(note that values less than $80 slowdown the oscillator, and values greaterthan $80 speed it up.)  an oscillator divide by 4 (bus clock) is an option available for cali-bration purposes on pin osc2. themaximum external frequency is 8mhz for 5-v operation and 4 mhz for3-v operation. cop the free-running cop counter will interrupt the device if it overflows.this is an attempt to recover fromrunaway code. in order to pr event the cop from interrupting during thenormal execution of code, your codemust clear the cop counter at regu-lar intervals.  the cop counter is a 6-bit counter clocked by the divide-by-12 sim count-er (clocked from the oscillator). theoverflow can come from stage one orsix of the cop counter depending onthe cop rate select (coprs) bit inthe config1 register. that’s either a1- or 32-ms overflow at the maximumoscillator frequency (8 mhz). thecop is cleared by writing any value tothe $ffff address. lvd the ’908q has low-voltage detect (lvd) circuitry that’s used to create areset if v ccfalls below a vtripfvolt- age or doesn’t rise past a vtriprvolt- age. an lvd output of logic 1 indi-cates an improper v cc; it’s polled or used to reset the device.  four lvd configuration bits are located in the config1 register.because the ’908q devices run on 3 or5 v, a lvi5or3 bit changes the v trip levels for the different vcclevels. the lvipwrd bit enables/disables the lvdfunction, the lvitstd bit enables/dis-ables the device reset function, and thelvistop bit enables/disables the lvdfunction during stop mode. mon pin function is of the utmost impor- tance, especially on devices with lowpin counts. adding a monitor functionto a micro usually means dedicatingi/o to that function. the ’908q device checks the i/o state during resetrelease and uses i/o pta0 as a half-duplex serial communications channelfor user access to the preprogrammedmonitor program.  when the device is empty (i.e., erased), monitor mode is enteredusing an internal or external oscilla-tor without special voltages. after it’sprogrammed, monitor mode is forcedonly via an external oscillator and ahigh voltage on the irq input (v cc+ 2.5 up to vcc+ 4). serial communication is 9600 bps using an 8n1 format with the internaloscillator (or 9.83 mhz with the exter-nal oscillator). six commands are avail-able via the monitor rom: readmemory, write memory, ireadindexed read, iwrite indexed write,readsp read stack pointer, and runexecute user program.  each byte received from the host is echoed back for error checking. table 3lists the command opcode andwww.circuitcellar.com circuit cellar®issue 151   february 2003   73operands. a security feature prevents the unauthorized reading of flash mem-ory if the first 6 bytes after reset don’tmatch the bytes programmed in the$fff6-to-$fffd addresses (i.e., inter-rupt vectors). the host sends a break(10 zero bits) if a match is attained. asecurity failure will allow monitor com-mands, including the execution of amass erase function. thus, you canrecover control of the device withoutrevealing the programmed code.   i/o devices with low pin counts require a port pin to function in mul-tiple modes in order to achieve thehighest level of versatility. port pinsare configured as digital input or out-put (with the exception of pta2,which is only input) through the datadirection register (ddrx).  any input bit can have an internal pull-up that’s enabled via the port xpull-up enable register (ptxpue). allof port a’s inputs can be used as anexternal interrupt through the key-board interrupt module (kim). theseare configured for edge or level detectvia the modek bit in the keyboardstatus and control register (kbscr).  the keyf bit indicates input detec- tion and allows you to poll for thisaction. the imaskk bit enables/dis-ables the external interrupts. the portbits are read from or written to usingthe ptx (data register). bit 6 of ptahas a special function, the awul bitcan enable/disable an automatic wake-up from stop mode in the kim. adc the adc uses linear successive approximation to convert an analoginput into an 8-bit digital representa-tion in 16 adc clock cycles. analoginput is routed to the adc from oneof four bits via a multiplexer. themaximum adc frequency is 1 mhz.when the system execution cycle isfaster than 1 mhz, an adc prescaler (divide by 1/2/4/8/16) is used toreduce the adc clock. this adcsupports both single and continuouscommand op-byte operand return action read $4a adrsh:adrsl contents of specified address retrieve value located at 16-bit address write $49 adrsh:adrsl:data none put value into 16-bit address locationiread $1a none contents of next two addresses retrieve the next  two values located at the last 16-bit  (auto incrementing) address + 1 and address + 2 iwrite $19 data none put value into the last 16-bit address + 1readsp $0c none sp + 1 as 2 bytes sph:spl this allows you to locate the stack. you can alter the pc  loaded on the stack at sp+5:sp+6. run $28 none pulh and rti unload the stack and execute at pc table 3—six monitor commands are available. the half-duplex communications are handled on a single pin. note that the monitor will echo  each input byte received. cadsoft computer, inc., 801 s. federal highway, delray beach, fl 33483 hotline (561) 274-8355, fax (561) 274-8218, e-mail : info@cadsoftusa.comeagle 4.0 schematic capture • board layout autorouter 800-858-8355light standard professional layout schematic schematic +autorouter autorouterlayout + layout +layout +398$ 798$399$ 398$ 798$ 49$ 597$ 1197$199$prices pay the difference for upgradeseagle 4.0 light is freeware!eagle 4.0 light is freeware! http://www.cadsoftusa.comhttp://www.cadsoftusa.com/g87/g105/g110/g100/g111/g119/g115 /g105/g115 /g97 /g114/g101/g103/g105/g115/g116/g101/g114/g101/g100 /g116/g114/g97/g100/g101/g109/g97/g114/g107 /g111/g102 /g77/g105/g99/g114/g111/g115/g111/g102/g116 /g67/g111/g114/g112/g111/g114/g97/g116/g105/g111/g110 /g76/g105/g110/g117/g120 /g105/g115 /g97 /g114/g101/g103/g105/g115/g116/g101/g114/g101/g100 /g116/g114/g97/g100/g101/g109/g97/g114/g107 /g111/g102 /g76/g105/g110/g117/g115 /g84 /g111/g114/g118/g97/g108/g100/g115windows® for and you can use eagle light for testing and for non-commercial applications without charge. the freewareversion is restricted to boards up to half eurocard format,with a maximum of two signal layers and one schematicsheet. all other features correspond to those of theprofessional version. download it from our internet siteor order our free cd.the standard version is suitable for boards in eurocardformat with up to 4 signal layers the professional versionhas no such limitations.frustration? no, thanks. fun? yes, please. version 4.0 highlights /c33 /c33 /c33 /c33 /c33 /c33/c33/c33/c33new library management with component browser technology and package variants for components design your own commands via user language unlimited length for component names/values design rules define pad/via dimensions and shapes net classes for autorouter and drc minimum autorouter grid: 0.02 mm smd pads can be rounded or round different pad shapes for top, bottom, or inner layerssatisfied customers - the key to our success /c62 /c62 /c62/c62 /c62that´s why every new eagle version is based on the feedback from our customers that´s why all our customers have access to our highly acclaimed, comprehensive support, freeof charge that´s why eagle has no hidden costs for libraries or modules which prove to beindispensable after purchasing that´s why we really want customers to enjoy working with eagle that´s why eagle is one of the top-rated programs for schematic capture and boardlayout free115 timberlachen circle | lake mary, fl 32746 | 800·635·3355 | 407·262·0066 | fax 407·262·0069           dozens of embedded controllers with countless conﬁgurations to ﬁt any industry.     reduce your time to market.                                                                                                     minimize your time from conception to production by utilizing one of micromint’s market-proven controllers. whether your concerns are digital or analog, inputs or outputs, micromint has a product to ﬁt your needs. order quantities of one to thousands. custom design and conﬁgurations are available. with over 500,000 controllers in the marketplace, micromint has been providing innovative, turn-key solutions to the oem market for 24 years—from design through production, as well as packaging and shipping the ﬁnal product. our broad line of embedded controllers and turn-key solutions can turn your imagination into reality.           data sheets, online ordering and a complete catalog of products at...             visit our website @ www.micromint.com to see our complete line of oem solutions.   embeddedsolutions. www.micromint.com      startingaslowas $29–single qty      startingaslowas $39–single qty      startingaslowas $129–single qty     aslowas $7–1k qty                  basic interpreter (on board)assembly or ctiny: .85" x 2" sq.weather proofno dev. tools req.controllers            data acquisition ada, dac, i/o, rtc,lcd, keypad...stand aloneor networked  micro modules /l50298 /l50298 /l50298/l50298/l50298/l50298 /l50298 /l50298 /l50298                 56k down to 2400 baud socket modemsconexant comp.caller i.d.parallel linesensingrf modules - tiny                433 mhz 900 mhz x10 plix interfacers232 to rs485interface communications                  stackable - rtc backplane - bccbasic interpreterassembly or cprocessor boardsexpansion boardsrelay boards             3.5" x 3.5" custom configurableada, dac, optoisolated i/o, rtc,lcd, keypad...  controller boards /l50298 /l50298 /l50298/l50298 /l50298 /l50298 /l50298 /l50298 /l50298/l50298/l50298/l50298/l50298/l50298 /l50298 /l50298/l50298                      basic interpreter on a chipno dev tools req.x10 plix chips serialparallel 8051 core         low cost dip or plccfloating-point mathcommercial orindustrial  micromint chips  /l50298 /l50298 /l50298 /l50298 /l50298 /l50298/l50298/l50298www.circuitcellar.com circuit cellar®issue 151   february 2003   75conversion with a conversion-com- plete flag and interrupt available. as arule of thumb, wait one conversiontime between channel changes andenabling the adc. break if you want to create debugging tools, this module allows you to takecontrol of program execution. thebreak module is an address matchcheck with a jump to the swi vectorat $fffc:$fffd (or $fefc:$fefd inmonitor mode).  it would take several columns to explain how to use this module, soi’ll move on. just remember that thismodule is perfect if you enjoy gettingyour fingers dirty. demo kit motorola put together an impres- sive package to support the newnitron family. the 68hc908 demon-stration kit consists of a small pcboard with a ’908qt4. it’s poweredby a 9-v battery and has serial-levelshifters that allow you to connectdirectly to a pc’s com port. also,the device is preloaded with anapplication, so you can place the bat-tery on it and immediately knowthat all is well. in addition, motorola is working with metrowerks to give you a freeversion of the codewarrier ide thatsupports the nitron microcontrollerfamily. this special-edition toolsetfeatures the ide with a project man-ager for up to 32 files. whether youwork in assembly or ansi c, thesource debugger will make it easy toobtain clean code. also, built-in sta-tionary (templates) will help you getstarted immediately. p&e microcomputer systems tech- nology brings full-chip simulation andflash memory programming support tothe hardware kit. processor expertfrom unis lets you focus your effortsto the application code instead of thesystem peripherals by providing“beans.” the beans produce the codethat’s necessary for handling themicro’s peripheral by selecting a fewitems from the properties (i.e., physi-cal configuration) and methods (i.e.,routines required) menus. documentation the demonstration kit comes with two cds. the first cd, developed bymetrowerks, installs the codewarrieride software and contains all of thedocumentation you’ll need. the guidedtour (hc908qt4_tutorial) will helpyou get your first project off the ground.processor expert has an animated tuto-rial that will help you understand itsprocess. you’ll also find a cool beantrailer on the cd. (enough said.)   the newest and most useful (imho) part of the ide is the real-time simula-tor, which allows you to simulate hard-ware connected to the device beingsimulated. you’re free to choose from anumber of pre-made components like akeyboard, potentiometer, led, lcd, oroscilloscope. you can also make yourown. note that all of these operate inreal time to provide input to or getoutput from the simulator. the second cd contains documenta- tion for the demo kit hardware andother hardware tools that supportmotorola processors. included aredatasheets and manuals that cover allaspects of the devices. there are appli- cation notes specific to the nitronfamily in addition to notes on theother hc08 applications.   the motorola cd also contains product overviews and selectorguides that will help you choose theright part for your application (seetable 4). if you want to learn moreabout the nitron family of parts, thiscd has valuable information aboutthe monitor rom. after installing the codewarrier ide and following the tutorial, i unsolderedthe ’908qt4 from my kit’s pcb andsoldered a dip socket in its place. it’snot that i want to get rid of the part,but just the opposite: i want anotherdevice to be delivered. i want to usethis device in a new project, now! brace yourself watch out, everyone, here comes the 8-bit micro leader expanding itsreach into the low-end market. thenitron family will be tough to com-pete against. with flash memory andan hc08 architecture, this beast is apowerhouse shoehorned into 8- and16-pin shoes. with free tools and sub-$1 quantity prices, motorola hasrearmed itself for an attack. i jeff bachiochi (pronounced bah-key- ah-key) has been writing for circuitjeff bachiochi (pronounced bah-key- ah-key) has been writing for circuit cellar since 1988. his background includes product design and manu-facturing. he may be reached atjeff.bachiochi@circuitcellar.com. sources codewarrior development studiometrowerks, inc.(512) 997-4700www.metrowerks.com m68demo908qt4 demonstration board, nitron 8-bit hc08microcontroller familymotorola, inc.(847) 576-5000www.motorola.com processor expert unis, ltd.+420 5 41515777www.unis.czversions 68hc908qt1 68hc908qt2 68hc908qt4 68hc908qy1 68hc908qy2 68hc908qy4 flash memory 1.5 kb 1.5 kb 4 kb 1.5 kb 1.5 kb 4 kb adc — four-channel, 8-bit four-channel, 8-bit — four-channel, 8-bit four-channel, 8-bit package 8-lead 8-lead 8-lead 16-lead 16-lead 16-lead soic/pdip soic/pdip soic/pdip soic/pdip/tssop soic/pdip/tssop soic/pdip/tssop temperature range –40° to 85°c–40° to 85°c –40° to 85°c –40° to 125°c –40° to 125°c –40° to 125°c table 4—presently, there are six devices available in the motorola nitron microcontroller family: three 8-pin devices and three 16-pin devices. all of the devices are packaged in pdip, soic, and tssop (16-pin only).76 issue 151    february 2003 circuit cellar®www.circuitcellar.comlectrolumines- cent (el) lamps are devices that convert electrical energy into light or luminescence; the term lumi-nescence is generally associated withsolids that generate light. in the caseof electroluminescence, an electricfield (voltage) is applied to a thin phos-phor layer to produce light. the typi-cal lamp consists of light-emittingphosphor sandwiched between twoconductive electrodes. one of the elec-trodes is optically clear to allow lightto escape. as an ac voltage is appliedto the electrodes, the electric fieldcauses the phosphor to rapidly chargeand discharge, resulting in the emis-sion of light during each cycle.because the size and number of lightpulses depends on the magnitude ofapplied voltage and frequency, thebrightness of el lamps generally canbe controlled by varying the operatingvoltage and frequency. the nominal voltage and frequency for el lamps are 115 v and 400 hz,respectively. varying the lamp voltageor frequency will change the lampbrightness and, to some extent, thecolor. for example, increasing thevoltage increases lamp brightness,whereas increasing the frequency willincrease lamp brightness and shift thecolor slightly toward blue. however,increasing voltage and frequency willreduce lamp life.  el lamps do not catastrophically or abruptly fail; instead, the lamp bright-ness will gradually decrease over longperiods of use. el lamp life is affectedby voltage, frequency, temperature,and humidity. because el lamps gener-ally require drive voltages and frequen-cies not available from batteries or acline voltage, a conversion is needed toobtain optimum color and brightness.for battery operation, a dc-to-acvoltage frequency inverter is needed. i designed a simple el lamp driver circuit that uses the supertex hv826integrated circuit, which is able tohandle large loads. furthermore, thehv826 is designed to work with ellamps. [1] for all of the details, youshould read the datasheet.  the hv826 has a 1.8- to 3.5-v input supply voltage range. a ±80-v nominalregulated output voltage is applied tothe el lamp. this driver has only oneinductor and a minimum number ofpassive components. the hv826’slamp drive oscillator is separate fromthe power conversion oscillator, whichallows you to set the lamp drive fre-quency independently from the powerconversion frequency.  for many applications (e.g., mobile phones, two-way pagers, gps, andother wireless communicationdevices), optimizing the overall per-formance in this manner is necessary.figure 1 illustrates a fully optimizedsystem. you can use different inductor(l1) values or parts from differentmanufacturers in place of what isshown; however, it’s important tonote that the device’s switching fre-quency is fixed at 53.4 khz, and theinductor saturation current won’t evenbe approached at this frequency.  the design shown in figure 1 has excellent drive capability and providesa symmetrical bipolar drive, resultingin a zero-bias signal. many lamp man-ufacturers recommend a zero-biasdrive signal to avoid potential migra-tion problems and improve lamp life. if the inductor saturation current is lower than what the circuit or yourapplication requires, then the inductor e in this complicated world, quick solutionscan be lifesavers. d.prabakaran recentlydesigned a straightfor-ward el-lamp driverthat includes anhv826 integrated cir-cuit. with it, he canenhance backlightingapplications rangingfrom laptop displays tokeypad lighting.d. prabakaranshortsolutions simple el-lamp driverwww.circuitcellar.com circuit cellar®issue 151   february 2003   77or ic will be damaged. as with the inductor values, you can use differ-ent capacitor types (c2). using a dif-ferent capacitor type will generateaudible noise as a result of the piezo-electric effect caused by the materi-als used for their structure (e.g., x7r and 5yu capacitors).  you also have the option of using a capacitor of a different value. themanufacturer recommends using alarger value c2 capacitor (10 nf) forreference [1] supertex, inc., “high voltage el lamp driver,” november 2001.d. prabakaran earned a b.e. in mech-anical engineering, and now heads thedepartment of mechanical engineeringat n. l. polytechnic college, mettu-palayam in india. he likes to workwith amateur radio and electronics.he has published many  articles about his circuit designs. you may reach him at pabakar10@yahoo.com.   source hv826 integrated circuitsupertex, inc.(408) 744-0100www.supertex.comlarge el lamps orextremely high-inputvoltage ranges. smallervalue cs capacitorscan be used as long asthe overall efficiencyof the circuit is notdecreased. using largervalue capacitors won’tsignificantly affect the performance ofthe cir cuit. the circuit i designed consumesaround 15 to 20 maat 3 v, which may be derived from a battery. excessiveinput current may be a good indica-tion of connection errors or incorrectcomponent values. a sharp rise incurrent usually indicates a saturatedinductor. to avoid inductor satura-tion, use a high current rated inductoror increase the conversion frequencyby lowering the rsw resistor value.  this system can work for various backlighting applications, includingcalculator displays, laptop displays, figure 1— to keep today’s plethora of wireless communication devices up and running, you need to optimize your system. by using an integrated circuit like the supertex hv826, which has a lamp drive oscillator that’s separate from the power conversion oscillator, you can control the lamp drive frequency inde- pendently from the power conversion frequency. photographic transparencies, and com- puter peripheral displays. otheroptions include portable or stationaryadvertising displays, clock and watchdials, portable table lights, safety/res-cue apparel and accessories, and key-pad lighting. i78 issue 151   february 2003 circuit cellar®www.circuitcellar.comord comes down from on high: “we’ve got to network- enable our widget!” as a design engineer bombarded by management mandates, you maysometimes feel your job is not to rea-son why, only to do or die. but, whenit comes to getting embedded applica-tions on the i-way, believe me wheni say that you (and everybody elseinvolved) had better understand why,or you won’t know what to do.worse yet, you’ll do something you’ll be sorry you did. the fact is, your first response needs to be, “er, what exactly do youmean by network-enable?” thatshould give everybody something tochew on. let’s try to come up with afew answers as we take a look at agaggle of gadgets that, each in theirown way, bring the ’net to embeddedapps (see photo 1). ether or not over the last decade, most corpora- tions have had to migrate from whatev-er proprietary, ad-hoc networking lash-up they had before, some of which wereschemes going as far back as the bronzeage of the mainframe and minicom-working the ’net wtom cantrell shouldn’t everyengineerknow a lit-tle more about the process ofnetwork-enabling hisor her widget? tomdefinitely thinks so.with tom on yourside, you’ll be workingthe ’net to youradvantage in no time. siliconupdate puters. big-iron legacy applications and hardware die hard, so the transition typ-ically doesn’t happen overnight. it’s easier to change the wire than the proprietary software and 24/7devices behind it. in the course ofenterprise it reconfiguration, it’s nothard to imagine situations in whichthere is a need to maintain some pro-prietary rs-232-based hardware andsoftware across the transition totcp/ip and ethernet. consider an existing application with a factory-floor, rs-232 device—perhaps an electronic scale, ticketprinter, or bar code reader—hard-wiredto a pc. having run ethernet cablehither and yon, now what? neitherthe existing application software run-ning on the pc nor the rs-232 deviceknows anything about ethernet, notto mention the internet.  the solution is conceptually simple: turn the internet into a virtual rs-232cable with products like the lantronixcobox or i2chip igm7100. in essence,they’re rs-232-to-ethernet converters.connect one of them to the com porton your pc and one to the rs-232port on your embedded device. now,you’ve got ethernet jacks at each end,and you can plug in an ethernet cable,or for that matter, the entire internetin-between them.  the beauty of the scheme is that it’s transparent to the application hard-ware and software at each end. boththe pc and embedded device continueto talk to their uarts, blissfullyunaware that traffic is actually mov-ing over the network. you can cut back to just one adapter if the pc has a built-in ethernet port,which will be the most likely casegiven the entire scenario revolvesaround upgrading to a network.normally that would call for rewritingthe software on the pc to talk to theethernet instead of the com port. aneasier approach is to use com portredirector software that installs a driv-er to trap com port-related os callsand routes them via the ethernet port. that’s the approach i took, using the redirector software that came with thelantronix box. sure enough, i was ableto connect an existing rs-232-basedapplication to both the lantronix andwww.circuitcellar.com circuit cellar®issue 151    february 2003   79would allow the user to enter a desired temperature as well as displaythe actual current temperature. siteplayer makes an otherwise stat- ic page dynamic by embedding specialtags in the html. the tags, denotedby a caret ( ^), refer to variables that pass one-way or the other (or bothways) between the siteplayer webserver and your embedded device serv-er. for instance, in the thermostatexample, your web page could simplydisplay the following string:  the current temperature is  ^temp as siteplayer dishes up the web page, it will notice the ^temp variable and substitute the current value of thetemperature variable. siteplayer knows about the ^temp variable by virtue of a siteplayer definition file(extension .spd) that you cre-ate. along with various config-uration parameters (i.e., the ipaddress, whether or not to usedhcp or a password, etc.), the.spd file defines the locationand data type for each variable. on the device server side (i.e., rs-232), the embeddedsystem (e.g., thermostat)updates the ^temp variable using a simple protocol (com-mand and data) that accessessiteplayer’s internal memory.in the thermostat example,you would send the current temperature via the rs-232 tothe location in siteplayer cor-i2chip boards. everything worked just as advertised (i.e., exactly as beforewithout software changes). there is one thing to watch out for, though. the serial port on both ofthese converters is designed to plugdirectly into a pc to provide an alter-nate path (instead of ethernet) fordownloading and configuration. but,that means when you unplug yourembedded device from the pc’s comport and plug it into the converter’sserial port, you have to perform the olddte-dce switcheroo (i.e., swap the txand rx pins). don’t toss your rs-232breakout box just yet. the more thingschange the more they stay the same. web site lite i suspect that when the marketing department bangs on the table for net-working, they usually mean to say,“web browser enabling.” in otherwords, the ability to interrogate, con-trol, upgrade, and otherwise interactwith an embedded product using astandard web browser. these days, practically all embed- ded products have a user interface,whether it’s a full-featured, touch-screen display or a dip switch andblinking led. the user interface evencan be a pc with some kind of soft-ware making the connection, rangingfrom a simple terminal program to acustom-programmed gui. the advantage of the web-based approach is compelling. inshort, it puts the user-inter-face ball squarely in the user’scourt, which turns out to be awin-win for everyone. usersget to choose their favoritebrowsing platform, which istypically a pc but is inexorablyexpanding to include pdas,smart phones, web tvs, hand-held games, and ultimately justabout anything with a displayand input device.   meanwhile, the equipment supplier is relieved of the bur-den of having to make provi-sions for (and support) propri-etary software and hardwareat the user end. the engineer-ing spec is simple: add anethernet jack and cough up aweb page. all that’s left is to figure out the simplest, quick-est, and cheapest way to do it. netmedia targets this sce- nario with their siteplayer,which is notable for its laser-like focus. all nonessentialbaggage is tossed overboard inpursuit of the singular goal oftalking to a web browser.there’s no socket-level pro-gramming, e-mail, executionof user code (although theweb site alludes to a pro-gramming language in theworks), or anything else.thanks to it’s single-minded purpose,siteplayer gets by with a remarkablytiny bill of materials. it’s literallymade up of two chips: a standardphilips flash memory ’51 and a com-modity realtek ethernet mac chip. that’s not to say such a streamlinedthat’s not to say such a streamlined approach doesn’t come with somecompromises. for example, becauseyour siteplayer-based web site is lim-ited to the ’51’s 48-kb on-chip flashmemory, leave your bloated eye candyat home. nevertheless, with care youcan come up with up with an attrac-tive user interface that doesn’t bustthe bit budget (see photo 2). of course, serving up a mere static web page isn’t that hard nor is it veryuseful. you’ll generally want to dis-play or input dynamic data. forinstance, a web-enabled thermostat photo 1— moving clockwise from the top left, you can see the i2chip igm7100, lantronix cobox micro, netburner sb72, and siteplayer . these are evaluation setups with the base modules plugged into car- rier boards that include the rs-232 level shifter and connector , and, in the case of i2chip and siteplayer , the ethernet phy and connector . photo 2— if you keep your design tight, you can get siteplayer to serve up an appealing interface, even with only 48 kb of flash memory to play with.80 issue 151   february 2003 circuit cellar®www.circuitcellar.comof built-in objects that you can access. these include various ’51 resourcessuch as the on-chip special functionregisters and i/o lines along withhigher-level objects like com andspi. the former provides easy accessto the ’51’s uart. for instance, refer-ring back to photo 3, clicking onhello invokes a link that looks like: <a href="comtest.spi?com=  hello%20world%0d%0a" >hello</a> which sends the hello world string followed by a carriage return and linefeed out the uart. meanwhile, the spi object provides, as you might have guessed, access tospi peripheral ics. when using the spiobject, three of the eight availablesiteplayer ’51 i/o lines take on theclocked serial role (i.e., sck, mosi,and miso) with any or all of theremaining five lines used as spi chipselects. the manual contains exam-ples of the admittedly cryptic htmlneeded to perform a spi access, butalso explains that you may have to getyour hands dirty (e.g., java) to makemuch use of the cascade of bits associ-ated with a particular peripheral chip. there’s even a universal datagram protocol (udp) object that allows yourdevice to send, receive, and broadcastpackets to other udp-capable devices, including, of course, othersiteplayers. just rememberthat unlike tcp/ip, with udpthere are few guarantees interms of delivery and correct-ness, so you’ll have to hardenyour application against thepossibility of network errors. freshen up  the siteplayer package is reasonably friendly and easy touse, all the more so by virtueof some handy utilities thatstreamline development. thestandard flow is to define yourvariables and such in theaforementioned siteplayer def-inition file (.spd) and then cre-ate your web page using a combination of web-authoringtools and tweaking the result-responding to the ^temp variable as defined in the .spd file. now, the next time the page is refreshed the currenttemperature will be displayed. of course, as soon as you’ve crafted a simple character-oriented interface,the call will come down from on highto spiff it up with graphics for a moreglamorous first impression. thesiteplayer allows you to, for example,replace a simple numeric variable withits virtual seven-segment led equiva-lent. photo 3 shows a web page inwhich varis defined as a byte dis- played as a decimal number ofup to three digits (i.e., 0–255).  siteplayer allows you to pick off individual digits usinga colon notation ( :). examples include ^var:3 , ^var:2 , and ^var:1 . in turn, the digits are grafted onto the file namecalling out a particular ledimage file. for instance, if thevalue of the variable is 234,^var:1_led.jpg will bring in the file 4_led.jpg, which isthe bitmap image of an ledshowing the number four. avariety of useful image files(e.g., seven-segment leds,sliders, and knobs) come withthe siteplayer software. as usual, the complexity (if not the devil) is in the details.using word as my web pageauthoring tool, i couldn’t find a way to generate the colon syntax. thus, i hadto edit the html directly, something iimagine is required for some of theother fancy constructs as well. also, iwas unable to come up with a schemeto blank leading led zeros. there maybe a way for users to kludge around it,but i would say this is a feature thatshould be added to the tools.  com spi with me besides user-defined objects like variables, siteplayer offers a number photo 3— a key siteplayer technique is to parse the numeric value of a variable to create a file name that references a graphic file, in this case a seven-segment led. meanwhile, the serial t ester utility facilitates pc-based debug- ging by allowing easy access to variables and monitoring the associated rs-232 command and response packets. photo 4— with a tcp/ip stack and gnu development tools, netburner can do it all. for example, turning your embedded gadget into an ftp server provides an easy way to move application data to or from a file. just copy and paste.www.circuitcellar.com circuit cellar®issue 151    february 2003   81ing html. put the html and all other files associated with yoursiteplayer web site (e.g., the seven-segment led .jpg files and any othergraphics) in a folder and call up thesitelinker program. sitelinker chews on your web site folder and spits out a siteplayer binary(.spb) file that’s downloaded into the’51’s flash memory via the network.refresh your web browser to see the results and repeat the cycle as necessary. as i mentioned earlier, siteplayer web sites are limited to 48 kb by theconfines of the ’51’s on-chip flashmemory. that means you have to becareful about going overboard withfancy graphics, long file names, and soon. the good news is that the 48-kblimit translates into a reasonablyquick link-download-reflash cycle thattakes only 20 to 30 s. nevertheless, even a relatively minor delay inhibits the quick itera-tion that’s called for by the artisticexercise of creating a web page, not tomention the tweak-and-try personali-ty of the siteplayer tools. to that end,the siteplayerpc utility providedessentially turns the pc into a bigsiteplayer, allowing you to run yourweb site .spd binary file in situ. similarly, the serial tester utility allows development to proceed usingthe pc com port as a stand-in for theembedded device that ultimately willbe connected to the siteplayer’s serialport. the utility allows easy access(get and put) to siteplayer objects.it also displays the commands andresponses traveling across the seriallink, which is valuable assistance whenyou’re writing the serial interface codethat runs on your own device. burning down the ’net the previously described products are all designed to ease the process ofmigrating an existing applicationtoward a network-based solution.eventually, or if you’re starting fromscratch, the time will come to consid-er consolidating your embedded appli-cation processing and networking torun on a single processor. enter netburner. despite it’s small size (and price), don’t be fooled. based on a 66-mhz motorola mc5272 cold-fire chip (see figure 1), netburner is astand-alone 32-bit sbc with up to512 kb of flash memory and a whop-ping 8 mb of sdram. under the hoodis a full-blown rtos (µc/os) and com-plete tcp/ip stack. here, you’ll findevery letter in the alphabet soup of pro-tocols that handle web serving, e-mail,file transfer (i.e., ftp), and all the rest. what separates netburner from many other 32-bit sbcs are specificutilities, libraries, and applicationexamples that tailor the device forquick and easy (or at least quicker andeasier) internet apps. tools start withthe familiar gnu toolchain, includinga c compiler, assembler, debugger,linker, and so on. however, those ofyou who have dabbled with gnubefore know that merely manhandlingthe tools, not to mention getting anywork done, is a nontrivial task. to make life easier, netburner comes with a predefined make script that handles the messy details.notably, this includes consolidating join the conversation.  give your programmable instruments the command language of  choice, supported by major manufacturers and familiar to customers.   talk the language. talk scpi with jpa-scpi parser.   the scpi command language presents your  instruments with a familiar and professional programming interface, reducing support needs and reinforcing your position as a truly proficient manufacturer.    in the past, the power and flexibility of the scpi language meant employing a consultant or spending days and weeks writing an inter-preter in-house.   not any more.    using jpa-scpi parser, your own developers are empowered to build a full scpi interpreter for your instruments quickly, easily and at  very low cost.    more than just a source code library, jpa-scpi parser is a complete software toolkit to give you scpi capability in the shortest time.  take a look at some of the highlights  xsuitable for any peripheral interface  e.g. gpib, rs232, usb etc.xsuitable for any peripheral interface  e.g. gpib, rs232, usb etc.  xworks on almost any processor/platform  xminimal rom & ram requirements  xwritten in c, fully ansi/iso compliant  xno royalties / runtime fees  xfully compliant to current scpi standard what’s included  xc source code comprising the parser itself  and access functions  xtemplate command sets for 10 common types of instrument  xbase template suitable for all instruments  xexample source code  xcomprehensive user manual to take you through each stage to your scpi parser  xdesign notes manual  xunlimited royalty-free runtime licenses  xfree technical support and product upgrades for 1 year           pricing  single-brand site license, allowing use of  jpa-scpi parser for an unlimited number of your company’s instruments:        $495     a multi-brand site license is available for  consultancy houses:      $2475     jpa consulting  accelerating product development   try jpa-scpi parser today.  download our demo application to see  for yourself just what it can do.  available from our website.  for full details or to purchase, visit  www.jpacsoft.comwww.circuitcellar.com circuit cellar®issue 151    february 2003   83if you just want to put a web- friendly face in front of your existinghardware with minimal softwarechanges, web browser enabling isreally what you’re talking about.the netmedia siteplayer is designedto do just that. and although i didn’tget into it this time, note that easye-mail enabling is also an optionwith products from the likes ofconnectone and cermetek. maybe you’re starting from scratch and need a full-blown, internet-enabled solution that can handle anyand all protocols (e.g., web, e-mail,and ftp) as well as your applicationprocessing. that calls for a full-blown computing platform (à lanetburner) with sufficient memoryand mips to carry the load. yes, there are a lot of questions to work through, but take heart. thegood news is that for every questionyou come up with there are folks working hard to make sure you canfind just the right answer. i sources igm7100 serial-to-ethernet gate- way modulei2chip, inc.(408) 432-5081www.i2chip.com cobox micro device server lantronix, inc.(949) 453-3990 www.lantronix.com mc5272 coldfire microprocessor motorola, inc.(847) 576-5000www.motorola.com sb72 serial-to-ethernet device  netburner, inc.(858) 558-0293www.netburner.com siteplayer ethernet web server netmedia, inc.(520) 544-4567www.siteplayer.comtom cantrell has been working on chip, board, and systems design andmarketing for several years. y ou mayreach him by e-mail at tom.cantrell@cir-cuitcellar.com. and compressing all related applica-tion and web files for packing intothe flash memory. then, after reset,netburner decompresses and trans-fers the code to sdram, which, inconjunction with the ’5272’s high-speed on-chip cache and ram,delivers speedy processing. for dynamic web pages, feel free to use all of the highfalutin tech-niques—such as java applets, com-mon gateway interface (cgi), andsocket-level programming—thatthis 32-bit processor and its megsof memory can support. justremember that even though theplatform is downsized, such big-iron programming isn’t for begin-ners or the faint of heart.   netburner offers an easier way out with a “tagged html” approachsimilar to the one i described earlierfor siteplayer. the difference is thatthe netburner tags, rather than justdisplaying variables and objects, per-form a c function call for unlimitedprocessing capability (see listing 1). aparticular item that appears on theweb browser’s screen might have 10or 10,000 lines of code behind it. i was impressed with the collec- tion of nearly two-dozen exampleapplications. they encompass every-thing from the simplest hello worlddemo to e-mail, telnet, ppp, udp,ftp, and much more (see photo 4). there’s just no better way to learnhow to do something than to see howit’s done, and the examples will proveto be a helpful starting point for yourown application. have it your way having seen the variety of choices, i think you can understand thatthere’s more to getting your applica-tion on the i-way than meets theeye. the question of whether or notto do it is the easiest to answer—aresounding “yes” in my opinion—but only the first.  perhaps you’ve got a legacy serial port app and simply want to changethe wire with no intention of upgrad-ing the hardware or software beyondthat. if so, ethernet enabling is theway to go with a simple convertersuch as the lantronix cobox ori2chip igm7100. listing 1— netburner’s approach to dynamic web pages embeds tagged c function calls in the html. <html> <b>click on the boxes <br>to toggle the leds on the netburner board<table border=1><tr><!--functioncall doleds --> </tr></table><br>dip switches:<!--functioncall doswitches --> </body></html>1k  i-cache 4k  sram 10/100  ethernet  controller dma usb1.1  module  three  pwms two  uartsmac  h/w   divde jtagdebug  module dmafour  timers software hdlc  modulesystem  bus  controller interrupt   controller sram  controller and  chip select general-  purpose i/o qspi four  tdmsi addr gen i fetchdivde jtagdebug  module dmafour  timers software hdlc  modulesystem  bus  controller interrupt   controller sram  controller and  chip select general-  purpose i/o qspi four  tdmsi addr gen i fetch instr buf dec and sel op a general  and exv2 figure 1— where’s the kitchen sink? the motorola mc5272 at the heart of netburner is a networking workhorse with built-in ethernet, usb, spi, and uarts.84 issue 151     february 2003 circuit cellar®www.circuitcellar.com i/g49/g6e/g73/g65/g72/g74/g2d/g72/g65/g61/g64/g79/g20/g53/g69/g6e/g67/g6c/g65/g20/g42/g6f/g61/g72/g64/g20/g43/g6f/g6d/g70/g75/g74/g65/g72/g20/g6d/g6f/g64/g75/g6c/g65/g73/g20/g69/g6e/g20/g73/g75/g62/g2d/g6d/g69/g6e/g69/g61/g74/g75/g72/g65 /g64/g69/g6d/g65/g6e/g73/g69/g6f/g6e/g73/g20/g28/g61/g73/g20/g73/g6d/g61/g6c/g6c/g20/g61/g73/g20/g34/g37/g78/g35/g35/g20/g6d/g6d/g29/g20/g70/g6f/g70/g75/g6c/g61/g74/g65/g64/g20/g62/g79/g3a /g38/g2d/g62/g69/g74/g3a/g41/g44/g75/g43/g38/g31/g32/g2c/g20/g41/g54/g38/g39/g43/g35/g31/g43/g43/g30/g31 /g2c/g20/g44/g53/g38/g30/g43/g33/g39/g30/g2c/g20/g50/g38/g37/g43/g35/g39/g31/g2c /g50/g38/g39/g43/g35/g31/g52/g78/g32/g2c/g20/g50/g38/g39/g43/g36/g36/g78/g2c/g20/g50/g38/g39/g43/g35/g31/g4d/g58 /g31/g36/g2d/g62/g69/g74/g3a/g43/g31/g36/g37/g43/g52/g2c/g20/g43/g31/g36/g37/g43/g53/g2c/g20/g58/g43/g31/g36/g31/g43/g4a/g2c/g20/g58/g43/g31/g36/g37/g43/g49/g2c/g20/g50/g58/g41/g43/g33/g2c/g20/g50/g58/g41/g47/g34/g39/g2c /g53/g54/g31/g30/g46._/g31/g36/g38/g2c/g20/g53/g54/g31/g30/g46._/g32/g36/g39 /g33/g32/g2d/g62/g69/g74/g3a/g41/g54/g39/g31/g4d/g35/g35/g38/g30/g30/g41/g20 /g28/g41/g52/g4d/g37/g54/g44/g4d/g49/g20/g63/g6f/g72/g65/g29 /g2c/g20/g45/g6c/g61/g6e/g20/g53/g43/g35/g32/g30 /g2c/g20/g4d/g50/g43/g35/g35/g35/g2c /g4d/g50/g43/g35/g36/g35 i/g61/g70/g70/g6c/g69/g63/g61/g62/g6c/g65/g20/g63/g6f/g6e/g74/g72/g6f/g6c/g6c/g65/g72/g20/g73/g69/g67/g6e/g61/g6c/g73/g20/g65/g78/g74/g65/g6e/g64/g20/g74/g6f/g20/g73/g74/g61/g6e/g64/g61/g72/g64/g20/g70/g69/g6e/g20/g68/g65/g61/g64/g65/g72/g20/g28/g32/g2e/g35/g34 /g6d/g6d/g29/g20/g6f/g72/g20/g68/g69/g67/g68/g2d/g64/g65/g6e/g73/g69/g74/g79/g20/g4d/g6f/g6c/g65/g78/g20/g28/g30/g2e/g36/g32/g35/g20/g6d/g6d/g29/g20/g63/g6f/g6e/g6e/g65/g63/g74/g6f/g72/g73/g2c/g20/g65/g6e/g61/g62/g6c/g69/g6e/g67/g20/g53/g42/g43 /g20/g74/g6f/g20/g62/g65/g20/g70/g6c/g75/g67/g67/g65/g64/g20/g6c/g69/g6b/g65/g20/g61/g20/g93/g62/g69/g67/g20/g63/g68/g69/g70/g94/g20/g69/g6e/g74/g6f/g20/g4f/g45/g4d/g20/g74/g61/g72/g67/g65/g74/g73 i/g4c/g6f/g77/g20/g45/g4d/g49/g20/g64/g65/g73/g69/g67/g6e /g20/g61/g63/g68/g69/g65/g76/g65/g64/g20/g76/g69/g61/g20/g47/g4e/g44/g20/g63/g69/g72/g63/g75/g69/g74/g72/g79/g2c/g20/g6d/g75/g6c/g74/g69/g2d/g6c/g61/g79/g65/g72/g20/g50/g43/g42/g2c/g20/g62/g79/g2d /g70/g61/g73/g73/g20/g63/g61/g70/g61/g63/g69/g74/g6f/g72/g20/g67/g72/g69/g64/g20/g61/g6e/g64/g20/g73/g68/g6f/g72/g74/g20/g73/g69/g67/g6e/g61/g6c/g20/g74/g72/g61/g63/g65/g73/g20/g61/g63/g68/g69/g65/g76/g65/g64/g20/g76/g69/g61/g20/g73/g6d/g61/g6c/g6c/g66/g6f/g6f/g74/g70/g72/g69/g6e/g74/g20/g61/g6e/g64/g20/g75/g73/g65/g20/g6f/g66/g20/g30/g34/g30/g32/g20/g53/g4d/g44/g20/g70/g61/g73/g73/g69/g76/g65/g20/g63/g6f/g6d/g70/g6f/g6e/g65/g6e/g74/g73 i/g33/g32/g20/g4b/g42/g20/g74/g6f/g20/g36/g34/g20/g4d/g42/g20/g65/g78/g74/g65/g72/g6e/g61/g6c/g20/g53/g52/g41/g4d/g20/g61/g6e/g64/g20/g46._/g6c/g61/g73/g68/g20/g28/g63/g6f/g6e/g74/g72/g6f/g6c/g6c/g65/g72/g2d/g64/g65/g70/g65/g6e/g64/g65/g6e/g74/g29 i/g43/g41/g4e/g2c/g20/g45/g74/g68/g65/g72/g6e/g65/g74/g2c/g20/g52/g53/g2d/g32/g33/g32/g20/g61/g6e/g64/g20/g52/g53/g2d/g34/g38/g35/g20/g69/g6e/g74/g65/g72/g66/g61/g63/g65/g73/g3b/g20/g41/g44/g43/g2c/g20/g44/g41/g43 /g28/g63/g6f/g6e/g74/g72/g6f/g6c/g6c/g65/g72/g2d/g64/g65/g70/g65/g6e/g64/g65/g6e/g74/g29/g3b/g20/g66/g72/g65/g65/g6c/g79/g2d/g61/g76/g61/g69/g6c/g61/g62/g6c/g65/g20/g2f/g43/g53/g20/g61/g6e/g64/g20/g49/g2f/g4f/g20/g6c/g69/g6e/g65/g73 i/g61/g76/g61/g69/g6c/g61/g62/g6c/g65/g20/g69/g6e/g20/g52/g61/g70/g69/g64/g20/g44/g65/g76/g65/g6c/g6f/g70/g6d/g65/g6e/g74/g20/g4b/g69/g74/g20 /g69/g6e/g63/g6c/g75/g64/g69/g6e/g67/g20/g44/g65/g76/g65/g6c/g6f/g70/g6d/g65/g6e/g74/g20/g42/g6f/g61/g72/g64/g2c/g41/g43/g20/g61/g64/g61/g70/g74/g65/g72/g2c/g20/g73/g65/g72/g69/g61/g6c/g20/g63/g61/g62/g6c/g65/g20/g61/g6e/g64/g20/g53/g50/g45/g43/g54/g52/g55/g4d/g20/g43/g44/g20/g77/g69/g74/g68/g20/g65/g76/g61/g6c/g20/g73/g6f/g66/g74/g77/g61/g72/g65/g74/g6f/g6f/g6c/g73/g2c/g20/g65/g6c/g65/g63/g74/g72/g6f/g6e/g69/g63/g20/g64/g6f/g63/g75/g6d/g65/g6e/g74/g61/g74/g69/g6f/g6e/g20/g61/g6e/g64/g20/g64/g65/g6d/g6f/g73 i/g53/g74/g69/g63/g6b/g20/g49/g74/g20/g49/g6e/g21/g3a/g20/g69/g6e/g73/g65/g72/g74/g2d/g72/g65/g61/g64/g79/g20/g50/g48/g59/g54/g45/g43/g20/g53/g42/g43/g20/g6d/g6f/g64/g75/g6c/g65/g73/g20/g61/g63/g63/g6f/g6d/g70/g61/g6e/g79/g20/g79/g6f/g75 /g66/g72/g6f/g6d/g20/g65/g76/g61/g6c/g75/g61/g74/g69/g6f/g6e/g20/g74/g68/g72/g6f/g75/g67/g68/g20/g70/g72/g6f/g74/g79/g70/g69/g6e/g67/g20/g74/g6f/g20/g65/g6e/g64/g20/g70/g72/g6f/g64/g75/g63/g74/g69/g6f/g6e/g2e/g2e/g2e/g61/g63/g63/g65/g6c/g65/g72/g61/g74/g69/g6e/g67/g20/g79/g6f/g75/g72/g20/g64/g65/g73/g69/g67/g6e/g20/g63/g79/g63/g6c/g65/g20/g61/g6e/g64/g20/g72/g65/g64/g75/g63/g69/g6e/g67/g20/g79/g6f/g75/g72/g20/g74/g69/g6d/g65/g2d/g74/g6f/g2d/g6d/g61/g72/g6b/g65/g74 www.phytec.comphycore® new generation single board computer (800) 278-9913 phytec america, llc     i   203 parfitt  way sw, g100   i    bainbridge island, wa  98110   usa idea box the directory of products and services ad format : advertisers must furnish digital submission sheet and digital files that meet the specifications on the digital submission sh eet.  all text and other elements must fit within a 2 ″″ ××3″″format. call for current rate and deadline information. send your disk and digital submis- sion sheet to: idea box, circuit cellar, 4 park street, vernon, ct 06066 or e-mail kc@circuitcellar.com. for more information c all sean donnelly at (860) 872-3064.  suppliers directory now available online. check out our web site  www.circuitcellar.com to see who has what and how to get it!www.circuitcellar.com circuit cellar®issue 151     february 2003   85 /g50/g43/g20 /g4b/g45/g59/g42/g4f/g41/g52/g44/g20 /g45/g4d/g55/g4c/g41/g54/g49/g4f/g4e /g49/g6e/g74/g65/g72/g66/g61/g63/g65/g20/g4b/g65/g79/g70/g61/g64/g73/g2c/g20/g53/g77/g69/g74/g63/g68/g65/g73/g2c/g20/g6f/g72/g20/g52/g53/g2d/g32/g33/g32/g20/g74/g6f/g20/g79/g6f/g75/g72/g20/g50/g43/g20/g4b/g65/g79/g62/g6f/g61/g72/g64/g20/g49/g6e/g70/g75/g74 /g4d/g4f/g44/g45/g4c/g20/g4b/g45/g32/g34/g4f/g4e/g4c/g59/g20/g24/g39/g39/g39/g35 /g95/g20/g55/g70/g20/g74/g6f/g20/g31/g32/g20/g78/g20/g31/g32/g20/g6d/g61/g74/g72/g69/g78/g20/g95/g20/g50/g72/g6f/g67/g72/g61/g6d/g6d/g61/g62/g6c/g65/g20/g95/g20/g52/g53/g2d/g32/g33/g32/g20/g50/g6f/g72/g74/g20/g95/g20/g4d/g61/g63/g72/g6f/g20/g43/g61/g70/g61/g62/g69/g6c/g69/g74/g79 /g54/g68/g65/g20/g4b/g45/g32/g34/g20/g69/g73/g20/g74/g68/g65/g20/g75/g6c/g74/g69/g6d/g61/g74/g65/g20/g69/g6e/g20/g66/g6c/g65/g78/g69/g62/g69/g6c/g69/g74/g79/g2e/g20/g49/g6e/g70/g75/g74/g73/g20/g6f/g72/g20/g73/g65/g72/g69/g61/g6c/g20/g64/g61/g74/g61/g20/g63/g61/g6e /g65/g6d/g75/g6c/g61/g74/g65/g20/g61/g6e/g79/g20/g6f/g66/g20/g74/g68/g65/g20/g31/g30/g31/g20/g6b/g65/g79/g73/g20/g66/g72/g6f/g6d/g20/g61/g20/g73/g74/g61/g6e/g64/g61/g72/g64/g20/g6b/g65/g79/g62/g6f/g61/g72/g64/g2e /g4d/g4f/g44/g45/g4c/g20/g4b/g45/g31/g38/g4f/g4e/g4c/g59/g20/g24/g34/g34/g39/g35 /g95/g20/g55/g70/g20/g74/g6f/g20/g39/g20/g78/g20/g39/g20/g6d/g61/g74/g72/g69/g78/g20/g95/g20/g32/g2e/g35/g22/g20/g78/g20/g33/g2e/g30/g22/g20/g53/g69/g7a/g65/g20 /g95/g20/g50/g43/g20/g4b/g65/g79/g62/g6f/g61/g72/g64/g20/g50/g6f/g72/g74/g20/g95/g20/g50/g43/g58/g54/g2c/g20/g41/g54/g20/g43/g6f/g6d/g70/g61/g74/g69/g62/g6c/g65 /g54/g68/g65/g20/g4b/g45/g31/g38/g20/g63/g6f/g6d/g62/g69/g6e/g65/g73/g20/g61/g20/g6d/g75/g6c/g74/g69/g74/g75/g64/g65/g20/g6f/g66/g20/g66/g65/g61/g74/g75/g72/g65/g73/g20/g77/g69/g74/g68/g20/g73/g6d/g61/g6c/g6c/g20/g73/g69/g7a/g65/g20/g61/g74/g20/g61/g6e/g65/g63/g6f/g6e/g6f/g6d/g69/g63/g61/g6c/g20/g70/g72/g69/g63/g65/g2e/g20/g20/g43/g75/g73/g74/g6f/g6d/g20/g75/g6e/g69/g74/g73/g20/g61/g76/g61/g69/g6c/g61/g62/g6c/g65/g2e /g48/g41/g47/g53/g54/g52/g4f/g4d /g45/g4c/g45/g43/g54/g52/g4f/g4e/g49/g43/g53 /g31/g31/g20/g46._/g69/g64/g64/g6c/g65/g72/g73/g20/g47/g72/g65/g65/g6e /g4c/g61/g6e/g73/g69/g6e/g67/g2c/g20/g4e/g59/g20/g31/g34/g38/g38/g32/g54/g6f/g6c/g6c/g20/g46._/g72/g65/g65/g3a/g20/g38/g38/g38/g2d/g36/g39/g30/g2d/g39/g30/g38/g30 /g50/g68/g6f/g6e/g65/g3a/g20/g36/g30/g37/g2d/g35/g33/g33/g2d/g34/g34/g34/g31/g20/g20/g46._/g61/g78/g3a/g20/g36/g30/g37/g2d/g35/g33/g33/g2d/g34/g34/g34/g33 /g77/g77/g77/g2e/g68/g61/g67/g73/g74/g72/g6f/g6d/g65/g6c/g65/g63/g74/g72/g6f/g6e/g69/g63/g73/g2e/g63/g6f/g6d bob-3 is a team player. bob-3 will only say what you want.bob-3 plays well with ntsc and pal.bob-3 is your new best friend. decade engineering's new bob-3 module  easily overlays text on video. bob-3 displays  up to 17 lines of 40 characters, including 63 custom characters. other features include vertical scrolling, a stand-alone display option,  faster serial communication, automatic video  generation, and much more. get to know bob-3 at  www.decadenet.commeet bob-3. decade engineering 503-743-3194 turner, or, usa86 issue 151     february 2003 circuit cellar®www.circuitcellar.comwww.circuitcellar.com circuit cellar®issue 151     february 2003   8788 issue 151     february 2003 circuit cellar®www.circuitcellar.comwww.circuitcellar.com circuit cellar®issue 151     february 2003   8990 issue 151     february 2003 circuit cellar®www.circuitcellar.com /g4a/g4b /g20/g6d/g69/g63/g72/g6f/g73/g79/g73/g74/g65/g6d/g73call 530-297-6073 email  sales @jkmicro.com on the web at www.jkm icro.com/g6c/g20flashlite 186 controller /g6c/g20borland c/c++ ver 4.52 /g6c/g20free email tech support /g6c/g20serial driver library /g6c/g20ac adapter and cable/g6c/g20186 processor @ 33 mhz /g6c/g20dos w/ flash file system /g6c/g2044 digital i/o lines w/ cpld /g6c/g20console / debug serial port /g6c/g207-34v dc or 5v dc power /g6c/g20accepts 8mb diskonchip /g6c/g20512k dram & 512k flash /g6c/g20expansion options with peripheral boards/g46._/g6c/g61/g73/g68/g6c/g69/g74/g65 /g6c/g202 serial ports /g6c/g202 16-bit timers /g6c/g20watchdog timer/g31/g38/g36 development  system$99$69  qty 1 /g44/g65/g76/g65/g6c/g6f/g70/g6d/g65/g6e/g74/g20/g6b/g69/g74/g20/g69/g6e/g63/g6c/g75/g64/g65/g73/g3a r e   swww.circuitcellar.com circuit cellar®issue 151     february 2003   91 front panels? www.frontpanelexpress.comdownload the free ›front panel designer‹ to design your front panels in minutes order your front panels online and receive them just in timeunrivaled in price andquality for small orders email: sales@picofab.net92 issue 151     february 2003 circuit cellar®www.circuitcellar.comwww.circuitcellar.com circuit cellar®issue 151     february 2003   93 /g52/g53/g32/g33/g32 /g74/g6f/g20/g57/g69/g6e/g64/g6f/g77/g73 winwedge inputs real-time serial data from any device direct into excel, access, vbor  any windows program. www.taltech.com new ce version!mcs-51 sbc for the classroom— part 2: software development updating the home control system— part 1: fpga upgrade board intelligent light–effects controller for entertainment systems2-d optical position sensora look at computer virusesusing rotary encoders as input devicesbuild your own mp3iapplied pcs: get hooked on video with the stv5730a ifrom the bench: the switching approach—infiltrating the linear supply market isilicon update: not fading awaypreview of march issue 152 theme: signal processing 94 issue 151     february 2003 circuit cellar®www.circuitcellar.comindex 91 abacom technologies 41 acon, inc.85 activewire, inc.49 all electronics corp.86 amazon electronics92 ap circuits90 appspec computer tech. corp.50 arcturus networks24 arcom 7 atmel 90 bagotronix, inc. 85,95 basic micro 90 bellin dynamic systems, inc.73 cadsoft computer, inc.93 ccs-custom computer services92 conitec29 connecticut mircocomputer, inc.91 cyberpak co. 9 cypress microsystems 89 cwav90 datarescue85 decade engineering87 delcom engineering86 digital products 1 earth computer technologies 86 ee tools  (electronic engineering tools) 77 emac, inc.25 expresspcbthe advertiser’s index with links to their web sites is located at www.circuitcellar.com under the current issue. page 85 fdi-future designs, inc. 17 flash innovation 200391 front panel express85 hagstrom electronics65 hi-tech software, llc91 hvw technologies inc.16 icop technology inc.87 imagecraft 91,92 intec automation, inc. 90 intronics, inc.51 intuitive circuits, llc66 jameco 64,90 jk microsystems, inc. 81 jpa consulting ltd.51 jr kerr automation & engineering52 labjack corp.52 lakeview research88 lemos international 2 link instruments 93 lynxmotion, inc.72 maxstream89 mcc (micro computer control)29 microchip90 microcross89 micro digital, inc.92 microengineering labs, inc.74 micromint85 microsystems development, inc.84 mindtel llc 87 mjs consulting57 motorola17 motorola contest82 mvs93 mylydia inc. c2 netburner 87 okw electronics, inc.67 on time86 ontrak control systems25 pcbexpress58 pcbpro c4 parallax, inc. 84 phytec america llc84 phyton, inc.91 picofab inc.88 pioneer hill software48 polydroids90 prairie digital, inc.89 pulsar, inc.84 qkits.com89 r2 controls26 r4 systems inc.15 rabbit semiconductor93 radovan robotics58 remote processing67 rf digital89 rlc enterprises, inc. page page pageadvertiser’s 92 rutex 5 saelig company3 scott edwards electronics inc. 88 sealevel systems86 senix corp.85 sensory, inc.84 signum systems86 softools92 spectrum engineering84 square 1 electronics88 sumbox pty ltd.93 tal technologies c3 tech tools 32,33 technologic systems 86 technological arts88 tern inc.90 triangle research int’l, inc.77 trilogy design52 trinity robotics contest93 weeder technologies71 wireless systems design conference91 xeltek 87 z-world51 zagros robotics86 zanthic technologies inc.23 zilog, inc april issue 153 deadlines space close: feb. 10 material due date: feb. 17 theme: roboticsattentionadvertisers call sean donnelly to reserve your space! 860.872.3064 e-mail: sean@circuitcellar.comave you ever thought about how much the evolution in communication technology affects the way you live today? perhaps the remotest we can be from today’s information age is going back to the days of the greeks. let’s face it. communication technology back then wasn’t much more than determining who could yell the loudest. their idea of “advanced technology” meant adding the mechanical acoustics of an amphitheater. crude but effective. remote communication was an even more difficult task. doing something as ordinary as trying to gather government representative s together for a meeting involved sending messengers to the far corners of the land and waiting days or even weeks for replies. w hen the mes- senger reached his destination, he personally exchanged the message in the presence of the recipient. from there, the messenger  returned the response. of course, this presumed that the messenger didn’t meet with the ancient equivalent of a spam filter, where he wa s killed based on the recipient’s opinion of the message. the first real revolutionary advance in communication technology was the telegraph. instead of purely mechanical enhancements, it com- bined ideas of electricity and mechanical signaling as a method of sending distant communications. and, although it was a first  step towards modern-day communication technology, an operator still had to translate the morse code into written language and then hand deli ver the mes- sage to the recipient.  pre-information age people had a completely different view of the role of communications than we do today. when individuals com municat- ed over long distances, they expected long delays and simply waited. no one really seemed to be in a hurry to do things. commun ication was an extension of the natural use of language and not an independent tool that grants universal access and demands instant respon se.  information age society has a decidedly unique view of the world, and it has radically affected the way we interact with each o ther. today, we communicate without leaving the comforts of the home and with little special effort. we can communicate with 100 people with out ever seeing a face or hearing a voice. one hundred years ago, the rising sun determined the workday. and, although we might view it as a difficult existence, it was decidedly slower paced and far more interactive. today, it’s a 24/7 world where too many of us need it to be 30/7. the internet and other forms of enhanced communication have altered the nature of our interactions and concept of time. today, we define time by its accomplishment-value, not just the passing of seconds. the fact that the mechanical efficiency of communicating has  improved doesn’t necessarily make us feel like we’re accomplishing more. despite the fact that we are indeed saving time, we continually  pack our lives with more and more things to do in order to preserve this value. we’ve been communicating since the first of our species could talk. how we do it affects our personal relationships and all the  others around us. advanced technology has altered our lives and our mind-set.  in the future, communication technology will offer even more choices. people once had to rely on face-to-face communication, be cause they had no other alternative. today, the internet allows us to be physically remote yet totally connected to the world. at the rate  we’re going, it is not inconceivable that tomorrow’s workplace will be completely virtual.  although inefficient by today’s standards, talking facilitates understanding between individuals and contributes to the social order. in a cyberspace-only world, we run the risk of having less socialization and many more of the misunderstandings that can result from  it. society must be wary of the isolating aspect of high-tech communication exercised to the extreme.must be wary of the isolating aspect of high-tech communication exercised to the extreme.  before we dismiss the past as irrelevant in today’s high-speed world, we have to look at what we lose along with the gains. the  solution for me has been to simply walk away from the computer and talk to real people.real peopleinterrupt h steve.ciarcia@circuitcellar.com 96 issue 151     february 2003 circuit cellar®www.circuitcellar.com priority